{"id":"03ebaf5f964f2556676bf389fe415759","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _forwarderRegistry;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _forwarderRegistry = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _forwarderRegistry;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\n        return forwarder == address(_forwarderRegistry);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\ncontract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                accounts[i].sendValue(amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == tokens.length && length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == contracts.length && length == tokenIds.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n            }\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, basic interface.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n    /// @notice Emitted when some token is transferred.\n    /// @param operator The initiator of the transfer.\n    /// @param from The previous token owner.\n    /// @param to The new token owner.\n    /// @param id The transferred token identifier.\n    /// @param value The amount of token.\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /// @notice Emitted when a batch of tokens is transferred.\n    /// @param operator The initiator of the transfer.\n    /// @param from The previous tokens owner.\n    /// @param to The new tokens owner.\n    /// @param ids The transferred tokens identifiers.\n    /// @param values The amounts of tokens.\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /// @notice Emitted when an approval for all tokens is set or unset.\n    /// @param owner The tokens owner.\n    /// @param operator The approved address.\n    /// @param approved True when then approval is set, false when it is unset.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /// @notice Emitted optionally when a token metadata URI is set.\n    /// @param value The token metadata URI.\n    /// @param id The token identifier.\n    event URI(string value, uint256 indexed id);\n\n    /// @notice Safely transfers some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely transfers a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n\n    /// @notice Enables or disables an operator's approval.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@openzeppelin/contracts-4.9.5/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/escrow/TokenEscrow.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\";\nimport {IERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\n\n/// @title TokenEscrow contract\n/// @notice Contract that allows users to escrow tokens for use in the Anichess Game.\ncontract TokenEscrow is ForwarderRegistryContext, TokenRecovery, ERC1155TokenReceiver {\n    /// @notice Emitted when tokens are deposited\n    event DepositTokens(address indexed user, uint256[] ids);\n\n    /// @notice Emitted when tokens are withdrawn\n    event WithdrawTokens(address indexed user, uint256[] ids);\n\n    // Custom errors\n    error InvalidInventory();\n    error UnsupportedMethod();\n    error InsufficientBalance(uint256 tokenId, uint256 balance);\n    error BalanceExceeded(uint256 tokenId, uint256 balance);\n    error InconsistentArrays();\n\n    /// @notice An Orb contract reference\n    IERC1155 public immutable TOKEN_INVENTORY;\n\n    /// @notice Mapping from owner address to a mapping from token ID to escrowed token count.\n    mapping(address => mapping(uint256 => uint256)) public escrowedNFTs;\n\n    /// @notice Creates a new escrow contract\n    /// @dev Throws if the _inventory address is a zero address.\n    /// @dev ContractOwnership is required to initiate TokenRecovery\n    /// @param forwarderRegistry The forwarder registry contract information\n    /// @param inventory The inventory contract address\n    constructor(IForwarderRegistry forwarderRegistry, IERC1155 inventory) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        if (address(inventory) == address(0)) {\n            revert InvalidInventory();\n        }\n        TOKEN_INVENTORY = inventory;\n    }\n\n    /// @notice Returns the escrowed token balance of a given token held by a given address\n    /// @param account The address of the token holder\n    /// @param id The ID of the token\n    /// @return balance The amount of token escrowed held by the token holder correponding to the token ID\n    function balanceOf(address account, uint256 id) external view returns (uint256) {\n        return escrowedNFTs[account][id];\n    }\n\n    /// @notice Handles the deposit of tokens.\n    /// @dev Batch transfer tokens from the sender to this contract\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\n    function deposit(uint256[] calldata ids, uint256[] calldata values) external {\n        TOKEN_INVENTORY.safeBatchTransferFrom(_msgSender(), address(this), ids, values, \"\");\n    }\n\n    /// @notice Handles token withdrawal\n    /// @dev Reverts if the array length of ids & values does not match.\n    /// @dev Reverts if the sender does not have enough balance.\n    /// @dev Updates the escrowedTokens mapping.\n    /// @dev Emits {WithdrawTokens} events.\n    /// @dev Transfers the token from this contract to the sender's address\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\n    function withdraw(uint256[] calldata ids, uint256[] calldata values) external {\n        if (ids.length != values.length) {\n            revert InconsistentArrays();\n        }\n        address sender = _msgSender();\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 value = values[i];\n            uint256 senderBalance = escrowedNFTs[sender][id];\n            if (senderBalance < value) {\n                revert InsufficientBalance(id, senderBalance);\n            }\n            escrowedNFTs[sender][id] = senderBalance - value;\n        }\n\n        emit WithdrawTokens(sender, ids);\n\n        TOKEN_INVENTORY.safeBatchTransferFrom(address(this), sender, ids, values, \"\");\n    }\n\n    /// @notice Handles the receipt of a single type of token.\n    /// @dev Reverts if this method has been triggered.\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns (bytes4) {\n        revert UnsupportedMethod();\n    }\n\n    /// @notice Handles the receipt of multiple types of tokens.\n    /// @dev Reverts if the sender is not in the inventory.\n    /// @dev Updates the escrowedTokens mapping.\n    /// @dev Reverts if the updated token balance is greater than 1\n    /// @dev Emits a {DepositTokens} event.\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\n    /// @return selector The function selector\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata\n    ) external returns (bytes4) {\n        if (msg.sender != address(TOKEN_INVENTORY)) {\n            revert InvalidInventory();\n        }\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 newBalance = escrowedNFTs[from][id] + values[i];\n            if (newBalance > 1) {\n                revert BalanceExceeded(id, newBalance);\n            }\n            escrowedNFTs[from][id] = newBalance;\n        }\n        emit DepositTokens(from, ids);\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\n    }\n\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"},"contracts/mocks/TokenEscrow/TokenEscrowMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {TokenEscrow} from \"../../escrow/TokenEscrow.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts-4.9.5/utils/Context.sol\";\nimport {IERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\";\n\n/// @title ORBNFTMock Contract\n/// @notice Mock contract for testing purposes, extends the ORBNFT contract.\n\ncontract TokenEscrowMock is TokenEscrow {\n    event Data(bytes data);\n\n    /// @notice Creates a new escrow contract\n    /// @dev Throws if the _inventory address is a zero address.\n    /// @dev ContractOwnership is required to initiate TokenRecovery\n    /// @param forwarderRegistry The forwarder registry contract information\n    /// @param inventory_ The inventory contract address\n    constructor(IForwarderRegistry forwarderRegistry, IERC1155 inventory_) TokenEscrow(forwarderRegistry, inventory_) {}\n\n    function msgData() public {\n        emit Data(_msgData());\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":0,"details":{"yul":true}},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[82],"ContractOwnershipStorage":[307],"InterfaceDetection":[338]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":308,"src":"57:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"65:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":83,"src":"140:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"148:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":339,"src":"212:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"220:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["548:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":82,"src":"548:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"548:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["571:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":338,"src":"571:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"571:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"291:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,338,350,82,105,2002],"name":"ContractOwnership","nameLocation":"527:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["602:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"602:24:0"},"nodeType":"UsingForDirective","src":"596:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["631:24:0","656:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"631:31:0"},"referencedDeclaration":124,"src":"631:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"997:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1057:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1007:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1032:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"1007:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1041:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":200,"src":"1007:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1007:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"669:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"983:12:0","nodeType":"VariableDeclaration","scope":31,"src":"975:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"975:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"974:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"997:0:0"},"scope":32,"src":"963:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"509:570:0","usedErrors":[]}],"src":"32:1048:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[2002],"ContractOwnershipBase":[82],"ContractOwnershipStorage":[307],"IERC173":[105]},"id":83,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":106,"src":"57:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"65:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":308,"src":"110:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"118:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":2003,"src":"196:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"204:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"Context","nameLocations":["585:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":2002,"src":"585:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"585:7:1"},{"baseName":{"id":44,"name":"IERC173","nameLocations":["594:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"594:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"594:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"264:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":82,"linearizedBaseContracts":[82,105,2002],"name":"ContractOwnershipBase","nameLocation":"560:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["614:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"614:24:1"},"nodeType":"UsingForDirective","src":"608:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["643:24:1","668:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"643:31:1"},"referencedDeclaration":124,"src":"643:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[104],"body":{"id":62,"nodeType":"Block","src":"773:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":56,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"790:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"815:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"790:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":59,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"824:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":276,"src":"790:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$returns$_t_address_$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":55,"id":61,"nodeType":"Return","src":"783:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"681:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":63,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"718:5:1","nodeType":"FunctionDefinition","overrides":{"id":52,"nodeType":"OverrideSpecifier","overrides":[],"src":"746:8:1"},"parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"723:2:1"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63,"src":"764:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"763:9:1"},"scope":82,"src":"709:129:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[98],"body":{"id":80,"nodeType":"Block","src":"941:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":75,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"1003:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1017:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":70,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"951:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"976:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"951:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"985:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":263,"src":"951:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":79,"nodeType":"ExpressionStatement","src":"951:75:1"}]},"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"844:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":81,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"881:17:1","nodeType":"FunctionDefinition","overrides":{"id":68,"nodeType":"OverrideSpecifier","overrides":[],"src":"932:8:1"},"parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"newOwner","nameLocation":"907:8:1","nodeType":"VariableDeclaration","scope":81,"src":"899:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:18:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"941:0:1"},"scope":82,"src":"872:161:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":83,"src":"542:493:1","usedErrors":[]}],"src":"32:1004:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[105]},"id":106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":84,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"57:170:2","text":"@title ERC-173 Contract Ownership Standard\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":105,"linearizedBaseContracts":[105],"name":"IERC173","nameLocation":"237:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":86,"nodeType":"StructuredDocumentation","src":"251:162:2","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":92,"name":"OwnershipTransferred","nameLocation":"424:20:2","nodeType":"EventDefinition","parameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"461:13:2","nodeType":"VariableDeclaration","scope":92,"src":"445:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":90,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"492:8:2","nodeType":"VariableDeclaration","scope":92,"src":"476:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"476:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"444:57:2"},"src":"418:84:2"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"508:342:2","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":98,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"864:17:2","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"newOwner","nameLocation":"890:8:2","nodeType":"VariableDeclaration","scope":98,"src":"882:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"881:18:2"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[],"src":"908:0:2"},"scope":105,"src":"855:54:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"915:116:2","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":104,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1045:5:2","nodeType":"FunctionDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"1050:2:2"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"contractOwner","nameLocation":"1084:13:2","nodeType":"VariableDeclaration","scope":104,"src":"1076:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:23:2"},"scope":105,"src":"1036:63:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":106,"src":"227:874:2","usedErrors":[]}],"src":"32:1070:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[307],"IERC173":[105],"InterfaceDetectionStorage":[449],"ProxyInitialization":[713]},"id":308,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":107,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":106,"src":"57:52:3","symbolAliases":[{"foreign":{"id":108,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"65:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":111,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":714,"src":"110:84:3","symbolAliases":[{"foreign":{"id":110,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"118:19:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":113,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":450,"src":"195:104:3","symbolAliases":[{"foreign":{"id":112,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"203:25:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":307,"linearizedBaseContracts":[307],"name":"ContractOwnershipStorage","nameLocation":"309:24:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":117,"libraryName":{"id":114,"name":"ContractOwnershipStorage","nameLocations":["346:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"346:24:3"},"nodeType":"UsingForDirective","src":"340:67:3","typeName":{"id":116,"nodeType":"UserDefinedTypeName","pathNode":{"id":115,"name":"ContractOwnershipStorage.Layout","nameLocations":["375:24:3","400:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"375:31:3"},"referencedDeclaration":124,"src":"375:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":121,"libraryName":{"id":118,"name":"InterfaceDetectionStorage","nameLocations":["418:25:3"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"418:25:3"},"nodeType":"UsingForDirective","src":"412:69:3","typeName":{"id":120,"nodeType":"UserDefinedTypeName","pathNode":{"id":119,"name":"InterfaceDetectionStorage.Layout","nameLocations":["448:25:3","474:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"448:32:3"},"referencedDeclaration":359,"src":"448:32:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":124,"members":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"519:13:3","nodeType":"VariableDeclaration","scope":124,"src":"511:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"494:6:3","nodeType":"StructDefinition","scope":307,"src":"487:52:3","visibility":"public"},{"constant":true,"id":137,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"571:19:3","nodeType":"VariableDeclaration","scope":307,"src":"545:128:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"619:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":130,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"609:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{}}},"id":133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"601:67:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"671:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"601:71:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"593:80:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":150,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"705:21:3","nodeType":"VariableDeclaration","scope":307,"src":"679:128:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"679:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"755:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":143,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"745:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"745:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"737:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:3","typeDescriptions":{}}},"id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"737:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"737:69:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"729:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:3","typeDescriptions":{}}},"id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"729:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":156,"name":"OwnershipTransferred","nameLocation":"820:20:3","nodeType":"EventDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"857:13:3","nodeType":"VariableDeclaration","scope":156,"src":"841:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":154,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"888:8:3","nodeType":"VariableDeclaration","scope":156,"src":"872:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"840:57:3"},"src":"814:84:3"},{"body":{"id":199,"nodeType":"Block","src":"1406:267:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":165,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1420:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1444:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1436:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:3","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1436:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1420:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"IfStatement","src":"1416:152:3","trueBody":{"id":185,"nodeType":"Block","src":"1448:120:3","statements":[{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":171,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1462:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1464:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"1462:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":174,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1480:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1462:30:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":176,"nodeType":"ExpressionStatement","src":"1462:30:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1540:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1532:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:3","typeDescriptions":{}}},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":182,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1544:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":177,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1511:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"EmitStatement","src":"1506:51:3"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":193,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"1639:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$105_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$105_$","typeString":"type(contract IERC173)"}],"id":192,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1634:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$105","typeString":"type(contract IERC173)"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1648:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1634:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1661:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":187,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1577:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"1577:32:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1612:21:3","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":402,"src":"1577:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:89:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"ExpressionStatement","src":"1577:89:3"}]},"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"904:423:3","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":200,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1341:15:3","nodeType":"FunctionDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"s","nameLocation":"1372:1:3","nodeType":"VariableDeclaration","scope":200,"src":"1357:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"Layout","nameLocations":["1357:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"1357:6:3"},"referencedDeclaration":124,"src":"1357:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"initialOwner","nameLocation":"1383:12:3","nodeType":"VariableDeclaration","scope":200,"src":"1375:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1356:40:3"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"1406:0:3"},"scope":307,"src":"1332:341:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":222,"nodeType":"Block","src":"2297:112:3","statements":[{"expression":{"arguments":[{"id":212,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"2336:21:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":209,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2307:19:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$713_$","typeString":"type(library ProxyInitialization)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2327:8:3","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":712,"src":"2307:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2307:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"ExpressionStatement","src":"2307:54:3"},{"expression":{"arguments":[{"id":219,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"2389:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":216,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2371:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:15:3","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":200,"src":"2371:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"2371:31:3"}]},"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"1679:545:3","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2238:9:3","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"s","nameLocation":"2263:1:3","nodeType":"VariableDeclaration","scope":223,"src":"2248:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"Layout","nameLocations":["2248:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"2248:6:3"},"referencedDeclaration":124,"src":"2248:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"initialOwner","nameLocation":"2274:12:3","nodeType":"VariableDeclaration","scope":223,"src":"2266:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:40:3"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"2297:0:3"},"scope":307,"src":"2229:180:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":262,"nodeType":"Block","src":"2848:281:3","statements":[{"assignments":[235],"declarations":[{"constant":false,"id":235,"mutability":"mutable","name":"previousOwner","nameLocation":"2866:13:3","nodeType":"VariableDeclaration","scope":262,"src":"2858:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"2858:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":238,"initialValue":{"expression":{"id":236,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"2882:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2884:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"2882:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2858:39:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2915:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":241,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2925:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2915:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2940:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2907:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2907:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":245,"nodeType":"ExpressionStatement","src":"2907:60:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2981:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":247,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2998:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2981:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":261,"nodeType":"IfStatement","src":"2977:146:3","trueBody":{"id":260,"nodeType":"Block","src":"3008:115:3","statements":[{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":249,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"3022:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3024:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3022:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":252,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3040:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3022:26:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":254,"nodeType":"ExpressionStatement","src":"3022:26:3"},{"eventCall":{"arguments":[{"id":256,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3088:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":257,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3103:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":255,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"3067:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3067:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"EmitStatement","src":"3062:50:3"}]}}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"2415:340:3","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":263,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2769:17:3","nodeType":"FunctionDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"s","nameLocation":"2802:1:3","nodeType":"VariableDeclaration","scope":263,"src":"2787:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":226,"nodeType":"UserDefinedTypeName","pathNode":{"id":225,"name":"Layout","nameLocations":["2787:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"2787:6:3"},"referencedDeclaration":124,"src":"2787:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"sender","nameLocation":"2813:6:3","nodeType":"VariableDeclaration","scope":263,"src":"2805:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"newOwner","nameLocation":"2829:8:3","nodeType":"VariableDeclaration","scope":263,"src":"2821:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"2821:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2786:52:3"},"returnParameters":{"id":233,"nodeType":"ParameterList","parameters":[],"src":"2848:0:3"},"scope":307,"src":"2760:369:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":275,"nodeType":"Block","src":"3335:39:3","statements":[{"expression":{"expression":{"id":272,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3352:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3354:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3352:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":271,"id":274,"nodeType":"Return","src":"3345:22:3"}]},"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"3135:116:3","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":276,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3265:5:3","nodeType":"FunctionDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"s","nameLocation":"3286:1:3","nodeType":"VariableDeclaration","scope":276,"src":"3271:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":266,"nodeType":"UserDefinedTypeName","pathNode":{"id":265,"name":"Layout","nameLocations":["3271:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3271:6:3"},"referencedDeclaration":124,"src":"3271:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3270:18:3"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"contractOwner","nameLocation":"3320:13:3","nodeType":"VariableDeclaration","scope":276,"src":"3312:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"3312:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3311:23:3"},"scope":307,"src":"3256:118:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"3621:80:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":286,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3639:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":287,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3650:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3652:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3650:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3639:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3667:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":285,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3631:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":292,"nodeType":"ExpressionStatement","src":"3631:63:3"}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"3380:155:3","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts if `account` is not the contract owner.\n @param account The account."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"3549:22:3","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"s","nameLocation":"3587:1:3","nodeType":"VariableDeclaration","scope":294,"src":"3572:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":279,"nodeType":"UserDefinedTypeName","pathNode":{"id":278,"name":"Layout","nameLocations":["3572:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3572:6:3"},"referencedDeclaration":124,"src":"3572:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"account","nameLocation":"3598:7:3","nodeType":"VariableDeclaration","scope":294,"src":"3590:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"3590:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3571:35:3"},"returnParameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"3621:0:3"},"scope":307,"src":"3540:161:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":305,"nodeType":"Block","src":"3766:115:3","statements":[{"assignments":[301],"declarations":[{"constant":false,"id":301,"mutability":"mutable","name":"position","nameLocation":"3784:8:3","nodeType":"VariableDeclaration","scope":305,"src":"3776:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3776:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":303,"initialValue":{"id":302,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"3795:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3776:38:3"},{"AST":{"nodeType":"YulBlock","src":"3833:42:3","statements":[{"nodeType":"YulAssignment","src":"3847:18:3","value":{"name":"position","nodeType":"YulIdentifier","src":"3857:8:3"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3847:6:3"}]}]},"evmVersion":"london","externalReferences":[{"declaration":301,"isOffset":false,"isSlot":false,"src":"3857:8:3","valueSize":1},{"declaration":298,"isOffset":false,"isSlot":true,"src":"3847:6:3","suffix":"slot","valueSize":1}],"id":304,"nodeType":"InlineAssembly","src":"3824:51:3"}]},"id":306,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3716:6:3","nodeType":"FunctionDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[],"src":"3722:2:3"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"s","nameLocation":"3763:1:3","nodeType":"VariableDeclaration","scope":306,"src":"3748:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":297,"nodeType":"UserDefinedTypeName","pathNode":{"id":296,"name":"Layout","nameLocations":["3748:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3748:6:3"},"referencedDeclaration":124,"src":"3748:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3747:18:3"},"scope":307,"src":"3707:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":308,"src":"301:3582:3","usedErrors":[]}],"src":"32:3852:3"},"id":3},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[350],"InterfaceDetection":[338],"InterfaceDetectionStorage":[449]},"id":339,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":309,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":311,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":339,"sourceUnit":351,"src":"57:49:4","symbolAliases":[{"foreign":{"id":310,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"65:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":313,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":339,"sourceUnit":450,"src":"107:84:4","symbolAliases":[{"foreign":{"id":312,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"115:25:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":315,"name":"IERC165","nameLocations":["424:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":350,"src":"424:7:4"},"id":316,"nodeType":"InheritanceSpecifier","src":"424:7:4"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":314,"nodeType":"StructuredDocumentation","src":"193:191:4","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":338,"linearizedBaseContracts":[338,350],"name":"InterfaceDetection","nameLocation":"402:18:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":320,"libraryName":{"id":317,"name":"InterfaceDetectionStorage","nameLocations":["444:25:4"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"444:25:4"},"nodeType":"UsingForDirective","src":"438:69:4","typeName":{"id":319,"nodeType":"UserDefinedTypeName","pathNode":{"id":318,"name":"InterfaceDetectionStorage.Layout","nameLocations":["474:25:4","500:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"474:32:4"},"referencedDeclaration":359,"src":"474:32:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[349],"body":{"id":336,"nodeType":"Block","src":"626:89:4","statements":[{"expression":{"arguments":[{"id":333,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"696:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":329,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"643:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"669:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"643:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"678:17:4","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":436,"src":"643:52:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$returns$_t_bool_$bound_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":328,"id":335,"nodeType":"Return","src":"636:72:4"}]},"documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"513:23:4","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":337,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"550:17:4","nodeType":"FunctionDefinition","overrides":{"id":325,"nodeType":"OverrideSpecifier","overrides":[],"src":"602:8:4"},"parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"interfaceId","nameLocation":"575:11:4","nodeType":"VariableDeclaration","scope":337,"src":"568:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":322,"name":"bytes4","nodeType":"ElementaryTypeName","src":"568:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"567:20:4"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"620:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":326,"name":"bool","nodeType":"ElementaryTypeName","src":"620:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"619:6:4"},"scope":338,"src":"541:174:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":339,"src":"384:333:4","usedErrors":[]}],"src":"32:686:4"},"id":4},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[350]},"id":351,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":340,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"57:173:5","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":350,"linearizedBaseContracts":[350],"name":"IERC165","nameLocation":"240:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"254:340:5","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":349,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"608:17:5","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"interfaceId","nameLocation":"633:11:5","nodeType":"VariableDeclaration","scope":349,"src":"626:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":343,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"625:20:5"},"returnParameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"supported","nameLocation":"674:9:5","nodeType":"VariableDeclaration","scope":349,"src":"669:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":346,"name":"bool","nodeType":"ElementaryTypeName","src":"669:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"668:16:5"},"scope":350,"src":"599:86:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":351,"src":"230:457:5","usedErrors":[]}],"src":"32:656:5"},"id":5},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[350],"InterfaceDetectionStorage":[449]},"id":450,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":352,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":354,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":450,"sourceUnit":351,"src":"57:52:6","symbolAliases":[{"foreign":{"id":353,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"65:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":449,"linearizedBaseContracts":[449],"name":"InterfaceDetectionStorage","nameLocation":"119:25:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":359,"members":[{"constant":false,"id":358,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"199:19:6","nodeType":"VariableDeclaration","scope":359,"src":"175:43:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":357,"keyType":{"id":355,"name":"bytes4","nodeType":"ElementaryTypeName","src":"183:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"175:23:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueType":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"193:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"158:6:6","nodeType":"StructDefinition","scope":449,"src":"151:74:6","visibility":"public"},{"constant":true,"id":372,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"257:19:6","nodeType":"VariableDeclaration","scope":449,"src":"231:136:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"231:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"305:55:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":365,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"295:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"295:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"287:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"287:7:6","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"287:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"365:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"287:79:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"279:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"279:7:6","typeDescriptions":{}}},"id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"279:88:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":375,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"399:20:6","nodeType":"VariableDeclaration","scope":449,"src":"374:58:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":373,"name":"bytes4","nodeType":"ElementaryTypeName","src":"374:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:10:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"764:152:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":387,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"782:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":388,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"797:20:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"782:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"819:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""},"value":"InterfaceDetection: wrong value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""}],"id":386,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"774:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"774:79:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"ExpressionStatement","src":"774:79:6"},{"expression":{"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":393,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"863:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"865:19:6","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":358,"src":"863:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":397,"indexExpression":{"id":395,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"885:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"863:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":398,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"900:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"863:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":400,"nodeType":"ExpressionStatement","src":"863:46:6"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"439:226:6","text":"@notice Sets or unsets an ERC165 interface.\n @dev Reverts if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":402,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"679:21:6","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"s","nameLocation":"716:1:6","nodeType":"VariableDeclaration","scope":402,"src":"701:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":378,"nodeType":"UserDefinedTypeName","pathNode":{"id":377,"name":"Layout","nameLocations":["701:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"701:6:6"},"referencedDeclaration":359,"src":"701:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"interfaceId","nameLocation":"726:11:6","nodeType":"VariableDeclaration","scope":402,"src":"719:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":380,"name":"bytes4","nodeType":"ElementaryTypeName","src":"719:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"supported","nameLocation":"744:9:6","nodeType":"VariableDeclaration","scope":402,"src":"739:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":382,"name":"bool","nodeType":"ElementaryTypeName","src":"739:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:54:6"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[],"src":"764:0:6"},"scope":449,"src":"670:246:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":435,"nodeType":"Block","src":"1371:236:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":413,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1385:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":414,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1400:20:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1385:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":419,"nodeType":"IfStatement","src":"1381:78:6","trueBody":{"id":418,"nodeType":"Block","src":"1422:37:6","statements":[{"expression":{"hexValue":"66616c7365","id":416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1443:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":412,"id":417,"nodeType":"Return","src":"1436:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":420,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1472:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":422,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"1492:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$350_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$350_$","typeString":"type(contract IERC165)"}],"id":421,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1487:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$350","typeString":"type(contract IERC165)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1501:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1487:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1472:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"nodeType":"IfStatement","src":"1468:82:6","trueBody":{"id":428,"nodeType":"Block","src":"1514:36:6","statements":[{"expression":{"hexValue":"74727565","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":412,"id":427,"nodeType":"Return","src":"1528:11:6"}]}},{"expression":{"baseExpression":{"expression":{"id":430,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"1566:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1568:19:6","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1566:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":433,"indexExpression":{"id":432,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1588:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1566:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":412,"id":434,"nodeType":"Return","src":"1559:41:6"}]},"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"922:340:6","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":436,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1276:17:6","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"s","nameLocation":"1309:1:6","nodeType":"VariableDeclaration","scope":436,"src":"1294:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":405,"nodeType":"UserDefinedTypeName","pathNode":{"id":404,"name":"Layout","nameLocations":["1294:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1294:6:6"},"referencedDeclaration":359,"src":"1294:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"interfaceId","nameLocation":"1319:11:6","nodeType":"VariableDeclaration","scope":436,"src":"1312:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1312:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1293:38:6"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"supported","nameLocation":"1360:9:6","nodeType":"VariableDeclaration","scope":436,"src":"1355:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":410,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1354:16:6"},"scope":449,"src":"1267:340:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":447,"nodeType":"Block","src":"1672:115:6","statements":[{"assignments":[443],"declarations":[{"constant":false,"id":443,"mutability":"mutable","name":"position","nameLocation":"1690:8:6","nodeType":"VariableDeclaration","scope":447,"src":"1682:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1682:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":445,"initialValue":{"id":444,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1701:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1682:38:6"},{"AST":{"nodeType":"YulBlock","src":"1739:42:6","statements":[{"nodeType":"YulAssignment","src":"1753:18:6","value":{"name":"position","nodeType":"YulIdentifier","src":"1763:8:6"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1753:6:6"}]}]},"evmVersion":"london","externalReferences":[{"declaration":443,"isOffset":false,"isSlot":false,"src":"1763:8:6","valueSize":1},{"declaration":440,"isOffset":false,"isSlot":true,"src":"1753:6:6","suffix":"slot","valueSize":1}],"id":446,"nodeType":"InlineAssembly","src":"1730:51:6"}]},"id":448,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1622:6:6","nodeType":"FunctionDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[],"src":"1628:2:6"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"s","nameLocation":"1669:1:6","nodeType":"VariableDeclaration","scope":448,"src":"1654:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":439,"nodeType":"UserDefinedTypeName","pathNode":{"id":438,"name":"Layout","nameLocations":["1654:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1654:6:6"},"referencedDeclaration":359,"src":"1654:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1653:18:6"},"scope":449,"src":"1613:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":450,"src":"111:1678:6","usedErrors":[]}],"src":"32:1758:6"},"id":6},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[499],"ForwarderRegistryContextBase":[619],"IERC2771":[631],"IForwarderRegistry":[645]},"id":500,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":451,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":453,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":500,"sourceUnit":646,"src":"57:71:7","symbolAliases":[{"foreign":{"id":452,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"65:18:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":500,"sourceUnit":632,"src":"129:51:7","symbolAliases":[{"foreign":{"id":454,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"137:8:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":457,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":500,"sourceUnit":620,"src":"181:85:7","symbolAliases":[{"foreign":{"id":456,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"189:28:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":459,"name":"ForwarderRegistryContextBase","nameLocations":["574:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"574:28:7"},"id":460,"nodeType":"InheritanceSpecifier","src":"574:28:7"},{"baseName":{"id":461,"name":"IERC2771","nameLocations":["604:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":631,"src":"604:8:7"},"id":462,"nodeType":"InheritanceSpecifier","src":"604:8:7"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"268:260:7","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":499,"linearizedBaseContracts":[499,631,619],"name":"ForwarderRegistryContext","nameLocation":"546:24:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":471,"nodeType":"Block","src":"719:2:7","statements":[]},"id":472,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":468,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"699:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"id":469,"kind":"baseConstructorSpecifier","modifierName":{"id":467,"name":"ForwarderRegistryContextBase","nameLocations":["670:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"670:28:7"},"nodeType":"ModifierInvocation","src":"670:48:7"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":465,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"650:18:7","nodeType":"VariableDeclaration","scope":472,"src":"631:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":464,"nodeType":"UserDefinedTypeName","pathNode":{"id":463,"name":"IForwarderRegistry","nameLocations":["631:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"631:18:7"},"referencedDeclaration":645,"src":"631:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"630:39:7"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[],"src":"719:0:7"},"scope":499,"src":"619:102:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":480,"nodeType":"Block","src":"799:42:7","statements":[{"expression":{"id":478,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"816:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":477,"id":479,"nodeType":"Return","src":"809:25:7"}]},"functionSelector":"2b4c9f16","id":481,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"736:17:7","nodeType":"FunctionDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[],"src":"753:2:7"},"returnParameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"779:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":475,"nodeType":"UserDefinedTypeName","pathNode":{"id":474,"name":"IForwarderRegistry","nameLocations":["779:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"779:18:7"},"referencedDeclaration":645,"src":"779:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"778:20:7"},"scope":499,"src":"727:114:7","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[630],"body":{"id":497,"nodeType":"Block","src":"969:64:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"986:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":493,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1007:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}],"id":492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"999:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:7","typeDescriptions":{}}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"999:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"986:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":489,"id":496,"nodeType":"Return","src":"979:47:7"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"847:24:7","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"885:18:7","nodeType":"FunctionDefinition","overrides":{"id":486,"nodeType":"OverrideSpecifier","overrides":[],"src":"945:8:7"},"parameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"forwarder","nameLocation":"912:9:7","nodeType":"VariableDeclaration","scope":498,"src":"904:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"903:19:7"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":498,"src":"963:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":487,"name":"bool","nodeType":"ElementaryTypeName","src":"963:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"962:6:7"},"scope":499,"src":"876:157:7","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":500,"src":"528:507:7","usedErrors":[]}],"src":"32:1004:7"},"id":7},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[674],"ForwarderRegistryContextBase":[619],"IForwarderRegistry":[645]},"id":620,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":501,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":620,"sourceUnit":646,"src":"57:74:8","symbolAliases":[{"foreign":{"id":502,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"65:18:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":620,"sourceUnit":675,"src":"132:67:8","symbolAliases":[{"foreign":{"id":504,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"140:15:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"201:243:8","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":619,"linearizedBaseContracts":[619],"name":"ForwarderRegistryContextBase","nameLocation":"462:28:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":509,"mutability":"immutable","name":"_forwarderRegistry","nameLocation":"535:18:8","nodeType":"VariableDeclaration","scope":619,"src":"497:56:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":508,"nodeType":"UserDefinedTypeName","pathNode":{"id":507,"name":"IForwarderRegistry","nameLocations":["497:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"497:18:8"},"referencedDeclaration":645,"src":"497:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":519,"nodeType":"Block","src":"610:55:8","statements":[{"expression":{"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":515,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"620:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":516,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"641:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"src":"620:38:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"id":518,"nodeType":"ExpressionStatement","src":"620:38:8"}]},"id":520,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"591:17:8","nodeType":"VariableDeclaration","scope":520,"src":"572:36:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":511,"nodeType":"UserDefinedTypeName","pathNode":{"id":510,"name":"IForwarderRegistry","nameLocations":["572:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"572:18:8"},"referencedDeclaration":645,"src":"572:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"571:38:8"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[],"src":"610:0:8"},"scope":619,"src":"560:105:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"843:681:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":526,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1044:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1044:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":528,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967270,"src":"1058:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1061:6:8","memberName":"origin","nodeType":"MemberAccess","src":"1058:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1044:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":531,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1071:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1075:4:8","memberName":"data","nodeType":"MemberAccess","src":"1071:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1080:6:8","memberName":"length","nodeType":"MemberAccess","src":"1071:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1089:2:8","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1071:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1044:47:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":541,"nodeType":"IfStatement","src":"1040:95:8","trueBody":{"id":540,"nodeType":"Block","src":"1093:42:8","statements":[{"expression":{"expression":{"id":537,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1114:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1118:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1114:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":525,"id":539,"nodeType":"Return","src":"1107:17:8"}]}},{"assignments":[543],"declarations":[{"constant":false,"id":543,"mutability":"mutable","name":"sender","nameLocation":"1153:6:8","nodeType":"VariableDeclaration","scope":569,"src":"1145:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":542,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":547,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":544,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"1162:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$674_$","typeString":"type(library ERC2771Calldata)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1178:9:8","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":656,"src":"1162:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1145:44:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":548,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1347:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1351:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1347:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":552,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1369:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}],"id":551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1361:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"1361:7:8","typeDescriptions":{}}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1347:41:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":557,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"1431:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":558,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1439:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1443:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1439:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":555,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1392:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1411:19:8","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":644,"src":"1392:38:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1347:103:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":565,"nodeType":"IfStatement","src":"1343:147:8","trueBody":{"id":564,"nodeType":"Block","src":"1452:38:8","statements":[{"expression":{"id":562,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"1473:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":525,"id":563,"nodeType":"Return","src":"1466:13:8"}]}},{"expression":{"expression":{"id":566,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1507:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1507:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":525,"id":568,"nodeType":"Return","src":"1500:17:8"}]},"documentation":{"id":521,"nodeType":"StructuredDocumentation","src":"671:105:8","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"790:10:8","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[],"src":"800:2:8"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":570,"src":"834:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"834:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"833:9:8"},"scope":619,"src":"781:743:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":617,"nodeType":"Block","src":"1705:666:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":576,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1906:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1910:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1906:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":578,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967270,"src":"1920:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1923:6:8","memberName":"origin","nodeType":"MemberAccess","src":"1920:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1906:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1933:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1937:4:8","memberName":"data","nodeType":"MemberAccess","src":"1933:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:6:8","memberName":"length","nodeType":"MemberAccess","src":"1933:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1951:2:8","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1933:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1906:47:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":591,"nodeType":"IfStatement","src":"1902:93:8","trueBody":{"id":590,"nodeType":"Block","src":"1955:40:8","statements":[{"expression":{"expression":{"id":587,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1976:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1980:4:8","memberName":"data","nodeType":"MemberAccess","src":"1976:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":575,"id":589,"nodeType":"Return","src":"1969:15:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":592,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2156:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2160:6:8","memberName":"sender","nodeType":"MemberAccess","src":"2156:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":596,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"2178:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}],"id":595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2170:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"2170:7:8","typeDescriptions":{}}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2156:41:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":601,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2240:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$674_$","typeString":"type(library ERC2771Calldata)"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2256:9:8","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":656,"src":"2240:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":604,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2269:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:8","memberName":"sender","nodeType":"MemberAccess","src":"2269:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":599,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"2201:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:19:8","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":644,"src":"2201:38:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2201:79:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2156:124:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":613,"nodeType":"IfStatement","src":"2152:187:8","trueBody":{"id":612,"nodeType":"Block","src":"2282:57:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":608,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2303:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$674_$","typeString":"type(library ERC2771Calldata)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:7:8","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":673,"src":"2303:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":575,"id":611,"nodeType":"Return","src":"2296:32:8"}]}},{"expression":{"expression":{"id":614,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2356:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2360:4:8","memberName":"data","nodeType":"MemberAccess","src":"2356:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":575,"id":616,"nodeType":"Return","src":"2349:15:8"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"1530:103:8","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":618,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1647:8:8","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"1655:2:8"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":618,"src":"1689:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":573,"name":"bytes","nodeType":"ElementaryTypeName","src":"1689:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1688:16:8"},"scope":619,"src":"1638:733:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":620,"src":"444:1929:8","usedErrors":[]}],"src":"32:2342:8"},"id":8},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[631]},"id":632,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":621,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"57:110:9","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":631,"linearizedBaseContracts":[631],"name":"IERC2771","nameLocation":"177:8:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"192:171:9","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":630,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"377:18:9","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"forwarder","nameLocation":"404:9:9","nodeType":"VariableDeclaration","scope":630,"src":"396:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"395:19:9"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"isTrusted","nameLocation":"443:9:9","nodeType":"VariableDeclaration","scope":630,"src":"438:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":627,"name":"bool","nodeType":"ElementaryTypeName","src":"438:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"437:16:9"},"scope":631,"src":"368:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":632,"src":"167:289:9","usedErrors":[]}],"src":"32:425:9"},"id":9},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[645]},"id":646,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":633,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"57:143:10","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":645,"linearizedBaseContracts":[645],"name":"IForwarderRegistry","nameLocation":"210:18:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"235:314:10","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"563:19:10","nodeType":"FunctionDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":637,"mutability":"mutable","name":"sender","nameLocation":"591:6:10","nodeType":"VariableDeclaration","scope":644,"src":"583:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"forwarder","nameLocation":"607:9:10","nodeType":"VariableDeclaration","scope":644,"src":"599:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"599:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"582:35:10"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"isApproved","nameLocation":"646:10:10","nodeType":"VariableDeclaration","scope":644,"src":"641:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":641,"name":"bool","nodeType":"ElementaryTypeName","src":"641:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"640:17:10"},"scope":645,"src":"554:104:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":646,"src":"200:460:10","usedErrors":[]}],"src":"32:629:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[674]},"id":675,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":647,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"57:144:11","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":674,"linearizedBaseContracts":[674],"name":"ERC2771Calldata","nameLocation":"209:15:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":655,"nodeType":"Block","src":"397:105:11","statements":[{"AST":{"nodeType":"YulBlock","src":"416:80:11","statements":[{"nodeType":"YulAssignment","src":"430:56:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:11","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"465:12:11"},"nodeType":"YulFunctionCall","src":"465:14:11"},{"kind":"number","nodeType":"YulLiteral","src":"481:2:11","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"461:3:11"},"nodeType":"YulFunctionCall","src":"461:23:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"448:12:11"},"nodeType":"YulFunctionCall","src":"448:37:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"440:3:11"},"nodeType":"YulFunctionCall","src":"440:46:11"},"variableNames":[{"name":"sender","nodeType":"YulIdentifier","src":"430:6:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":652,"isOffset":false,"isSlot":false,"src":"430:6:11","valueSize":1}],"id":654,"nodeType":"InlineAssembly","src":"407:89:11"}]},"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"231:101:11","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":656,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"346:9:11","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[],"src":"355:2:11"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"sender","nameLocation":"389:6:11","nodeType":"VariableDeclaration","scope":656,"src":"381:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"380:16:11"},"scope":674,"src":"337:165:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":672,"nodeType":"Block","src":"678:89:11","statements":[{"id":671,"nodeType":"UncheckedBlock","src":"688:73:11","statements":[{"expression":{"baseExpression":{"expression":{"id":662,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"719:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:4:11","memberName":"data","nodeType":"MemberAccess","src":"719:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":664,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"729:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:4:11","memberName":"data","nodeType":"MemberAccess","src":"729:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:11","memberName":"length","nodeType":"MemberAccess","src":"729:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"747:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"729:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"719:31:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":661,"id":670,"nodeType":"Return","src":"712:38:11"}]}]},"documentation":{"id":657,"nodeType":"StructuredDocumentation","src":"508:102:11","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":673,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"624:7:11","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[],"src":"631:2:11"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"data","nameLocation":"672:4:11","nodeType":"VariableDeclaration","scope":673,"src":"657:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":659,"name":"bytes","nodeType":"ElementaryTypeName","src":"657:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"656:21:11"},"scope":674,"src":"615:152:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":675,"src":"201:568:11","usedErrors":[]}],"src":"32:738:11"},"id":11},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"ProxyInitialization":[713],"StorageSlot":[2062]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":676,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":678,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":2063,"src":"57:74:12","symbolAliases":[{"foreign":{"id":677,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"65:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"133:92:12","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":713,"linearizedBaseContracts":[713],"name":"ProxyInitialization","nameLocation":"233:19:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":711,"nodeType":"Block","src":"600:216:12","statements":[{"assignments":[691],"declarations":[{"constant":false,"id":691,"mutability":"mutable","name":"currentVersion","nameLocation":"642:14:12","nodeType":"VariableDeclaration","scope":711,"src":"610:46:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":690,"nodeType":"UserDefinedTypeName","pathNode":{"id":689,"name":"StorageSlot.Uint256Slot","nameLocations":["610:11:12","622:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"610:23:12"},"referencedDeclaration":2017,"src":"610:23:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":696,"initialValue":{"arguments":[{"id":694,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"686:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":692,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"659:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2062_$","typeString":"type(library StorageSlot)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"671:14:12","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2061,"src":"659:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2017_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"610:88:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":698,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"716:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"731:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2016,"src":"716:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":700,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"739:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"716:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746f726167653a2070686173652072656163686564","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"746:24:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""},"value":"Storage: phase reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""}],"id":697,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"708:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"708:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":704,"nodeType":"ExpressionStatement","src":"708:63:12"},{"expression":{"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":705,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"781:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"796:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2016,"src":"781:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":708,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"804:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"781:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":710,"nodeType":"ExpressionStatement","src":"781:28:12"}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"259:273:12","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":712,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"546:8:12","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"storageSlot","nameLocation":"563:11:12","nodeType":"VariableDeclaration","scope":712,"src":"555:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":681,"name":"bytes32","nodeType":"ElementaryTypeName","src":"555:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"phase","nameLocation":"584:5:12","nodeType":"VariableDeclaration","scope":712,"src":"576:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"554:36:12"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"600:0:12"},"scope":713,"src":"537:279:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":714,"src":"225:593:12","usedErrors":[]}],"src":"32:787:12"},"id":12},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[32],"TokenRecovery":[725],"TokenRecoveryBase":[944]},"id":726,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":717,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":726,"sourceUnit":945,"src":"57:63:13","symbolAliases":[{"foreign":{"id":716,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":944,"src":"65:17:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":719,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":726,"sourceUnit":33,"src":"121:68:13","symbolAliases":[{"foreign":{"id":718,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"129:17:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":721,"name":"TokenRecoveryBase","nameLocations":["439:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":944,"src":"439:17:13"},"id":722,"nodeType":"InheritanceSpecifier","src":"439:17:13"},{"baseName":{"id":723,"name":"ContractOwnership","nameLocations":["458:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"458:17:13"},"id":724,"nodeType":"InheritanceSpecifier","src":"458:17:13"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":720,"nodeType":"StructuredDocumentation","src":"191:213:13","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":725,"linearizedBaseContracts":[725,32,338,350,82,105,944,2002],"name":"TokenRecovery","nameLocation":"422:13:13","nodeType":"ContractDefinition","nodes":[],"scope":726,"src":"404:76:13","usedErrors":[]}],"src":"32:449:13"},"id":13},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Address":[1980],"Context":[2002],"ContractOwnershipStorage":[307],"IERC20":[1333],"IERC721":[1222],"SafeERC20":[1650],"TokenRecoveryBase":[944]},"id":945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":727,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:14"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":729,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":1256,"src":"57:69:14","symbolAliases":[{"foreign":{"id":728,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"65:6:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":1223,"src":"127:68:14","symbolAliases":[{"foreign":{"id":730,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1222,"src":"135:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":308,"src":"196:95:14","symbolAliases":[{"foreign":{"id":732,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"204:24:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":735,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":1651,"src":"292:82:14","symbolAliases":[{"foreign":{"id":734,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"300:9:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":737,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":2003,"src":"375:66:14","symbolAliases":[{"foreign":{"id":736,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"383:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":739,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":945,"sourceUnit":1981,"src":"442:66:14","symbolAliases":[{"foreign":{"id":738,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"450:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":741,"name":"Context","nameLocations":["812:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":2002,"src":"812:7:14"},"id":742,"nodeType":"InheritanceSpecifier","src":"812:7:14"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":740,"nodeType":"StructuredDocumentation","src":"510:272:14","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":944,"linearizedBaseContracts":[944,2002],"name":"TokenRecoveryBase","nameLocation":"791:17:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":746,"libraryName":{"id":743,"name":"ContractOwnershipStorage","nameLocations":["832:24:14"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"832:24:14"},"nodeType":"UsingForDirective","src":"826:67:14","typeName":{"id":745,"nodeType":"UserDefinedTypeName","pathNode":{"id":744,"name":"ContractOwnershipStorage.Layout","nameLocations":["861:24:14","886:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"861:31:14"},"referencedDeclaration":124,"src":"861:31:14","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":750,"libraryName":{"id":747,"name":"SafeERC20","nameLocations":["904:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":1650,"src":"904:9:14"},"nodeType":"UsingForDirective","src":"898:27:14","typeName":{"id":749,"nodeType":"UserDefinedTypeName","pathNode":{"id":748,"name":"IERC20","nameLocations":["918:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"918:6:14"},"referencedDeclaration":1333,"src":"918:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}}},{"global":false,"id":753,"libraryName":{"id":751,"name":"Address","nameLocations":["936:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"936:7:14"},"nodeType":"UsingForDirective","src":"930:34:14","typeName":{"id":752,"name":"address","nodeType":"ElementaryTypeName","src":"948:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"body":{"id":806,"nodeType":"Block","src":"1914:348:14","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":768,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"1981:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":763,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1924:24:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1949:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"1924:31:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":767,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1958:22:14","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"1924:56:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1924:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":771,"nodeType":"ExpressionStatement","src":"1924:70:14"},{"assignments":[773],"declarations":[{"constant":false,"id":773,"mutability":"mutable","name":"length","nameLocation":"2012:6:14","nodeType":"VariableDeclaration","scope":806,"src":"2004:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"2004:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":776,"initialValue":{"expression":{"id":774,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"2021:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2030:6:14","memberName":"length","nodeType":"MemberAccess","src":"2021:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2004:32:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":778,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"2054:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":779,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"2064:7:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2072:6:14","memberName":"length","nodeType":"MemberAccess","src":"2064:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2054:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2080:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""},"value":"Recovery: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""}],"id":777,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2046:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2046:66:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":784,"nodeType":"ExpressionStatement","src":"2046:66:14"},{"id":805,"nodeType":"UncheckedBlock","src":"2122:134:14","statements":[{"body":{"id":803,"nodeType":"Block","src":"2180:66:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":798,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"2220:7:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":800,"indexExpression":{"id":799,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"2228:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2220:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":794,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"2198:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":796,"indexExpression":{"id":795,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"2207:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2198:11:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2210:9:14","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1702,"src":"2198:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$bound_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":802,"nodeType":"ExpressionStatement","src":"2198:33:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":788,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"2162:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":789,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"2167:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2162:11:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":804,"initializationExpression":{"assignments":[786],"declarations":[{"constant":false,"id":786,"mutability":"mutable","name":"i","nameLocation":"2159:1:14","nodeType":"VariableDeclaration","scope":804,"src":"2151:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":785,"name":"uint256","nodeType":"ElementaryTypeName","src":"2151:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":787,"nodeType":"VariableDeclarationStatement","src":"2151:9:14"},"loopExpression":{"expression":{"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2175:3:14","subExpression":{"id":791,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"2177:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":793,"nodeType":"ExpressionStatement","src":"2175:3:14"},"nodeType":"ForStatement","src":"2146:100:14"}]}]},"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"970:837:14","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":807,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1821:10:14","nodeType":"FunctionDefinition","parameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"accounts","nameLocation":"1859:8:14","nodeType":"VariableDeclaration","scope":807,"src":"1832:35:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"1832:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":756,"nodeType":"ArrayTypeName","src":"1832:17:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":760,"mutability":"mutable","name":"amounts","nameLocation":"1888:7:14","nodeType":"VariableDeclaration","scope":807,"src":"1869:26:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"1869:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":759,"nodeType":"ArrayTypeName","src":"1869:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1831:65:14"},"returnParameters":{"id":762,"nodeType":"ParameterList","parameters":[],"src":"1914:0:14"},"scope":944,"src":"1812:450:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":872,"nodeType":"Block","src":"3098:389:14","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":826,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"3165:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3165:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":821,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"3108:24:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3133:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"3108:31:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3108:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":825,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3142:22:14","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"3108:56:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3108:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":829,"nodeType":"ExpressionStatement","src":"3108:70:14"},{"assignments":[831],"declarations":[{"constant":false,"id":831,"mutability":"mutable","name":"length","nameLocation":"3196:6:14","nodeType":"VariableDeclaration","scope":872,"src":"3188:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"3188:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":834,"initialValue":{"expression":{"id":832,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"3205:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3214:6:14","memberName":"length","nodeType":"MemberAccess","src":"3205:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3188:32:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":836,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3238:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":837,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"3248:6:14","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3255:6:14","memberName":"length","nodeType":"MemberAccess","src":"3248:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3238:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":840,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3265:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":841,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"3275:7:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3283:6:14","memberName":"length","nodeType":"MemberAccess","src":"3275:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3265:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3238:51:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3291:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""},"value":"Recovery: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""}],"id":835,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3230:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3230:93:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":847,"nodeType":"ExpressionStatement","src":"3230:93:14"},{"id":871,"nodeType":"UncheckedBlock","src":"3333:148:14","statements":[{"body":{"id":869,"nodeType":"Block","src":"3391:80:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":861,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"3432:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":863,"indexExpression":{"id":862,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3441:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3432:11:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":864,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"3445:7:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":866,"indexExpression":{"id":865,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3453:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3445:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":857,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"3409:6:14","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":859,"indexExpression":{"id":858,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3416:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3409:9:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3419:12:14","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1401,"src":"3409:22:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1333_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$1333_$","typeString":"function (contract IERC20,address,uint256)"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3409:47:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"ExpressionStatement","src":"3409:47:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":851,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3373:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":852,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"3378:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3373:11:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":870,"initializationExpression":{"assignments":[849],"declarations":[{"constant":false,"id":849,"mutability":"mutable","name":"i","nameLocation":"3370:1:14","nodeType":"VariableDeclaration","scope":870,"src":"3362:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"3362:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":850,"nodeType":"VariableDeclarationStatement","src":"3362:9:14"},"loopExpression":{"expression":{"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3386:3:14","subExpression":{"id":854,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3388:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":856,"nodeType":"ExpressionStatement","src":"3386:3:14"},"nodeType":"ForStatement","src":"3357:114:14"}]}]},"documentation":{"id":808,"nodeType":"StructuredDocumentation","src":"2268:702:14","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":873,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"2984:13:14","nodeType":"FunctionDefinition","parameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"accounts","nameLocation":"3017:8:14","nodeType":"VariableDeclaration","scope":873,"src":"2998:27:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"2998:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":810,"nodeType":"ArrayTypeName","src":"2998:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"tokens","nameLocation":"3045:6:14","nodeType":"VariableDeclaration","scope":873,"src":"3027:24:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":813,"nodeType":"UserDefinedTypeName","pathNode":{"id":812,"name":"IERC20","nameLocations":["3027:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"3027:6:14"},"referencedDeclaration":1333,"src":"3027:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":814,"nodeType":"ArrayTypeName","src":"3027:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1333_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":818,"mutability":"mutable","name":"amounts","nameLocation":"3072:7:14","nodeType":"VariableDeclaration","scope":873,"src":"3053:26:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":816,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":817,"nodeType":"ArrayTypeName","src":"3053:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2997:83:14"},"returnParameters":{"id":820,"nodeType":"ParameterList","parameters":[],"src":"3098:0:14"},"scope":944,"src":"2975:512:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":942,"nodeType":"Block","src":"4338:412:14","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":892,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"4405:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4405:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":887,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4348:24:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4373:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"4348:31:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4348:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4382:22:14","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"4348:56:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4348:70:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":895,"nodeType":"ExpressionStatement","src":"4348:70:14"},{"assignments":[897],"declarations":[{"constant":false,"id":897,"mutability":"mutable","name":"length","nameLocation":"4436:6:14","nodeType":"VariableDeclaration","scope":942,"src":"4428:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"4428:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":900,"initialValue":{"expression":{"id":898,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"4445:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4454:6:14","memberName":"length","nodeType":"MemberAccess","src":"4445:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4428:32:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":902,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"4478:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":903,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"4488:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4498:6:14","memberName":"length","nodeType":"MemberAccess","src":"4488:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:26:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":906,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"4508:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":907,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"4518:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4527:6:14","memberName":"length","nodeType":"MemberAccess","src":"4518:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4508:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4478:55:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4535:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""},"value":"Recovery: inconsistent arrays"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551","typeString":"literal_string \"Recovery: inconsistent arrays\""}],"id":901,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"4470:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4470:97:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"ExpressionStatement","src":"4470:97:14"},{"id":941,"nodeType":"UncheckedBlock","src":"4577:167:14","statements":[{"body":{"id":939,"nodeType":"Block","src":"4635:99:14","statements":[{"expression":{"arguments":[{"arguments":[{"id":929,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4687:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryBase_$944","typeString":"contract TokenRecoveryBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryBase_$944","typeString":"contract TokenRecoveryBase"}],"id":928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4679:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"4679:7:14","typeDescriptions":{}}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4679:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":931,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"4694:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":933,"indexExpression":{"id":932,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4703:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4694:11:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":934,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"4707:8:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":936,"indexExpression":{"id":935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4716:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4707:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":923,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"4653:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":925,"indexExpression":{"id":924,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4663:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4653:12:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1222","typeString":"contract IERC721"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4666:12:14","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1165,"src":"4653:25:14","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4653:66:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":938,"nodeType":"ExpressionStatement","src":"4653:66:14"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":917,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4617:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":918,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"4622:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4617:11:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":940,"initializationExpression":{"assignments":[915],"declarations":[{"constant":false,"id":915,"mutability":"mutable","name":"i","nameLocation":"4614:1:14","nodeType":"VariableDeclaration","scope":940,"src":"4606:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"4606:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":916,"nodeType":"VariableDeclarationStatement","src":"4606:9:14"},"loopExpression":{"expression":{"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4630:3:14","subExpression":{"id":920,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"4632:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":922,"nodeType":"ExpressionStatement","src":"4630:3:14"},"nodeType":"ForStatement","src":"4601:133:14"}]}]},"documentation":{"id":874,"nodeType":"StructuredDocumentation","src":"3493:711:14","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":943,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"4218:14:14","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"accounts","nameLocation":"4252:8:14","nodeType":"VariableDeclaration","scope":943,"src":"4233:27:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":875,"name":"address","nodeType":"ElementaryTypeName","src":"4233:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":876,"nodeType":"ArrayTypeName","src":"4233:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":881,"mutability":"mutable","name":"contracts","nameLocation":"4281:9:14","nodeType":"VariableDeclaration","scope":943,"src":"4262:28:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":879,"nodeType":"UserDefinedTypeName","pathNode":{"id":878,"name":"IERC721","nameLocations":["4262:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":1222,"src":"4262:7:14"},"referencedDeclaration":1222,"src":"4262:7:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1222","typeString":"contract IERC721"}},"id":880,"nodeType":"ArrayTypeName","src":"4262:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1222_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"tokenIds","nameLocation":"4311:8:14","nodeType":"VariableDeclaration","scope":943,"src":"4292:27:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":882,"name":"uint256","nodeType":"ElementaryTypeName","src":"4292:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":883,"nodeType":"ArrayTypeName","src":"4292:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4232:88:14"},"returnParameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"4338:0:14"},"scope":944,"src":"4209:541:14","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":945,"src":"782:3970:14","usedErrors":[]}],"src":"32:4721:14"},"id":14},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[979],"IERC1155TokenReceiver":[1136],"InterfaceDetection":[338],"InterfaceDetectionStorage":[449]},"id":980,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":946,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:15"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":948,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":980,"sourceUnit":1137,"src":"57:77:15","symbolAliases":[{"foreign":{"id":947,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"65:21:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":950,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":980,"sourceUnit":450,"src":"135:104:15","symbolAliases":[{"foreign":{"id":949,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"143:25:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":952,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":980,"sourceUnit":339,"src":"240:80:15","symbolAliases":[{"foreign":{"id":951,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"248:18:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":954,"name":"IERC1155TokenReceiver","nameLocations":["540:21:15"],"nodeType":"IdentifierPath","referencedDeclaration":1136,"src":"540:21:15"},"id":955,"nodeType":"InheritanceSpecifier","src":"540:21:15"},{"baseName":{"id":956,"name":"InterfaceDetection","nameLocations":["563:18:15"],"nodeType":"IdentifierPath","referencedDeclaration":338,"src":"563:18:15"},"id":957,"nodeType":"InheritanceSpecifier","src":"563:18:15"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":953,"nodeType":"StructuredDocumentation","src":"322:176:15","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":979,"linearizedBaseContracts":[979,338,350,1136],"name":"ERC1155TokenReceiver","nameLocation":"516:20:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":961,"libraryName":{"id":958,"name":"InterfaceDetectionStorage","nameLocations":["594:25:15"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"594:25:15"},"nodeType":"UsingForDirective","src":"588:69:15","typeName":{"id":960,"nodeType":"UserDefinedTypeName","pathNode":{"id":959,"name":"InterfaceDetectionStorage.Layout","nameLocations":["624:25:15","650:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"624:32:15"},"referencedDeclaration":359,"src":"624:32:15","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":977,"nodeType":"Block","src":"769:120:15","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":971,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"841:21:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1136_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1136_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":970,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"836:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"836:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$1136","typeString":"type(contract IERC1155TokenReceiver)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"864:11:15","memberName":"interfaceId","nodeType":"MemberAccess","src":"836:39:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"877:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":965,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"779:25:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"805:6:15","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"779:32:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"779:34:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":969,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"814:21:15","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":402,"src":"779:56:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"779:103:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":976,"nodeType":"ExpressionStatement","src":"779:103:15"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"663:87:15","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":978,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[],"src":"766:2:15"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[],"src":"769:0:15"},"scope":979,"src":"755:134:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":980,"src":"498:393:15","usedErrors":[]}],"src":"32:860:15"},"id":15},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","exportedSymbols":{"IERC1155":[1098]},"id":1099,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":981,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":982,"nodeType":"StructuredDocumentation","src":"57:183:16","text":"@title ERC1155 Multi Token Standard, basic interface.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26."},"fullyImplemented":false,"id":1098,"linearizedBaseContracts":[1098],"name":"IERC1155","nameLocation":"250:8:16","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":983,"nodeType":"StructuredDocumentation","src":"265:285:16","text":"@notice Emitted when some token is transferred.\n @param operator The initiator of the transfer.\n @param from The previous token owner.\n @param to The new token owner.\n @param id The transferred token identifier.\n @param value The amount of token."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":995,"name":"TransferSingle","nameLocation":"561:14:16","nodeType":"EventDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":985,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"592:8:16","nodeType":"VariableDeclaration","scope":995,"src":"576:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":984,"name":"address","nodeType":"ElementaryTypeName","src":"576:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":987,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"618:4:16","nodeType":"VariableDeclaration","scope":995,"src":"602:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":986,"name":"address","nodeType":"ElementaryTypeName","src":"602:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":989,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"640:2:16","nodeType":"VariableDeclaration","scope":995,"src":"624:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":988,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":991,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"652:2:16","nodeType":"VariableDeclaration","scope":995,"src":"644:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"644:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":993,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"664:5:16","nodeType":"VariableDeclaration","scope":995,"src":"656:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"656:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"575:95:16"},"src":"555:116:16"},{"anonymous":false,"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"677:300:16","text":"@notice Emitted when a batch of tokens is transferred.\n @param operator The initiator of the transfer.\n @param from The previous tokens owner.\n @param to The new tokens owner.\n @param ids The transferred tokens identifiers.\n @param values The amounts of tokens."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":1010,"name":"TransferBatch","nameLocation":"988:13:16","nodeType":"EventDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1018:8:16","nodeType":"VariableDeclaration","scope":1010,"src":"1002:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":997,"name":"address","nodeType":"ElementaryTypeName","src":"1002:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1000,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1044:4:16","nodeType":"VariableDeclaration","scope":1010,"src":"1028:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1002,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1066:2:16","nodeType":"VariableDeclaration","scope":1010,"src":"1050:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1001,"name":"address","nodeType":"ElementaryTypeName","src":"1050:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1005,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1080:3:16","nodeType":"VariableDeclaration","scope":1010,"src":"1070:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"1070:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1004,"nodeType":"ArrayTypeName","src":"1070:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1008,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"1095:6:16","nodeType":"VariableDeclaration","scope":1010,"src":"1085:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"1085:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1007,"nodeType":"ArrayTypeName","src":"1085:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1001:101:16"},"src":"982:121:16"},{"anonymous":false,"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"1109:233:16","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1019,"name":"ApprovalForAll","nameLocation":"1353:14:16","nodeType":"EventDefinition","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1384:5:16","nodeType":"VariableDeclaration","scope":1019,"src":"1368:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1012,"name":"address","nodeType":"ElementaryTypeName","src":"1368:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1015,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1407:8:16","nodeType":"VariableDeclaration","scope":1019,"src":"1391:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1014,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1017,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1422:8:16","nodeType":"VariableDeclaration","scope":1019,"src":"1417:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1016,"name":"bool","nodeType":"ElementaryTypeName","src":"1417:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1367:64:16"},"src":"1347:85:16"},{"anonymous":false,"documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"1438:149:16","text":"@notice Emitted optionally when a token metadata URI is set.\n @param value The token metadata URI.\n @param id The token identifier."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":1026,"name":"URI","nameLocation":"1598:3:16","nodeType":"EventDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1609:5:16","nodeType":"VariableDeclaration","scope":1026,"src":"1602:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1021,"name":"string","nodeType":"ElementaryTypeName","src":"1602:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1024,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1632:2:16","nodeType":"VariableDeclaration","scope":1026,"src":"1616:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1023,"name":"uint256","nodeType":"ElementaryTypeName","src":"1616:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1601:34:16"},"src":"1592:44:16"},{"documentation":{"id":1027,"nodeType":"StructuredDocumentation","src":"1642:689:16","text":"@notice Safely transfers some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event.\n @param from Current token owner.\n @param to Address of the new token owner.\n @param id Identifier of the token to transfer.\n @param value Amount of token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"f242432a","id":1040,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2345:16:16","nodeType":"FunctionDefinition","parameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1029,"mutability":"mutable","name":"from","nameLocation":"2370:4:16","nodeType":"VariableDeclaration","scope":1040,"src":"2362:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"2362:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"to","nameLocation":"2384:2:16","nodeType":"VariableDeclaration","scope":1040,"src":"2376:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"id","nameLocation":"2396:2:16","nodeType":"VariableDeclaration","scope":1040,"src":"2388:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2388:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1035,"mutability":"mutable","name":"value","nameLocation":"2408:5:16","nodeType":"VariableDeclaration","scope":1040,"src":"2400:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"2400:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"data","nameLocation":"2430:4:16","nodeType":"VariableDeclaration","scope":1040,"src":"2415:19:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1036,"name":"bytes","nodeType":"ElementaryTypeName","src":"2415:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2361:74:16"},"returnParameters":{"id":1039,"nodeType":"ParameterList","parameters":[],"src":"2444:0:16"},"scope":1098,"src":"2336:109:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1041,"nodeType":"StructuredDocumentation","src":"2451:784:16","text":"@notice Safely transfers a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n @dev Emits a {TransferBatch} event.\n @param from Current tokens owner.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to transfer.\n @param values Amounts of tokens to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"2eb2c2d6","id":1056,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"3249:21:16","nodeType":"FunctionDefinition","parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1043,"mutability":"mutable","name":"from","nameLocation":"3279:4:16","nodeType":"VariableDeclaration","scope":1056,"src":"3271:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"3271:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1045,"mutability":"mutable","name":"to","nameLocation":"3293:2:16","nodeType":"VariableDeclaration","scope":1056,"src":"3285:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1044,"name":"address","nodeType":"ElementaryTypeName","src":"3285:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1048,"mutability":"mutable","name":"ids","nameLocation":"3316:3:16","nodeType":"VariableDeclaration","scope":1056,"src":"3297:22:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1046,"name":"uint256","nodeType":"ElementaryTypeName","src":"3297:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1047,"nodeType":"ArrayTypeName","src":"3297:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"values","nameLocation":"3340:6:16","nodeType":"VariableDeclaration","scope":1056,"src":"3321:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"3321:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1050,"nodeType":"ArrayTypeName","src":"3321:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1053,"mutability":"mutable","name":"data","nameLocation":"3363:4:16","nodeType":"VariableDeclaration","scope":1056,"src":"3348:19:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1052,"name":"bytes","nodeType":"ElementaryTypeName","src":"3348:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3270:98:16"},"returnParameters":{"id":1055,"nodeType":"ParameterList","parameters":[],"src":"3377:0:16"},"scope":1098,"src":"3240:138:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1057,"nodeType":"StructuredDocumentation","src":"3384:234:16","text":"@notice Enables or disables an operator's approval.\n @dev Emits an {ApprovalForAll} event.\n @param operator Address of the operator.\n @param approved True to approve the operator, false to revoke its approval."},"functionSelector":"a22cb465","id":1064,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3632:17:16","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"operator","nameLocation":"3658:8:16","nodeType":"VariableDeclaration","scope":1064,"src":"3650:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"3650:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"approved","nameLocation":"3673:8:16","nodeType":"VariableDeclaration","scope":1064,"src":"3668:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1060,"name":"bool","nodeType":"ElementaryTypeName","src":"3668:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3649:33:16"},"returnParameters":{"id":1063,"nodeType":"ParameterList","parameters":[],"src":"3691:0:16"},"scope":1098,"src":"3623:69:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1065,"nodeType":"StructuredDocumentation","src":"3698:254:16","text":"@notice Retrieves the approval status of an operator for a given owner.\n @param owner Address of the authorisation giver.\n @param operator Address of the operator.\n @return approved True if the operator is approved, false if not."},"functionSelector":"e985e9c5","id":1074,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3966:16:16","nodeType":"FunctionDefinition","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"owner","nameLocation":"3991:5:16","nodeType":"VariableDeclaration","scope":1074,"src":"3983:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1066,"name":"address","nodeType":"ElementaryTypeName","src":"3983:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1069,"mutability":"mutable","name":"operator","nameLocation":"4006:8:16","nodeType":"VariableDeclaration","scope":1074,"src":"3998:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"3998:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3982:33:16"},"returnParameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"mutability":"mutable","name":"approved","nameLocation":"4044:8:16","nodeType":"VariableDeclaration","scope":1074,"src":"4039:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1071,"name":"bool","nodeType":"ElementaryTypeName","src":"4039:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4038:15:16"},"scope":1098,"src":"3957:97:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"4060:259:16","text":"@notice Retrieves the balance of `id` owned by account `owner`.\n @param owner The account to retrieve the balance of.\n @param id The identifier to retrieve the balance of.\n @return balance The balance of `id` owned by account `owner`."},"functionSelector":"00fdd58e","id":1084,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4333:9:16","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"owner","nameLocation":"4351:5:16","nodeType":"VariableDeclaration","scope":1084,"src":"4343:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"4343:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"id","nameLocation":"4366:2:16","nodeType":"VariableDeclaration","scope":1084,"src":"4358:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"4358:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4342:27:16"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"balance","nameLocation":"4401:7:16","nodeType":"VariableDeclaration","scope":1084,"src":"4393:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"4393:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4392:17:16"},"scope":1098,"src":"4324:86:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"4416:333:16","text":"@notice Retrieves the balances of `ids` owned by accounts `owners`.\n @dev Reverts if `owners` and `ids` have different lengths.\n @param owners The addresses of the token holders\n @param ids The identifiers to retrieve the balance of.\n @return balances The balances of `ids` owned by accounts `owners`."},"functionSelector":"4e1273f4","id":1097,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"4763:14:16","nodeType":"FunctionDefinition","parameters":{"id":1092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"owners","nameLocation":"4797:6:16","nodeType":"VariableDeclaration","scope":1097,"src":"4778:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"4778:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1087,"nodeType":"ArrayTypeName","src":"4778:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"ids","nameLocation":"4824:3:16","nodeType":"VariableDeclaration","scope":1097,"src":"4805:22:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"4805:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1090,"nodeType":"ArrayTypeName","src":"4805:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4777:51:16"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"balances","nameLocation":"4869:8:16","nodeType":"VariableDeclaration","scope":1097,"src":"4852:25:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1093,"name":"uint256","nodeType":"ElementaryTypeName","src":"4852:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1094,"nodeType":"ArrayTypeName","src":"4852:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4851:27:16"},"scope":1098,"src":"4754:125:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1099,"src":"240:4641:16","usedErrors":[]}],"src":"32:4850:16"},"id":16},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[1136]},"id":1137,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1100,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1101,"nodeType":"StructuredDocumentation","src":"57:284:17","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":1136,"linearizedBaseContracts":[1136],"name":"IERC1155TokenReceiver","nameLocation":"351:21:17","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"379:914:17","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":1117,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1307:17:17","nodeType":"FunctionDefinition","parameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"operator","nameLocation":"1333:8:17","nodeType":"VariableDeclaration","scope":1117,"src":"1325:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"1325:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"from","nameLocation":"1351:4:17","nodeType":"VariableDeclaration","scope":1117,"src":"1343:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1105,"name":"address","nodeType":"ElementaryTypeName","src":"1343:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"id","nameLocation":"1365:2:17","nodeType":"VariableDeclaration","scope":1117,"src":"1357:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1357:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1110,"mutability":"mutable","name":"value","nameLocation":"1377:5:17","nodeType":"VariableDeclaration","scope":1117,"src":"1369:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1109,"name":"uint256","nodeType":"ElementaryTypeName","src":"1369:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1112,"mutability":"mutable","name":"data","nameLocation":"1399:4:17","nodeType":"VariableDeclaration","scope":1117,"src":"1384:19:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1111,"name":"bytes","nodeType":"ElementaryTypeName","src":"1384:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1324:80:17"},"returnParameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"magicValue","nameLocation":"1430:10:17","nodeType":"VariableDeclaration","scope":1117,"src":"1423:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1114,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1423:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1422:19:17"},"scope":1136,"src":"1298:144:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"1448:1062:17","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":1135,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2524:22:17","nodeType":"FunctionDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"operator","nameLocation":"2564:8:17","nodeType":"VariableDeclaration","scope":1135,"src":"2556:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"2556:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"from","nameLocation":"2590:4:17","nodeType":"VariableDeclaration","scope":1135,"src":"2582:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"2582:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"ids","nameLocation":"2623:3:17","nodeType":"VariableDeclaration","scope":1135,"src":"2604:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1123,"name":"uint256","nodeType":"ElementaryTypeName","src":"2604:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1124,"nodeType":"ArrayTypeName","src":"2604:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"values","nameLocation":"2655:6:17","nodeType":"VariableDeclaration","scope":1135,"src":"2636:25:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1126,"name":"uint256","nodeType":"ElementaryTypeName","src":"2636:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1127,"nodeType":"ArrayTypeName","src":"2636:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"data","nameLocation":"2686:4:17","nodeType":"VariableDeclaration","scope":1135,"src":"2671:19:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1129,"name":"bytes","nodeType":"ElementaryTypeName","src":"2671:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2546:150:17"},"returnParameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"magicValue","nameLocation":"2722:10:17","nodeType":"VariableDeclaration","scope":1135,"src":"2715:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1132,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2715:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2714:19:17"},"scope":1136,"src":"2515:219:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1137,"src":"341:2395:17","usedErrors":[]}],"src":"32:2705:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1222]},"id":1223,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1138,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"57:296:18","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1222,"linearizedBaseContracts":[1222],"name":"IERC721","nameLocation":"363:7:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1140,"nodeType":"StructuredDocumentation","src":"377:684:18","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1147,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1075:7:18","nodeType":"FunctionDefinition","parameters":{"id":1145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"to","nameLocation":"1091:2:18","nodeType":"VariableDeclaration","scope":1147,"src":"1083:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1141,"name":"address","nodeType":"ElementaryTypeName","src":"1083:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"tokenId","nameLocation":"1103:7:18","nodeType":"VariableDeclaration","scope":1147,"src":"1095:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1095:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1082:29:18"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[],"src":"1120:0:18"},"scope":1222,"src":"1066:55:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"1127:341:18","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1155,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1482:17:18","nodeType":"FunctionDefinition","parameters":{"id":1153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"operator","nameLocation":"1508:8:18","nodeType":"VariableDeclaration","scope":1155,"src":"1500:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"1500:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"approved","nameLocation":"1523:8:18","nodeType":"VariableDeclaration","scope":1155,"src":"1518:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1151,"name":"bool","nodeType":"ElementaryTypeName","src":"1518:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1499:33:18"},"returnParameters":{"id":1154,"nodeType":"ParameterList","parameters":[],"src":"1541:0:18"},"scope":1222,"src":"1473:69:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1156,"nodeType":"StructuredDocumentation","src":"1548:667:18","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1165,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2229:12:18","nodeType":"FunctionDefinition","parameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"from","nameLocation":"2250:4:18","nodeType":"VariableDeclaration","scope":1165,"src":"2242:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1157,"name":"address","nodeType":"ElementaryTypeName","src":"2242:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1160,"mutability":"mutable","name":"to","nameLocation":"2264:2:18","nodeType":"VariableDeclaration","scope":1165,"src":"2256:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"2256:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1162,"mutability":"mutable","name":"tokenId","nameLocation":"2276:7:18","nodeType":"VariableDeclaration","scope":1165,"src":"2268:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1161,"name":"uint256","nodeType":"ElementaryTypeName","src":"2268:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2241:43:18"},"returnParameters":{"id":1164,"nodeType":"ParameterList","parameters":[],"src":"2293:0:18"},"scope":1222,"src":"2220:74:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1166,"nodeType":"StructuredDocumentation","src":"2300:663:18","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1175,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2977:16:18","nodeType":"FunctionDefinition","parameters":{"id":1173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"from","nameLocation":"3002:4:18","nodeType":"VariableDeclaration","scope":1175,"src":"2994:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"2994:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"to","nameLocation":"3016:2:18","nodeType":"VariableDeclaration","scope":1175,"src":"3008:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"3008:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"tokenId","nameLocation":"3028:7:18","nodeType":"VariableDeclaration","scope":1175,"src":"3020:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint256","nodeType":"ElementaryTypeName","src":"3020:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2993:43:18"},"returnParameters":{"id":1174,"nodeType":"ParameterList","parameters":[],"src":"3045:0:18"},"scope":1222,"src":"2968:78:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"3052:735:18","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1187,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3801:16:18","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"from","nameLocation":"3826:4:18","nodeType":"VariableDeclaration","scope":1187,"src":"3818:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1177,"name":"address","nodeType":"ElementaryTypeName","src":"3818:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1180,"mutability":"mutable","name":"to","nameLocation":"3840:2:18","nodeType":"VariableDeclaration","scope":1187,"src":"3832:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1179,"name":"address","nodeType":"ElementaryTypeName","src":"3832:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1182,"mutability":"mutable","name":"tokenId","nameLocation":"3852:7:18","nodeType":"VariableDeclaration","scope":1187,"src":"3844:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"3844:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"data","nameLocation":"3876:4:18","nodeType":"VariableDeclaration","scope":1187,"src":"3861:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1183,"name":"bytes","nodeType":"ElementaryTypeName","src":"3861:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3817:64:18"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[],"src":"3890:0:18"},"scope":1222,"src":"3792:99:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"3897:209:18","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1195,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4120:9:18","nodeType":"FunctionDefinition","parameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"owner","nameLocation":"4138:5:18","nodeType":"VariableDeclaration","scope":1195,"src":"4130:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"4130:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4129:15:18"},"returnParameters":{"id":1194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1193,"mutability":"mutable","name":"balance","nameLocation":"4176:7:18","nodeType":"VariableDeclaration","scope":1195,"src":"4168:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1192,"name":"uint256","nodeType":"ElementaryTypeName","src":"4168:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4167:17:18"},"scope":1222,"src":"4111:74:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"4191:217:18","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4422:7:18","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"tokenId","nameLocation":"4438:7:18","nodeType":"VariableDeclaration","scope":1203,"src":"4430:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"4430:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4429:17:18"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"tokenOwner","nameLocation":"4478:10:18","nodeType":"VariableDeclaration","scope":1203,"src":"4470:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1200,"name":"address","nodeType":"ElementaryTypeName","src":"4470:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4469:20:18"},"scope":1222,"src":"4413:77:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"4496:285:18","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1211,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4795:11:18","nodeType":"FunctionDefinition","parameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"tokenId","nameLocation":"4815:7:18","nodeType":"VariableDeclaration","scope":1211,"src":"4807:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"4807:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4806:17:18"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"approved","nameLocation":"4855:8:18","nodeType":"VariableDeclaration","scope":1211,"src":"4847:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"4847:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4846:18:18"},"scope":1222,"src":"4786:79:18","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1212,"nodeType":"StructuredDocumentation","src":"4871:323:18","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1221,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5208:16:18","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1214,"mutability":"mutable","name":"owner","nameLocation":"5233:5:18","nodeType":"VariableDeclaration","scope":1221,"src":"5225:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1213,"name":"address","nodeType":"ElementaryTypeName","src":"5225:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"operator","nameLocation":"5248:8:18","nodeType":"VariableDeclaration","scope":1221,"src":"5240:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1215,"name":"address","nodeType":"ElementaryTypeName","src":"5240:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5224:33:18"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"approvedForAll","nameLocation":"5286:14:18","nodeType":"VariableDeclaration","scope":1221,"src":"5281:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1218,"name":"bool","nodeType":"ElementaryTypeName","src":"5281:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5280:21:18"},"scope":1222,"src":"5199:103:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1223,"src":"353:4951:18","usedErrors":[]}],"src":"32:5273:18"},"id":18},"@openzeppelin/contracts-4.9.5/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-4.9.5/utils/Context.sol","exportedSymbols":{"Context":[1252]},"id":1253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1224,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:19"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1225,"nodeType":"StructuredDocumentation","src":"126:496:19","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1252,"linearizedBaseContracts":[1252],"name":"Context","nameLocation":"641:7:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":1233,"nodeType":"Block","src":"717:34:19","statements":[{"expression":{"expression":{"id":1230,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"734:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:19","memberName":"sender","nodeType":"MemberAccess","src":"734:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1229,"id":1232,"nodeType":"Return","src":"727:17:19"}]},"id":1234,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:19","nodeType":"FunctionDefinition","parameters":{"id":1226,"nodeType":"ParameterList","parameters":[],"src":"674:2:19"},"returnParameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1234,"src":"708:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1227,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:19"},"scope":1252,"src":"655:96:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1242,"nodeType":"Block","src":"824:32:19","statements":[{"expression":{"expression":{"id":1239,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"841:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:19","memberName":"data","nodeType":"MemberAccess","src":"841:8:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1238,"id":1241,"nodeType":"Return","src":"834:15:19"}]},"id":1243,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:19","nodeType":"FunctionDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[],"src":"774:2:19"},"returnParameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1243,"src":"808:14:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1236,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:19"},"scope":1252,"src":"757:99:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1250,"nodeType":"Block","src":"934:25:19","statements":[{"expression":{"hexValue":"30","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1247,"id":1249,"nodeType":"Return","src":"944:8:19"}]},"id":1251,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:19","nodeType":"FunctionDefinition","parameters":{"id":1244,"nodeType":"ParameterList","parameters":[],"src":"891:2:19"},"returnParameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1251,"src":"925:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1245,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:19"},"scope":1252,"src":"862:97:19","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1253,"src":"623:338:19","usedErrors":[]}],"src":"101:861:19"},"id":19},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1333]},"id":1256,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1254,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:20"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":1255,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1256,"sourceUnit":1334,"src":"115:35:20","symbolAliases":[],"unitAlias":""}],"src":"90:61:20"},"id":20},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1333]},"id":1334,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1257,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1258,"nodeType":"StructuredDocumentation","src":"131:70:21","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1333,"linearizedBaseContracts":[1333],"name":"IERC20","nameLocation":"212:6:21","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1259,"nodeType":"StructuredDocumentation","src":"225:158:21","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1267,"name":"Transfer","nameLocation":"394:8:21","nodeType":"EventDefinition","parameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:21","nodeType":"VariableDeclaration","scope":1267,"src":"403:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1260,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1263,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:21","nodeType":"VariableDeclaration","scope":1267,"src":"425:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1262,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1265,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:21","nodeType":"VariableDeclaration","scope":1267,"src":"445:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1264,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:21"},"src":"388:72:21"},{"anonymous":false,"documentation":{"id":1268,"nodeType":"StructuredDocumentation","src":"466:148:21","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1276,"name":"Approval","nameLocation":"625:8:21","nodeType":"EventDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:21","nodeType":"VariableDeclaration","scope":1276,"src":"634:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1269,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1272,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:21","nodeType":"VariableDeclaration","scope":1276,"src":"657:23:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1271,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1274,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:21","nodeType":"VariableDeclaration","scope":1276,"src":"682:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1273,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:21"},"src":"619:78:21"},{"documentation":{"id":1277,"nodeType":"StructuredDocumentation","src":"703:66:21","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1282,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:21","nodeType":"FunctionDefinition","parameters":{"id":1278,"nodeType":"ParameterList","parameters":[],"src":"794:2:21"},"returnParameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1282,"src":"820:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:21"},"scope":1333,"src":"774:55:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1283,"nodeType":"StructuredDocumentation","src":"835:72:21","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1290,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:21","nodeType":"FunctionDefinition","parameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"account","nameLocation":"939:7:21","nodeType":"VariableDeclaration","scope":1290,"src":"931:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1284,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:21"},"returnParameters":{"id":1289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1290,"src":"971:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1287,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:21"},"scope":1333,"src":"912:68:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"986:202:21","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1300,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:21","nodeType":"FunctionDefinition","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"to","nameLocation":"1219:2:21","nodeType":"VariableDeclaration","scope":1300,"src":"1211:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"amount","nameLocation":"1231:6:21","nodeType":"VariableDeclaration","scope":1300,"src":"1223:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:21"},"returnParameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1300,"src":"1257:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1297,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:21"},"scope":1333,"src":"1193:70:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1301,"nodeType":"StructuredDocumentation","src":"1269:264:21","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1310,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:21","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"owner","nameLocation":"1565:5:21","nodeType":"VariableDeclaration","scope":1310,"src":"1557:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1302,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"spender","nameLocation":"1580:7:21","nodeType":"VariableDeclaration","scope":1310,"src":"1572:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:21"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1310,"src":"1612:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:21"},"scope":1333,"src":"1538:83:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1311,"nodeType":"StructuredDocumentation","src":"1627:642:21","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1320,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:21","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"spender","nameLocation":"2299:7:21","nodeType":"VariableDeclaration","scope":1320,"src":"2291:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"amount","nameLocation":"2316:6:21","nodeType":"VariableDeclaration","scope":1320,"src":"2308:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:21"},"returnParameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1320,"src":"2342:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1317,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:21"},"scope":1333,"src":"2274:74:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"2354:287:21","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1332,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:21","nodeType":"FunctionDefinition","parameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"from","nameLocation":"2685:4:21","nodeType":"VariableDeclaration","scope":1332,"src":"2677:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"to","nameLocation":"2707:2:21","nodeType":"VariableDeclaration","scope":1332,"src":"2699:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1324,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1327,"mutability":"mutable","name":"amount","nameLocation":"2727:6:21","nodeType":"VariableDeclaration","scope":1332,"src":"2719:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1326,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:21"},"returnParameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1332,"src":"2758:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1329,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:21"},"scope":1333,"src":"2646:118:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1334,"src":"202:2564:21","usedErrors":[]}],"src":"106:2661:21"},"id":21},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1369]},"id":1370,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1335,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"139:480:22","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1369,"linearizedBaseContracts":[1369],"name":"IERC20Permit","nameLocation":"630:12:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"649:792:22","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1354,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1455:6:22","nodeType":"FunctionDefinition","parameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"owner","nameLocation":"1479:5:22","nodeType":"VariableDeclaration","scope":1354,"src":"1471:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"spender","nameLocation":"1502:7:22","nodeType":"VariableDeclaration","scope":1354,"src":"1494:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"value","nameLocation":"1527:5:22","nodeType":"VariableDeclaration","scope":1354,"src":"1519:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"1519:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1345,"mutability":"mutable","name":"deadline","nameLocation":"1550:8:22","nodeType":"VariableDeclaration","scope":1354,"src":"1542:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1344,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1347,"mutability":"mutable","name":"v","nameLocation":"1574:1:22","nodeType":"VariableDeclaration","scope":1354,"src":"1568:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1346,"name":"uint8","nodeType":"ElementaryTypeName","src":"1568:5:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1349,"mutability":"mutable","name":"r","nameLocation":"1593:1:22","nodeType":"VariableDeclaration","scope":1354,"src":"1585:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1585:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"s","nameLocation":"1612:1:22","nodeType":"VariableDeclaration","scope":1354,"src":"1604:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1461:158:22"},"returnParameters":{"id":1353,"nodeType":"ParameterList","parameters":[],"src":"1628:0:22"},"scope":1369,"src":"1446:183:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1355,"nodeType":"StructuredDocumentation","src":"1635:294:22","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1362,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1943:6:22","nodeType":"FunctionDefinition","parameters":{"id":1358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"owner","nameLocation":"1958:5:22","nodeType":"VariableDeclaration","scope":1362,"src":"1950:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1356,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1949:15:22"},"returnParameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1362,"src":"1988:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1359,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:9:22"},"scope":1369,"src":"1934:63:22","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1363,"nodeType":"StructuredDocumentation","src":"2003:128:22","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1368,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2198:16:22","nodeType":"FunctionDefinition","parameters":{"id":1364,"nodeType":"ParameterList","parameters":[],"src":"2214:2:22"},"returnParameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1368,"src":"2240:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2239:9:22"},"scope":1369,"src":"2189:60:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1370,"src":"620:1631:22","usedErrors":[]}],"src":"114:2138:22"},"id":22},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1980],"IERC20":[1333],"IERC20Permit":[1369],"SafeERC20":[1650]},"id":1651,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1371,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1372,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1651,"sourceUnit":1334,"src":"140:23:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","file":"../extensions/draft-IERC20Permit.sol","id":1373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1651,"sourceUnit":1370,"src":"164:46:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1374,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1651,"sourceUnit":1981,"src":"211:36:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1375,"nodeType":"StructuredDocumentation","src":"249:457:23","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1650,"linearizedBaseContracts":[1650],"name":"SafeERC20","nameLocation":"715:9:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1378,"libraryName":{"id":1376,"name":"Address","nameLocations":["737:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"737:7:23"},"nodeType":"UsingForDirective","src":"731:26:23","typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1400,"nodeType":"Block","src":"865:103:23","statements":[{"expression":{"arguments":[{"id":1389,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"895:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1392,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"925:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"931:8:23","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1300,"src":"925:14:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:8:23","memberName":"selector","nodeType":"MemberAccess","src":"925:23:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1395,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"950:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"954:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1390,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"902:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"906:18:23","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"902:22:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"902:58:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1388,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"875:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1333_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"875:86:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1399,"nodeType":"ExpressionStatement","src":"875:86:23"}]},"id":1401,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"772:12:23","nodeType":"FunctionDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"token","nameLocation":"801:5:23","nodeType":"VariableDeclaration","scope":1401,"src":"794:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},"typeName":{"id":1380,"nodeType":"UserDefinedTypeName","pathNode":{"id":1379,"name":"IERC20","nameLocations":["794:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"794:6:23"},"referencedDeclaration":1333,"src":"794:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"to","nameLocation":"824:2:23","nodeType":"VariableDeclaration","scope":1401,"src":"816:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"816:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"value","nameLocation":"844:5:23","nodeType":"VariableDeclaration","scope":1401,"src":"836:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1384,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"784:71:23"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[],"src":"865:0:23"},"scope":1650,"src":"763:205:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1426,"nodeType":"Block","src":"1102:113:23","statements":[{"expression":{"arguments":[{"id":1414,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"1132:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1417,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"1162:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:12:23","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1332,"src":"1162:18:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:8:23","memberName":"selector","nodeType":"MemberAccess","src":"1162:27:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1420,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"1191:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1421,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1197:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"1201:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1415,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"1139:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1143:18:23","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1139:22:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:68:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1413,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"1112:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1333_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:96:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1425,"nodeType":"ExpressionStatement","src":"1112:96:23"}]},"id":1427,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"983:16:23","nodeType":"FunctionDefinition","parameters":{"id":1411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"token","nameLocation":"1016:5:23","nodeType":"VariableDeclaration","scope":1427,"src":"1009:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},"typeName":{"id":1403,"nodeType":"UserDefinedTypeName","pathNode":{"id":1402,"name":"IERC20","nameLocations":["1009:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"1009:6:23"},"referencedDeclaration":1333,"src":"1009:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1406,"mutability":"mutable","name":"from","nameLocation":"1039:4:23","nodeType":"VariableDeclaration","scope":1427,"src":"1031:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1405,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1408,"mutability":"mutable","name":"to","nameLocation":"1061:2:23","nodeType":"VariableDeclaration","scope":1427,"src":"1053:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1407,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1410,"mutability":"mutable","name":"value","nameLocation":"1081:5:23","nodeType":"VariableDeclaration","scope":1427,"src":"1073:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1409,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"999:93:23"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[],"src":"1102:0:23"},"scope":1650,"src":"974:241:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1470,"nodeType":"Block","src":"1581:497:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"1830:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1830:10:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1829:12:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1447,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"1870:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1650","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1650","typeString":"library SafeERC20"}],"id":1446,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1862:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:23","typeDescriptions":{}}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1862:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1449,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"1877:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1443,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"1846:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:9:23","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"1846:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1846:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1889:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1846:44:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1453,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1845:46:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1829:62:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1905:56:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1438,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1808:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:163:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1457,"nodeType":"ExpressionStatement","src":"1808:163:23"},{"expression":{"arguments":[{"id":1459,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"2001:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1462,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"2031:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2037:7:23","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"2031:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2045:8:23","memberName":"selector","nodeType":"MemberAccess","src":"2031:22:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1465,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"2055:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"2064:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1460,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2008:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2012:18:23","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2008:22:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2008:62:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1458,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"1981:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1333_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:90:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1469,"nodeType":"ExpressionStatement","src":"1981:90:23"}]},"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"1221:249:23","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1471,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1484:11:23","nodeType":"FunctionDefinition","parameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"token","nameLocation":"1512:5:23","nodeType":"VariableDeclaration","scope":1471,"src":"1505:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},"typeName":{"id":1430,"nodeType":"UserDefinedTypeName","pathNode":{"id":1429,"name":"IERC20","nameLocations":["1505:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"1505:6:23"},"referencedDeclaration":1333,"src":"1505:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1433,"mutability":"mutable","name":"spender","nameLocation":"1535:7:23","nodeType":"VariableDeclaration","scope":1471,"src":"1527:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1432,"name":"address","nodeType":"ElementaryTypeName","src":"1527:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"value","nameLocation":"1560:5:23","nodeType":"VariableDeclaration","scope":1471,"src":"1552:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1434,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:76:23"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"1581:0:23"},"scope":1650,"src":"1475:603:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1506,"nodeType":"Block","src":"2200:194:23","statements":[{"assignments":[1482],"declarations":[{"constant":false,"id":1482,"mutability":"mutable","name":"newAllowance","nameLocation":"2218:12:23","nodeType":"VariableDeclaration","scope":1506,"src":"2210:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1481,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1493,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1487,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2257:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1650","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1650","typeString":"library SafeERC20"}],"id":1486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2249:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1485,"name":"address","nodeType":"ElementaryTypeName","src":"2249:7:23","typeDescriptions":{}}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2249:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1489,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"2264:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1483,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"2233:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2239:9:23","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"2233:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2233:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1491,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2275:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2233:47:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2210:70:23"},{"expression":{"arguments":[{"id":1495,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"2310:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1498,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"2340:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2346:7:23","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"2340:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2354:8:23","memberName":"selector","nodeType":"MemberAccess","src":"2340:22:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1501,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"2364:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1502,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"2373:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1496,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2317:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2321:18:23","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2317:22:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2317:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1494,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"2290:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1333_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:97:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1505,"nodeType":"ExpressionStatement","src":"2290:97:23"}]},"id":1507,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2093:21:23","nodeType":"FunctionDefinition","parameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"token","nameLocation":"2131:5:23","nodeType":"VariableDeclaration","scope":1507,"src":"2124:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},"typeName":{"id":1473,"nodeType":"UserDefinedTypeName","pathNode":{"id":1472,"name":"IERC20","nameLocations":["2124:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"2124:6:23"},"referencedDeclaration":1333,"src":"2124:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"spender","nameLocation":"2154:7:23","nodeType":"VariableDeclaration","scope":1507,"src":"2146:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1475,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"value","nameLocation":"2179:5:23","nodeType":"VariableDeclaration","scope":1507,"src":"2171:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1477,"name":"uint256","nodeType":"ElementaryTypeName","src":"2171:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2114:76:23"},"returnParameters":{"id":1480,"nodeType":"ParameterList","parameters":[],"src":"2200:0:23"},"scope":1650,"src":"2084:310:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1554,"nodeType":"Block","src":"2516:370:23","statements":[{"id":1553,"nodeType":"UncheckedBlock","src":"2526:354:23","statements":[{"assignments":[1518],"declarations":[{"constant":false,"id":1518,"mutability":"mutable","name":"oldAllowance","nameLocation":"2558:12:23","nodeType":"VariableDeclaration","scope":1553,"src":"2550:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1517,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1527,"initialValue":{"arguments":[{"arguments":[{"id":1523,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2597:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1650","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1650","typeString":"library SafeERC20"}],"id":1522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2589:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1521,"name":"address","nodeType":"ElementaryTypeName","src":"2589:7:23","typeDescriptions":{}}},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:13:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1525,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"2604:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1519,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2573:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:9:23","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1310,"src":"2573:15:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2550:62:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1529,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2634:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1530,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"2650:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2634:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2657:43:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1528,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2626:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2626:75:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1534,"nodeType":"ExpressionStatement","src":"2626:75:23"},{"assignments":[1536],"declarations":[{"constant":false,"id":1536,"mutability":"mutable","name":"newAllowance","nameLocation":"2723:12:23","nodeType":"VariableDeclaration","scope":1553,"src":"2715:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1535,"name":"uint256","nodeType":"ElementaryTypeName","src":"2715:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1540,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1537,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2738:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"2753:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2715:43:23"},{"expression":{"arguments":[{"id":1542,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2792:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1545,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"2822:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2828:7:23","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"2822:13:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2836:8:23","memberName":"selector","nodeType":"MemberAccess","src":"2822:22:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1548,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"2846:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1549,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"2855:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1543,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2799:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2803:18:23","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2799:22:23","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1541,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"2772:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1333_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2772:97:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1552,"nodeType":"ExpressionStatement","src":"2772:97:23"}]}]},"id":1555,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2409:21:23","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1510,"mutability":"mutable","name":"token","nameLocation":"2447:5:23","nodeType":"VariableDeclaration","scope":1555,"src":"2440:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},"typeName":{"id":1509,"nodeType":"UserDefinedTypeName","pathNode":{"id":1508,"name":"IERC20","nameLocations":["2440:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"2440:6:23"},"referencedDeclaration":1333,"src":"2440:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1512,"mutability":"mutable","name":"spender","nameLocation":"2470:7:23","nodeType":"VariableDeclaration","scope":1555,"src":"2462:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1511,"name":"address","nodeType":"ElementaryTypeName","src":"2462:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"value","nameLocation":"2495:5:23","nodeType":"VariableDeclaration","scope":1555,"src":"2487:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1513,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:76:23"},"returnParameters":{"id":1516,"nodeType":"ParameterList","parameters":[],"src":"2516:0:23"},"scope":1650,"src":"2400:486:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1610,"nodeType":"Block","src":"3107:257:23","statements":[{"assignments":[1576],"declarations":[{"constant":false,"id":1576,"mutability":"mutable","name":"nonceBefore","nameLocation":"3125:11:23","nodeType":"VariableDeclaration","scope":1610,"src":"3117:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"3117:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1581,"initialValue":{"arguments":[{"id":1579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3152:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1577,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"3139:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1369","typeString":"contract IERC20Permit"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3145:6:23","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1362,"src":"3139:12:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3117:41:23"},{"expression":{"arguments":[{"id":1585,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3181:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1586,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"3188:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"3197:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1588,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1566,"src":"3204:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1589,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"3214:1:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1590,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"3217:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1591,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"3220:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1582,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"3168:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1369","typeString":"contract IERC20Permit"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3174:6:23","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1354,"src":"3168:12:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:54:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1593,"nodeType":"ExpressionStatement","src":"3168:54:23"},{"assignments":[1595],"declarations":[{"constant":false,"id":1595,"mutability":"mutable","name":"nonceAfter","nameLocation":"3240:10:23","nodeType":"VariableDeclaration","scope":1610,"src":"3232:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1594,"name":"uint256","nodeType":"ElementaryTypeName","src":"3232:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1600,"initialValue":{"arguments":[{"id":1598,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3266:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1596,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"3253:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1369","typeString":"contract IERC20Permit"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:6:23","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1362,"src":"3253:12:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3253:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3232:40:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1602,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"3290:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1603,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"3304:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3318:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3304:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3290:29:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3321:35:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1601,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"3282:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:75:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1609,"nodeType":"ExpressionStatement","src":"3282:75:23"}]},"id":1611,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"2901:10:23","nodeType":"FunctionDefinition","parameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"token","nameLocation":"2934:5:23","nodeType":"VariableDeclaration","scope":1611,"src":"2921:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1369","typeString":"contract IERC20Permit"},"typeName":{"id":1557,"nodeType":"UserDefinedTypeName","pathNode":{"id":1556,"name":"IERC20Permit","nameLocations":["2921:12:23"],"nodeType":"IdentifierPath","referencedDeclaration":1369,"src":"2921:12:23"},"referencedDeclaration":1369,"src":"2921:12:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1369","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1560,"mutability":"mutable","name":"owner","nameLocation":"2957:5:23","nodeType":"VariableDeclaration","scope":1611,"src":"2949:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1559,"name":"address","nodeType":"ElementaryTypeName","src":"2949:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"spender","nameLocation":"2980:7:23","nodeType":"VariableDeclaration","scope":1611,"src":"2972:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"2972:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"value","nameLocation":"3005:5:23","nodeType":"VariableDeclaration","scope":1611,"src":"2997:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1563,"name":"uint256","nodeType":"ElementaryTypeName","src":"2997:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"deadline","nameLocation":"3028:8:23","nodeType":"VariableDeclaration","scope":1611,"src":"3020:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1565,"name":"uint256","nodeType":"ElementaryTypeName","src":"3020:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1568,"mutability":"mutable","name":"v","nameLocation":"3052:1:23","nodeType":"VariableDeclaration","scope":1611,"src":"3046:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1567,"name":"uint8","nodeType":"ElementaryTypeName","src":"3046:5:23","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1570,"mutability":"mutable","name":"r","nameLocation":"3071:1:23","nodeType":"VariableDeclaration","scope":1611,"src":"3063:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3063:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"s","nameLocation":"3090:1:23","nodeType":"VariableDeclaration","scope":1611,"src":"3082:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3082:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2911:186:23"},"returnParameters":{"id":1574,"nodeType":"ParameterList","parameters":[],"src":"3107:0:23"},"scope":1650,"src":"2892:472:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1648,"nodeType":"Block","src":"3817:636:23","statements":[{"assignments":[1621],"declarations":[{"constant":false,"id":1621,"mutability":"mutable","name":"returndata","nameLocation":"4179:10:23","nodeType":"VariableDeclaration","scope":1648,"src":"4166:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1620,"name":"bytes","nodeType":"ElementaryTypeName","src":"4166:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1630,"initialValue":{"arguments":[{"id":1627,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"4220:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4226:34:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1624,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"4200:5:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}],"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4192:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1622,"name":"address","nodeType":"ElementaryTypeName","src":"4192:7:23","typeDescriptions":{}}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4207:12:23","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1740,"src":"4192:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:69:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4166:95:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1631,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"4275:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4286:6:23","memberName":"length","nodeType":"MemberAccess","src":"4275:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4275:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1647,"nodeType":"IfStatement","src":"4271:176:23","trueBody":{"id":1646,"nodeType":"Block","src":"4298:149:23","statements":[{"expression":{"arguments":[{"arguments":[{"id":1638,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"4370:10:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4383:4:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1639,"name":"bool","nodeType":"ElementaryTypeName","src":"4383:4:23","typeDescriptions":{}}}],"id":1641,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4382:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1636,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"4359:3:23","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4363:6:23","memberName":"decode","nodeType":"MemberAccess","src":"4359:10:23","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4359:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4391:44:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1635,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"4351:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4351:85:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1645,"nodeType":"ExpressionStatement","src":"4351:85:23"}]}}]},"documentation":{"id":1612,"nodeType":"StructuredDocumentation","src":"3370:372:23","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1649,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3756:19:23","nodeType":"FunctionDefinition","parameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"token","nameLocation":"3783:5:23","nodeType":"VariableDeclaration","scope":1649,"src":"3776:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"},"typeName":{"id":1614,"nodeType":"UserDefinedTypeName","pathNode":{"id":1613,"name":"IERC20","nameLocations":["3776:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"3776:6:23"},"referencedDeclaration":1333,"src":"3776:6:23","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1333","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"data","nameLocation":"3803:4:23","nodeType":"VariableDeclaration","scope":1649,"src":"3790:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1616,"name":"bytes","nodeType":"ElementaryTypeName","src":"3790:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:33:23"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[],"src":"3817:0:23"},"scope":1650,"src":"3747:706:23","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1651,"src":"707:3748:23","usedErrors":[]}],"src":"115:4341:23"},"id":23},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1980]},"id":1981,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1652,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1653,"nodeType":"StructuredDocumentation","src":"126:67:24","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1980,"linearizedBaseContracts":[1980],"name":"Address","nameLocation":"202:7:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":1667,"nodeType":"Block","src":"1241:254:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1661,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"1465:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:24","memberName":"code","nodeType":"MemberAccess","src":"1465:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:24","memberName":"length","nodeType":"MemberAccess","src":"1465:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1660,"id":1666,"nodeType":"Return","src":"1458:30:24"}]},"documentation":{"id":1654,"nodeType":"StructuredDocumentation","src":"216:954:24","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1668,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:24","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1656,"mutability":"mutable","name":"account","nameLocation":"1203:7:24","nodeType":"VariableDeclaration","scope":1668,"src":"1195:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1655,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:24"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1668,"src":"1235:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1658,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:24"},"scope":1980,"src":"1175:320:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1701,"nodeType":"Block","src":"2483:241:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1679,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"2509:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1980","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1980","typeString":"library Address"}],"id":1678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1677,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:24","typeDescriptions":{}}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:24","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1682,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"2526:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2493:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1686,"nodeType":"ExpressionStatement","src":"2493:73:24"},{"assignments":[1688,null],"declarations":[{"constant":false,"id":1688,"mutability":"mutable","name":"success","nameLocation":"2583:7:24","nodeType":"VariableDeclaration","scope":1701,"src":"2578:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1687,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1695,"initialValue":{"arguments":[{"hexValue":"","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1689,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"2596:9:24","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:24","memberName":"call","nodeType":"MemberAccess","src":"2596:14:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1691,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"2618:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:24"},{"expression":{"arguments":[{"id":1697,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"2647:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1696,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2639:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1700,"nodeType":"ExpressionStatement","src":"2639:78:24"}]},"documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"1501:906:24","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1702,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:24","nodeType":"FunctionDefinition","parameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:24","nodeType":"VariableDeclaration","scope":1702,"src":"2431:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:24","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1673,"mutability":"mutable","name":"amount","nameLocation":"2466:6:24","nodeType":"VariableDeclaration","scope":1702,"src":"2458:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1672,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:24"},"returnParameters":{"id":1675,"nodeType":"ParameterList","parameters":[],"src":"2483:0:24"},"scope":1980,"src":"2412:312:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1719,"nodeType":"Block","src":"3555:96:24","statements":[{"expression":{"arguments":[{"id":1713,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"3594:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1714,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"3602:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1712,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1760,1804],"referencedDeclaration":1804,"src":"3572:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1711,"id":1718,"nodeType":"Return","src":"3565:79:24"}]},"documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"2730:731:24","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1720,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:24","nodeType":"FunctionDefinition","parameters":{"id":1708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"target","nameLocation":"3496:6:24","nodeType":"VariableDeclaration","scope":1720,"src":"3488:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1707,"mutability":"mutable","name":"data","nameLocation":"3517:4:24","nodeType":"VariableDeclaration","scope":1720,"src":"3504:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1706,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:24"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1720,"src":"3541:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1709,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:24"},"scope":1980,"src":"3466:185:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1739,"nodeType":"Block","src":"4020:76:24","statements":[{"expression":{"arguments":[{"id":1733,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"4059:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1734,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"4067:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1736,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"4076:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1732,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1760,1804],"referencedDeclaration":1804,"src":"4037:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1731,"id":1738,"nodeType":"Return","src":"4030:59:24"}]},"documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"3657:211:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1740,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:24","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"target","nameLocation":"3912:6:24","nodeType":"VariableDeclaration","scope":1740,"src":"3904:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1722,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1725,"mutability":"mutable","name":"data","nameLocation":"3941:4:24","nodeType":"VariableDeclaration","scope":1740,"src":"3928:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1724,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:24","nodeType":"VariableDeclaration","scope":1740,"src":"3955:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1726,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:24"},"returnParameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1740,"src":"4006:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1729,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:24"},"scope":1980,"src":"3873:223:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1759,"nodeType":"Block","src":"4601:111:24","statements":[{"expression":{"arguments":[{"id":1753,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"4640:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1754,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1745,"src":"4648:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"4654:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1752,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1760,1804],"referencedDeclaration":1804,"src":"4618:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1751,"id":1758,"nodeType":"Return","src":"4611:94:24"}]},"documentation":{"id":1741,"nodeType":"StructuredDocumentation","src":"4102:351:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1760,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:24","nodeType":"FunctionDefinition","parameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"mutability":"mutable","name":"target","nameLocation":"4506:6:24","nodeType":"VariableDeclaration","scope":1760,"src":"4498:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1742,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1745,"mutability":"mutable","name":"data","nameLocation":"4535:4:24","nodeType":"VariableDeclaration","scope":1760,"src":"4522:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1744,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1747,"mutability":"mutable","name":"value","nameLocation":"4557:5:24","nodeType":"VariableDeclaration","scope":1760,"src":"4549:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:24"},"returnParameters":{"id":1751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1760,"src":"4587:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1749,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:24"},"scope":1980,"src":"4458:254:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1803,"nodeType":"Block","src":"5139:267:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1777,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"5165:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1980","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1980","typeString":"library Address"}],"id":1776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:24","typeDescriptions":{}}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:24","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1780,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"5182:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"5149:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1784,"nodeType":"ExpressionStatement","src":"5149:81:24"},{"assignments":[1786,1788],"declarations":[{"constant":false,"id":1786,"mutability":"mutable","name":"success","nameLocation":"5246:7:24","nodeType":"VariableDeclaration","scope":1803,"src":"5241:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1785,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1788,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:24","nodeType":"VariableDeclaration","scope":1803,"src":"5255:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1787,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1795,"initialValue":{"arguments":[{"id":1793,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"5308:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1789,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"5282:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:24","memberName":"call","nodeType":"MemberAccess","src":"5282:11:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1791,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"5301:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:24"},{"expression":{"arguments":[{"id":1797,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"5357:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1798,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1786,"src":"5365:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1799,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1788,"src":"5374:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1800,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"5386:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1796,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"5330:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1773,"id":1802,"nodeType":"Return","src":"5323:76:24"}]},"documentation":{"id":1761,"nodeType":"StructuredDocumentation","src":"4718:237:24","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1804,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:24","nodeType":"FunctionDefinition","parameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1763,"mutability":"mutable","name":"target","nameLocation":"5008:6:24","nodeType":"VariableDeclaration","scope":1804,"src":"5000:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1762,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"data","nameLocation":"5037:4:24","nodeType":"VariableDeclaration","scope":1804,"src":"5024:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1764,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"value","nameLocation":"5059:5:24","nodeType":"VariableDeclaration","scope":1804,"src":"5051:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:24","nodeType":"VariableDeclaration","scope":1804,"src":"5074:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1768,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:24"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1804,"src":"5125:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1771,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:24"},"scope":1980,"src":"4960:446:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1820,"nodeType":"Block","src":"5683:97:24","statements":[{"expression":{"arguments":[{"id":1815,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"5719:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1816,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1809,"src":"5727:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1814,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1821,1850],"referencedDeclaration":1850,"src":"5700:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1813,"id":1819,"nodeType":"Return","src":"5693:80:24"}]},"documentation":{"id":1805,"nodeType":"StructuredDocumentation","src":"5412:166:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1821,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:24","nodeType":"FunctionDefinition","parameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1807,"mutability":"mutable","name":"target","nameLocation":"5619:6:24","nodeType":"VariableDeclaration","scope":1821,"src":"5611:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1806,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1809,"mutability":"mutable","name":"data","nameLocation":"5640:4:24","nodeType":"VariableDeclaration","scope":1821,"src":"5627:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1808,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:24"},"returnParameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1821,"src":"5669:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1811,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:24"},"scope":1980,"src":"5583:197:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1849,"nodeType":"Block","src":"6122:168:24","statements":[{"assignments":[1834,1836],"declarations":[{"constant":false,"id":1834,"mutability":"mutable","name":"success","nameLocation":"6138:7:24","nodeType":"VariableDeclaration","scope":1849,"src":"6133:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1833,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:24","nodeType":"VariableDeclaration","scope":1849,"src":"6147:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1835,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1841,"initialValue":{"arguments":[{"id":1839,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"6192:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1837,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"6174:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:24","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:24","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:24"},{"expression":{"arguments":[{"id":1843,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"6241:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1844,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"6249:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1845,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"6258:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1846,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"6270:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1842,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"6214:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1832,"id":1848,"nodeType":"Return","src":"6207:76:24"}]},"documentation":{"id":1822,"nodeType":"StructuredDocumentation","src":"5786:173:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1850,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:24","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1824,"mutability":"mutable","name":"target","nameLocation":"6009:6:24","nodeType":"VariableDeclaration","scope":1850,"src":"6001:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1826,"mutability":"mutable","name":"data","nameLocation":"6038:4:24","nodeType":"VariableDeclaration","scope":1850,"src":"6025:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1825,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:24","nodeType":"VariableDeclaration","scope":1850,"src":"6052:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1827,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:24"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1850,"src":"6108:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1830,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:24"},"scope":1980,"src":"5964:326:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1866,"nodeType":"Block","src":"6566:101:24","statements":[{"expression":{"arguments":[{"id":1861,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"6604:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1862,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"6612:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1860,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1867,1896],"referencedDeclaration":1896,"src":"6583:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1859,"id":1865,"nodeType":"Return","src":"6576:84:24"}]},"documentation":{"id":1851,"nodeType":"StructuredDocumentation","src":"6296:168:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1867,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:24","nodeType":"FunctionDefinition","parameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"target","nameLocation":"6507:6:24","nodeType":"VariableDeclaration","scope":1867,"src":"6499:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1852,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1855,"mutability":"mutable","name":"data","nameLocation":"6528:4:24","nodeType":"VariableDeclaration","scope":1867,"src":"6515:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1854,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:24"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1867,"src":"6552:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1857,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:24"},"scope":1980,"src":"6469:198:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1895,"nodeType":"Block","src":"7008:170:24","statements":[{"assignments":[1880,1882],"declarations":[{"constant":false,"id":1880,"mutability":"mutable","name":"success","nameLocation":"7024:7:24","nodeType":"VariableDeclaration","scope":1895,"src":"7019:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1879,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:24","nodeType":"VariableDeclaration","scope":1895,"src":"7033:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1881,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1887,"initialValue":{"arguments":[{"id":1885,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"7080:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1883,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"7060:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:24","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:24","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:24"},{"expression":{"arguments":[{"id":1889,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"7129:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1890,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"7137:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1891,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"7146:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1892,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"7158:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1888,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1935,"src":"7102:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1878,"id":1894,"nodeType":"Return","src":"7095:76:24"}]},"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"6673:175:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1896,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:24","nodeType":"FunctionDefinition","parameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"target","nameLocation":"6900:6:24","nodeType":"VariableDeclaration","scope":1896,"src":"6892:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1869,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"data","nameLocation":"6929:4:24","nodeType":"VariableDeclaration","scope":1896,"src":"6916:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1871,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1874,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:24","nodeType":"VariableDeclaration","scope":1896,"src":"6943:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1873,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:24"},"returnParameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1896,"src":"6994:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1876,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:24"},"scope":1980,"src":"6853:325:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1934,"nodeType":"Block","src":"7660:434:24","statements":[{"condition":{"id":1910,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"7674:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1932,"nodeType":"Block","src":"8030:58:24","statements":[{"expression":{"arguments":[{"id":1928,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"8052:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1929,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"8064:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1927,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"8044:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1931,"nodeType":"ExpressionStatement","src":"8044:33:24"}]},"id":1933,"nodeType":"IfStatement","src":"7670:418:24","trueBody":{"id":1926,"nodeType":"Block","src":"7683:341:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1911,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"7701:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:24","memberName":"length","nodeType":"MemberAccess","src":"7701:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1923,"nodeType":"IfStatement","src":"7697:286:24","trueBody":{"id":1922,"nodeType":"Block","src":"7725:258:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":1917,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"7927:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1916,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"7916:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1915,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"7908:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1921,"nodeType":"ExpressionStatement","src":"7908:60:24"}]}},{"expression":{"id":1924,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"8003:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1909,"id":1925,"nodeType":"Return","src":"7996:17:24"}]}}]},"documentation":{"id":1897,"nodeType":"StructuredDocumentation","src":"7184:277:24","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1935,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:24","nodeType":"FunctionDefinition","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1899,"mutability":"mutable","name":"target","nameLocation":"7519:6:24","nodeType":"VariableDeclaration","scope":1935,"src":"7511:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1898,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1901,"mutability":"mutable","name":"success","nameLocation":"7540:7:24","nodeType":"VariableDeclaration","scope":1935,"src":"7535:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1900,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1903,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:24","nodeType":"VariableDeclaration","scope":1935,"src":"7557:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1902,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1905,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:24","nodeType":"VariableDeclaration","scope":1935,"src":"7590:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1904,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:24"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1935,"src":"7646:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1907,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:24"},"scope":1980,"src":"7466:628:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1958,"nodeType":"Block","src":"8475:135:24","statements":[{"condition":{"id":1947,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1938,"src":"8489:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1956,"nodeType":"Block","src":"8546:58:24","statements":[{"expression":{"arguments":[{"id":1952,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"8568:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1953,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"8580:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1951,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1979,"src":"8560:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1955,"nodeType":"ExpressionStatement","src":"8560:33:24"}]},"id":1957,"nodeType":"IfStatement","src":"8485:119:24","trueBody":{"id":1950,"nodeType":"Block","src":"8498:42:24","statements":[{"expression":{"id":1948,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"8519:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1946,"id":1949,"nodeType":"Return","src":"8512:17:24"}]}}]},"documentation":{"id":1936,"nodeType":"StructuredDocumentation","src":"8100:210:24","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1959,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:24","nodeType":"FunctionDefinition","parameters":{"id":1943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1938,"mutability":"mutable","name":"success","nameLocation":"8355:7:24","nodeType":"VariableDeclaration","scope":1959,"src":"8350:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1937,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1940,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:24","nodeType":"VariableDeclaration","scope":1959,"src":"8372:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1939,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1942,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:24","nodeType":"VariableDeclaration","scope":1959,"src":"8405:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1941,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:24"},"returnParameters":{"id":1946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1945,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1959,"src":"8461:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1944,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:24"},"scope":1980,"src":"8315:295:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1978,"nodeType":"Block","src":"8699:457:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1966,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"8775:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:24","memberName":"length","nodeType":"MemberAccess","src":"8775:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1976,"nodeType":"Block","src":"9105:45:24","statements":[{"expression":{"arguments":[{"id":1973,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"9126:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1972,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[4294967277,4294967277],"referencedDeclaration":4294967277,"src":"9119:6:24","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1975,"nodeType":"ExpressionStatement","src":"9119:20:24"}]},"id":1977,"nodeType":"IfStatement","src":"8771:379:24","trueBody":{"id":1971,"nodeType":"Block","src":"8798:301:24","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:24","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:24","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:24"},"nodeType":"YulFunctionCall","src":"8997:17:24"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:24","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:24"},"nodeType":"YulFunctionCall","src":"9038:19:24"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:24"},"nodeType":"YulFunctionCall","src":"9031:44:24"},"nodeType":"YulExpressionStatement","src":"9031:44:24"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1961,"isOffset":false,"isSlot":false,"src":"9003:10:24","valueSize":1},{"declaration":1961,"isOffset":false,"isSlot":false,"src":"9046:10:24","valueSize":1}],"id":1970,"nodeType":"InlineAssembly","src":"8947:142:24"}]}}]},"id":1979,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:24","nodeType":"FunctionDefinition","parameters":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:24","nodeType":"VariableDeclaration","scope":1979,"src":"8633:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1960,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:24","nodeType":"VariableDeclaration","scope":1979,"src":"8658:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1962,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:24"},"returnParameters":{"id":1965,"nodeType":"ParameterList","parameters":[],"src":"8699:0:24"},"scope":1980,"src":"8616:540:24","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1981,"src":"194:8964:24","usedErrors":[]}],"src":"101:9058:24"},"id":24},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2002]},"id":2003,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1982,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:25"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1983,"nodeType":"StructuredDocumentation","src":"111:496:25","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2002,"linearizedBaseContracts":[2002],"name":"Context","nameLocation":"626:7:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":1991,"nodeType":"Block","src":"702:34:25","statements":[{"expression":{"expression":{"id":1988,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"719:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:25","memberName":"sender","nodeType":"MemberAccess","src":"719:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1987,"id":1990,"nodeType":"Return","src":"712:17:25"}]},"id":1992,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:25","nodeType":"FunctionDefinition","parameters":{"id":1984,"nodeType":"ParameterList","parameters":[],"src":"659:2:25"},"returnParameters":{"id":1987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1992,"src":"693:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1985,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:25"},"scope":2002,"src":"640:96:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"809:32:25","statements":[{"expression":{"expression":{"id":1997,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"826:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:25","memberName":"data","nodeType":"MemberAccess","src":"826:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1996,"id":1999,"nodeType":"Return","src":"819:15:25"}]},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:25","nodeType":"FunctionDefinition","parameters":{"id":1993,"nodeType":"ParameterList","parameters":[],"src":"759:2:25"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2001,"src":"793:14:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1994,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:25"},"scope":2002,"src":"742:99:25","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2003,"src":"608:235:25","usedErrors":[]}],"src":"86:758:25"},"id":25},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2062]},"id":2063,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2004,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2005,"nodeType":"StructuredDocumentation","src":"130:1148:26","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":2062,"linearizedBaseContracts":[2062],"name":"StorageSlot","nameLocation":"1287:11:26","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2008,"members":[{"constant":false,"id":2007,"mutability":"mutable","name":"value","nameLocation":"1342:5:26","nodeType":"VariableDeclaration","scope":2008,"src":"1334:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2006,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:26","nodeType":"StructDefinition","scope":2062,"src":"1305:49:26","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2011,"members":[{"constant":false,"id":2010,"mutability":"mutable","name":"value","nameLocation":"1394:5:26","nodeType":"VariableDeclaration","scope":2011,"src":"1389:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2009,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:26","nodeType":"StructDefinition","scope":2062,"src":"1360:46:26","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2014,"members":[{"constant":false,"id":2013,"mutability":"mutable","name":"value","nameLocation":"1449:5:26","nodeType":"VariableDeclaration","scope":2014,"src":"1441:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2012,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:26","nodeType":"StructDefinition","scope":2062,"src":"1412:49:26","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2017,"members":[{"constant":false,"id":2016,"mutability":"mutable","name":"value","nameLocation":"1504:5:26","nodeType":"VariableDeclaration","scope":2017,"src":"1496:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2015,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:26","nodeType":"StructDefinition","scope":2062,"src":"1467:49:26","visibility":"public"},{"body":{"id":2027,"nodeType":"Block","src":"1698:106:26","statements":[{"AST":{"nodeType":"YulBlock","src":"1760:38:26","statements":[{"nodeType":"YulAssignment","src":"1774:14:26","value":{"name":"slot","nodeType":"YulIdentifier","src":"1784:4:26"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1774:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2024,"isOffset":false,"isSlot":true,"src":"1774:6:26","suffix":"slot","valueSize":1},{"declaration":2020,"isOffset":false,"isSlot":false,"src":"1784:4:26","valueSize":1}],"id":2026,"nodeType":"InlineAssembly","src":"1751:47:26"}]},"documentation":{"id":2018,"nodeType":"StructuredDocumentation","src":"1522:87:26","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2028,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:26","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"slot","nameLocation":"1646:4:26","nodeType":"VariableDeclaration","scope":2028,"src":"1638:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2019,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:26"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"r","nameLocation":"1695:1:26","nodeType":"VariableDeclaration","scope":2028,"src":"1675:21:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2008_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2023,"nodeType":"UserDefinedTypeName","pathNode":{"id":2022,"name":"AddressSlot","nameLocations":["1675:11:26"],"nodeType":"IdentifierPath","referencedDeclaration":2008,"src":"1675:11:26"},"referencedDeclaration":2008,"src":"1675:11:26","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2008_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:26"},"scope":2062,"src":"1614:190:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2038,"nodeType":"Block","src":"1986:106:26","statements":[{"AST":{"nodeType":"YulBlock","src":"2048:38:26","statements":[{"nodeType":"YulAssignment","src":"2062:14:26","value":{"name":"slot","nodeType":"YulIdentifier","src":"2072:4:26"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2062:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2035,"isOffset":false,"isSlot":true,"src":"2062:6:26","suffix":"slot","valueSize":1},{"declaration":2031,"isOffset":false,"isSlot":false,"src":"2072:4:26","valueSize":1}],"id":2037,"nodeType":"InlineAssembly","src":"2039:47:26"}]},"documentation":{"id":2029,"nodeType":"StructuredDocumentation","src":"1810:87:26","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2039,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:26","nodeType":"FunctionDefinition","parameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"slot","nameLocation":"1934:4:26","nodeType":"VariableDeclaration","scope":2039,"src":"1926:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:26"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"r","nameLocation":"1983:1:26","nodeType":"VariableDeclaration","scope":2039,"src":"1963:21:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2011_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2034,"nodeType":"UserDefinedTypeName","pathNode":{"id":2033,"name":"BooleanSlot","nameLocations":["1963:11:26"],"nodeType":"IdentifierPath","referencedDeclaration":2011,"src":"1963:11:26"},"referencedDeclaration":2011,"src":"1963:11:26","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2011_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:26"},"scope":2062,"src":"1902:190:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2049,"nodeType":"Block","src":"2274:106:26","statements":[{"AST":{"nodeType":"YulBlock","src":"2336:38:26","statements":[{"nodeType":"YulAssignment","src":"2350:14:26","value":{"name":"slot","nodeType":"YulIdentifier","src":"2360:4:26"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2350:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2046,"isOffset":false,"isSlot":true,"src":"2350:6:26","suffix":"slot","valueSize":1},{"declaration":2042,"isOffset":false,"isSlot":false,"src":"2360:4:26","valueSize":1}],"id":2048,"nodeType":"InlineAssembly","src":"2327:47:26"}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"2098:87:26","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2050,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:26","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"slot","nameLocation":"2222:4:26","nodeType":"VariableDeclaration","scope":2050,"src":"2214:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:26"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"r","nameLocation":"2271:1:26","nodeType":"VariableDeclaration","scope":2050,"src":"2251:21:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2014_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2045,"nodeType":"UserDefinedTypeName","pathNode":{"id":2044,"name":"Bytes32Slot","nameLocations":["2251:11:26"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"2251:11:26"},"referencedDeclaration":2014,"src":"2251:11:26","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2014_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:26"},"scope":2062,"src":"2190:190:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2060,"nodeType":"Block","src":"2562:106:26","statements":[{"AST":{"nodeType":"YulBlock","src":"2624:38:26","statements":[{"nodeType":"YulAssignment","src":"2638:14:26","value":{"name":"slot","nodeType":"YulIdentifier","src":"2648:4:26"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2638:6:26"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2057,"isOffset":false,"isSlot":true,"src":"2638:6:26","suffix":"slot","valueSize":1},{"declaration":2053,"isOffset":false,"isSlot":false,"src":"2648:4:26","valueSize":1}],"id":2059,"nodeType":"InlineAssembly","src":"2615:47:26"}]},"documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"2386:87:26","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2061,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:26","nodeType":"FunctionDefinition","parameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"slot","nameLocation":"2510:4:26","nodeType":"VariableDeclaration","scope":2061,"src":"2502:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:26"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"r","nameLocation":"2559:1:26","nodeType":"VariableDeclaration","scope":2061,"src":"2539:21:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2056,"nodeType":"UserDefinedTypeName","pathNode":{"id":2055,"name":"Uint256Slot","nameLocations":["2539:11:26"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"2539:11:26"},"referencedDeclaration":2017,"src":"2539:11:26","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2017_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:26"},"scope":2062,"src":"2478:190:26","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2063,"src":"1279:1391:26","usedErrors":[]}],"src":"105:2566:26"},"id":26},"contracts/escrow/TokenEscrow.sol":{"ast":{"absolutePath":"contracts/escrow/TokenEscrow.sol","exportedSymbols":{"Context":[2002],"ContractOwnership":[32],"ERC1155TokenReceiver":[979],"ForwarderRegistryContext":[499],"ForwarderRegistryContextBase":[619],"IERC1155":[1098],"IERC1155TokenReceiver":[1136],"IForwarderRegistry":[645],"TokenEscrow":[2445],"TokenRecovery":[725]},"id":2446,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2064,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2066,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":33,"src":"57:101:27","symbolAliases":[{"foreign":{"id":2065,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"65:17:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":2068,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":980,"src":"159:114:27","symbolAliases":[{"foreign":{"id":2067,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"167:20:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","id":2070,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":1137,"src":"274:127:27","symbolAliases":[{"foreign":{"id":2069,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"282:21:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","id":2072,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":1099,"src":"402:101:27","symbolAliases":[{"foreign":{"id":2071,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"410:8:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2074,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":500,"src":"504:115:27","symbolAliases":[{"foreign":{"id":2073,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"512:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2076,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":620,"src":"620:128:27","symbolAliases":[{"foreign":{"id":2075,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"628:28:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2078,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":646,"src":"749:114:27","symbolAliases":[{"foreign":{"id":2077,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"757:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2080,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":2003,"src":"864:66:27","symbolAliases":[{"foreign":{"id":2079,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"872:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":2082,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2446,"sourceUnit":726,"src":"931:95:27","symbolAliases":[{"foreign":{"id":2081,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"939:13:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2084,"name":"ForwarderRegistryContext","nameLocations":["1170:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"1170:24:27"},"id":2085,"nodeType":"InheritanceSpecifier","src":"1170:24:27"},{"baseName":{"id":2086,"name":"TokenRecovery","nameLocations":["1196:13:27"],"nodeType":"IdentifierPath","referencedDeclaration":725,"src":"1196:13:27"},"id":2087,"nodeType":"InheritanceSpecifier","src":"1196:13:27"},{"baseName":{"id":2088,"name":"ERC1155TokenReceiver","nameLocations":["1211:20:27"],"nodeType":"IdentifierPath","referencedDeclaration":979,"src":"1211:20:27"},"id":2089,"nodeType":"InheritanceSpecifier","src":"1211:20:27"}],"canonicalName":"TokenEscrow","contractDependencies":[],"contractKind":"contract","documentation":{"id":2083,"nodeType":"StructuredDocumentation","src":"1028:118:27","text":"@title TokenEscrow contract\n @notice Contract that allows users to escrow tokens for use in the Anichess Game."},"fullyImplemented":true,"id":2445,"linearizedBaseContracts":[2445,979,725,32,338,350,1136,82,105,944,2002,499,631,619],"name":"TokenEscrow","nameLocation":"1155:11:27","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"1238:45:27","text":"@notice Emitted when tokens are deposited"},"eventSelector":"d4960fb57883d065fb41b7f993f9be3105af91fe2b595a398457e1ff226cdc50","id":2097,"name":"DepositTokens","nameLocation":"1294:13:27","nodeType":"EventDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1324:4:27","nodeType":"VariableDeclaration","scope":2097,"src":"1308:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"1308:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2095,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1340:3:27","nodeType":"VariableDeclaration","scope":2097,"src":"1330:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"1330:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2094,"nodeType":"ArrayTypeName","src":"1330:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1307:37:27"},"src":"1288:57:27"},{"anonymous":false,"documentation":{"id":2098,"nodeType":"StructuredDocumentation","src":"1351:45:27","text":"@notice Emitted when tokens are withdrawn"},"eventSelector":"651c6d84833866465bf050fea9fb84dc59faf4fc13d4607553b539e31e53ff02","id":2105,"name":"WithdrawTokens","nameLocation":"1407:14:27","nodeType":"EventDefinition","parameters":{"id":2104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1438:4:27","nodeType":"VariableDeclaration","scope":2105,"src":"1422:20:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2099,"name":"address","nodeType":"ElementaryTypeName","src":"1422:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2103,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"1454:3:27","nodeType":"VariableDeclaration","scope":2105,"src":"1444:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1444:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2102,"nodeType":"ArrayTypeName","src":"1444:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1421:37:27"},"src":"1401:58:27"},{"errorSelector":"6524d08b","id":2107,"name":"InvalidInventory","nameLocation":"1492:16:27","nodeType":"ErrorDefinition","parameters":{"id":2106,"nodeType":"ParameterList","parameters":[],"src":"1508:2:27"},"src":"1486:25:27"},{"errorSelector":"1b517b18","id":2109,"name":"UnsupportedMethod","nameLocation":"1522:17:27","nodeType":"ErrorDefinition","parameters":{"id":2108,"nodeType":"ParameterList","parameters":[],"src":"1539:2:27"},"src":"1516:26:27"},{"errorSelector":"cf479181","id":2115,"name":"InsufficientBalance","nameLocation":"1553:19:27","nodeType":"ErrorDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2111,"mutability":"mutable","name":"tokenId","nameLocation":"1581:7:27","nodeType":"VariableDeclaration","scope":2115,"src":"1573:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1573:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2113,"mutability":"mutable","name":"balance","nameLocation":"1598:7:27","nodeType":"VariableDeclaration","scope":2115,"src":"1590:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1590:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1572:34:27"},"src":"1547:60:27"},{"errorSelector":"f4dcf56b","id":2121,"name":"BalanceExceeded","nameLocation":"1618:15:27","nodeType":"ErrorDefinition","parameters":{"id":2120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2117,"mutability":"mutable","name":"tokenId","nameLocation":"1642:7:27","nodeType":"VariableDeclaration","scope":2121,"src":"1634:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1634:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"balance","nameLocation":"1659:7:27","nodeType":"VariableDeclaration","scope":2121,"src":"1651:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"1651:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1633:34:27"},"src":"1612:56:27"},{"errorSelector":"35e83ac3","id":2123,"name":"InconsistentArrays","nameLocation":"1679:18:27","nodeType":"ErrorDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[],"src":"1697:2:27"},"src":"1673:27:27"},{"constant":false,"documentation":{"id":2124,"nodeType":"StructuredDocumentation","src":"1706:37:27","text":"@notice An Orb contract reference"},"functionSelector":"4dfde97a","id":2127,"mutability":"immutable","name":"TOKEN_INVENTORY","nameLocation":"1774:15:27","nodeType":"VariableDeclaration","scope":2445,"src":"1748:41:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"},"typeName":{"id":2126,"nodeType":"UserDefinedTypeName","pathNode":{"id":2125,"name":"IERC1155","nameLocations":["1748:8:27"],"nodeType":"IdentifierPath","referencedDeclaration":1098,"src":"1748:8:27"},"referencedDeclaration":1098,"src":"1748:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"visibility":"public"},{"constant":false,"documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"1796:90:27","text":"@notice Mapping from owner address to a mapping from token ID to escrowed token count."},"functionSelector":"f997659a","id":2134,"mutability":"mutable","name":"escrowedNFTs","nameLocation":"1946:12:27","nodeType":"VariableDeclaration","scope":2445,"src":"1891:67:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":2133,"keyType":{"id":2129,"name":"address","nodeType":"ElementaryTypeName","src":"1899:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1891:47:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueType":{"id":2132,"keyType":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"1918:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1910:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1929:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"body":{"id":2169,"nodeType":"Block","src":"2422:141:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2153,"name":"inventory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2444:9:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}],"id":2152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2436:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2151,"name":"address","nodeType":"ElementaryTypeName","src":"2436:7:27","typeDescriptions":{}}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2436:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2466:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2458:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"2458:7:27","typeDescriptions":{}}},"id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2458:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2436:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2164,"nodeType":"IfStatement","src":"2432:88:27","trueBody":{"id":2163,"nodeType":"Block","src":"2470:50:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2160,"name":"InvalidInventory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"2491:16:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2491:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2162,"nodeType":"RevertStatement","src":"2484:25:27"}]}},{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2165,"name":"TOKEN_INVENTORY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"2529:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2166,"name":"inventory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2547:9:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"src":"2529:27:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"id":2168,"nodeType":"ExpressionStatement","src":"2529:27:27"}]},"documentation":{"id":2135,"nodeType":"StructuredDocumentation","src":"1965:308:27","text":"@notice Creates a new escrow contract\n @dev Throws if the _inventory address is a zero address.\n @dev ContractOwnership is required to initiate TokenRecovery\n @param forwarderRegistry The forwarder registry contract information\n @param inventory The inventory contract address"},"id":2170,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2144,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"2373:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"id":2145,"kind":"baseConstructorSpecifier","modifierName":{"id":2143,"name":"ForwarderRegistryContext","nameLocations":["2348:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"2348:24:27"},"nodeType":"ModifierInvocation","src":"2348:43:27"},{"arguments":[{"expression":{"id":2147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2410:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2414:6:27","memberName":"sender","nodeType":"MemberAccess","src":"2410:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2149,"kind":"baseConstructorSpecifier","modifierName":{"id":2146,"name":"ContractOwnership","nameLocations":["2392:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2392:17:27"},"nodeType":"ModifierInvocation","src":"2392:29:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2309:17:27","nodeType":"VariableDeclaration","scope":2170,"src":"2290:36:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":2137,"nodeType":"UserDefinedTypeName","pathNode":{"id":2136,"name":"IForwarderRegistry","nameLocations":["2290:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"2290:18:27"},"referencedDeclaration":645,"src":"2290:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"inventory","nameLocation":"2337:9:27","nodeType":"VariableDeclaration","scope":2170,"src":"2328:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"},"typeName":{"id":2140,"nodeType":"UserDefinedTypeName","pathNode":{"id":2139,"name":"IERC1155","nameLocations":["2328:8:27"],"nodeType":"IdentifierPath","referencedDeclaration":1098,"src":"2328:8:27"},"referencedDeclaration":1098,"src":"2328:8:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"visibility":"internal"}],"src":"2289:58:27"},"returnParameters":{"id":2150,"nodeType":"ParameterList","parameters":[],"src":"2422:0:27"},"scope":2445,"src":"2278:285:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2186,"nodeType":"Block","src":"2941:49:27","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2180,"name":"escrowedNFTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"2958:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2182,"indexExpression":{"id":2181,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"2971:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2958:21:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2184,"indexExpression":{"id":2183,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"2980:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2958:25:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2179,"id":2185,"nodeType":"Return","src":"2951:32:27"}]},"documentation":{"id":2171,"nodeType":"StructuredDocumentation","src":"2569:287:27","text":"@notice Returns the escrowed token balance of a given token held by a given address\n @param account The address of the token holder\n @param id The ID of the token\n @return balance The amount of token escrowed held by the token holder correponding to the token ID"},"functionSelector":"00fdd58e","id":2187,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2870:9:27","nodeType":"FunctionDefinition","parameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"account","nameLocation":"2888:7:27","nodeType":"VariableDeclaration","scope":2187,"src":"2880:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2172,"name":"address","nodeType":"ElementaryTypeName","src":"2880:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2175,"mutability":"mutable","name":"id","nameLocation":"2905:2:27","nodeType":"VariableDeclaration","scope":2187,"src":"2897:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2174,"name":"uint256","nodeType":"ElementaryTypeName","src":"2897:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2879:29:27"},"returnParameters":{"id":2179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2187,"src":"2932:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"2932:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2931:9:27"},"scope":2445,"src":"2861:129:27","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2211,"nodeType":"Block","src":"3399:100:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2200,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2431],"referencedDeclaration":2431,"src":"3447:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3447:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2204,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"3469:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_TokenEscrow_$2445","typeString":"contract TokenEscrow"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenEscrow_$2445","typeString":"contract TokenEscrow"}],"id":2203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3461:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"3461:7:27","typeDescriptions":{}}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3461:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2206,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"3476:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2207,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"3481:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"hexValue":"","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3489:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2197,"name":"TOKEN_INVENTORY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"3409:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3425:21:27","memberName":"safeBatchTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1056,"src":"3409:37:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3409:83:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2210,"nodeType":"ExpressionStatement","src":"3409:83:27"}]},"documentation":{"id":2188,"nodeType":"StructuredDocumentation","src":"2996:321:27","text":"@notice Handles the deposit of tokens.\n @dev Batch transfer tokens from the sender to this contract\n @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\n @param values An array containing amounts of each token being transferred (corresponds to quantities)"},"functionSelector":"f223885a","id":2212,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"3331:7:27","nodeType":"FunctionDefinition","parameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2191,"mutability":"mutable","name":"ids","nameLocation":"3358:3:27","nodeType":"VariableDeclaration","scope":2212,"src":"3339:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2189,"name":"uint256","nodeType":"ElementaryTypeName","src":"3339:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2190,"nodeType":"ArrayTypeName","src":"3339:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2194,"mutability":"mutable","name":"values","nameLocation":"3382:6:27","nodeType":"VariableDeclaration","scope":2212,"src":"3363:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2192,"name":"uint256","nodeType":"ElementaryTypeName","src":"3363:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2193,"nodeType":"ArrayTypeName","src":"3363:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3338:51:27"},"returnParameters":{"id":2196,"nodeType":"ParameterList","parameters":[],"src":"3399:0:27"},"scope":2445,"src":"3322:177:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2308,"nodeType":"Block","src":"4142:646:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2222,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4156:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4160:6:27","memberName":"length","nodeType":"MemberAccess","src":"4156:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2224,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4170:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4177:6:27","memberName":"length","nodeType":"MemberAccess","src":"4170:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4156:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2231,"nodeType":"IfStatement","src":"4152:85:27","trueBody":{"id":2230,"nodeType":"Block","src":"4185:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2227,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"4206:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4206:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2229,"nodeType":"RevertStatement","src":"4199:27:27"}]}},{"assignments":[2233],"declarations":[{"constant":false,"id":2233,"mutability":"mutable","name":"sender","nameLocation":"4254:6:27","nodeType":"VariableDeclaration","scope":2308,"src":"4246:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2232,"name":"address","nodeType":"ElementaryTypeName","src":"4246:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2236,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2234,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2431],"referencedDeclaration":2431,"src":"4263:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4246:29:27"},{"body":{"id":2288,"nodeType":"Block","src":"4326:325:27","statements":[{"assignments":[2249],"declarations":[{"constant":false,"id":2249,"mutability":"mutable","name":"id","nameLocation":"4348:2:27","nodeType":"VariableDeclaration","scope":2288,"src":"4340:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint256","nodeType":"ElementaryTypeName","src":"4340:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2253,"initialValue":{"baseExpression":{"id":2250,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4353:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2252,"indexExpression":{"id":2251,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4357:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4353:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4340:19:27"},{"assignments":[2255],"declarations":[{"constant":false,"id":2255,"mutability":"mutable","name":"value","nameLocation":"4381:5:27","nodeType":"VariableDeclaration","scope":2288,"src":"4373:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2254,"name":"uint256","nodeType":"ElementaryTypeName","src":"4373:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2259,"initialValue":{"baseExpression":{"id":2256,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4389:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2258,"indexExpression":{"id":2257,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4396:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4389:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4373:25:27"},{"assignments":[2261],"declarations":[{"constant":false,"id":2261,"mutability":"mutable","name":"senderBalance","nameLocation":"4420:13:27","nodeType":"VariableDeclaration","scope":2288,"src":"4412:21:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2267,"initialValue":{"baseExpression":{"baseExpression":{"id":2262,"name":"escrowedNFTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"4436:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2264,"indexExpression":{"id":2263,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"4449:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4436:20:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2266,"indexExpression":{"id":2265,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4457:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4436:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4412:48:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"senderBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"4478:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"4494:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4478:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2277,"nodeType":"IfStatement","src":"4474:105:27","trueBody":{"id":2276,"nodeType":"Block","src":"4501:78:27","statements":[{"errorCall":{"arguments":[{"id":2272,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4546:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2273,"name":"senderBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"4550:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2271,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"4526:19:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4526:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2275,"nodeType":"RevertStatement","src":"4519:45:27"}]}},{"expression":{"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2278,"name":"escrowedNFTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"4592:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2281,"indexExpression":{"id":2279,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"4605:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4592:20:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2282,"indexExpression":{"id":2280,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"4613:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4592:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"senderBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"4619:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"4635:5:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4619:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4592:48:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2287,"nodeType":"ExpressionStatement","src":"4592:48:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2241,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4305:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2242,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4309:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4313:6:27","memberName":"length","nodeType":"MemberAccess","src":"4309:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4305:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2289,"initializationExpression":{"assignments":[2238],"declarations":[{"constant":false,"id":2238,"mutability":"mutable","name":"i","nameLocation":"4298:1:27","nodeType":"VariableDeclaration","scope":2289,"src":"4290:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2237,"name":"uint256","nodeType":"ElementaryTypeName","src":"4290:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2240,"initialValue":{"hexValue":"30","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4290:13:27"},"loopExpression":{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4321:3:27","subExpression":{"id":2245,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2238,"src":"4321:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"4321:3:27"},"nodeType":"ForStatement","src":"4285:366:27"},{"eventCall":{"arguments":[{"id":2291,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"4681:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2292,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4689:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":2290,"name":"WithdrawTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4666:14:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory)"}},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4666:27:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2294,"nodeType":"EmitStatement","src":"4661:32:27"},{"expression":{"arguments":[{"arguments":[{"id":2300,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967268,"src":"4750:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_TokenEscrow_$2445","typeString":"contract TokenEscrow"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenEscrow_$2445","typeString":"contract TokenEscrow"}],"id":2299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4742:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2298,"name":"address","nodeType":"ElementaryTypeName","src":"4742:7:27","typeDescriptions":{}}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4742:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2302,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2233,"src":"4757:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2303,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2216,"src":"4765:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2304,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4770:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"hexValue":"","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4778:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2295,"name":"TOKEN_INVENTORY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"4704:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4720:21:27","memberName":"safeBatchTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1056,"src":"4704:37:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external"}},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4704:77:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2307,"nodeType":"ExpressionStatement","src":"4704:77:27"}]},"documentation":{"id":2213,"nodeType":"StructuredDocumentation","src":"3505:554:27","text":"@notice Handles token withdrawal\n @dev Reverts if the array length of ids & values does not match.\n @dev Reverts if the sender does not have enough balance.\n @dev Updates the escrowedTokens mapping.\n @dev Emits {WithdrawTokens} events.\n @dev Transfers the token from this contract to the sender's address\n @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\n @param values An array containing amounts of each token being transferred (corresponds to quantities)"},"functionSelector":"81c197ed","id":2309,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"4073:8:27","nodeType":"FunctionDefinition","parameters":{"id":2220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2216,"mutability":"mutable","name":"ids","nameLocation":"4101:3:27","nodeType":"VariableDeclaration","scope":2309,"src":"4082:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"4082:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2215,"nodeType":"ArrayTypeName","src":"4082:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2219,"mutability":"mutable","name":"values","nameLocation":"4125:6:27","nodeType":"VariableDeclaration","scope":2309,"src":"4106:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2217,"name":"uint256","nodeType":"ElementaryTypeName","src":"4106:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2218,"nodeType":"ArrayTypeName","src":"4106:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4081:51:27"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[],"src":"4142:0:27"},"scope":2445,"src":"4064:724:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1117],"body":{"id":2328,"nodeType":"Block","src":"5023:43:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2325,"name":"UnsupportedMethod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2109,"src":"5040:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5040:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2327,"nodeType":"RevertStatement","src":"5033:26:27"}]},"documentation":{"id":2310,"nodeType":"StructuredDocumentation","src":"4794:114:27","text":"@notice Handles the receipt of a single type of token.\n @dev Reverts if this method has been triggered."},"functionSelector":"f23a6e61","id":2329,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"4922:17:27","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"4940:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2311,"name":"address","nodeType":"ElementaryTypeName","src":"4940:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"4949:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2313,"name":"address","nodeType":"ElementaryTypeName","src":"4949:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"4958:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2315,"name":"uint256","nodeType":"ElementaryTypeName","src":"4958:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"4967:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"4967:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"4976:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2319,"name":"bytes","nodeType":"ElementaryTypeName","src":"4976:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4939:52:27"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2329,"src":"5015:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2322,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5015:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5014:8:27"},"scope":2445,"src":"4913:153:27","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[1135],"body":{"id":2417,"nodeType":"Block","src":"5875:535:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2347,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"5889:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5893:6:27","memberName":"sender","nodeType":"MemberAccess","src":"5889:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2351,"name":"TOKEN_INVENTORY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"5911:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}],"id":2350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5903:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2349,"name":"address","nodeType":"ElementaryTypeName","src":"5903:7:27","typeDescriptions":{}}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5903:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5889:38:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2358,"nodeType":"IfStatement","src":"5885:94:27","trueBody":{"id":2357,"nodeType":"Block","src":"5929:50:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2354,"name":"InvalidInventory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"5950:16:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5950:18:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2356,"nodeType":"RevertStatement","src":"5943:25:27"}]}},{"body":{"id":2406,"nodeType":"Block","src":"6029:266:27","statements":[{"assignments":[2371],"declarations":[{"constant":false,"id":2371,"mutability":"mutable","name":"id","nameLocation":"6051:2:27","nodeType":"VariableDeclaration","scope":2406,"src":"6043:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"6043:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2375,"initialValue":{"baseExpression":{"id":2372,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"6056:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2374,"indexExpression":{"id":2373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"6060:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6056:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6043:19:27"},{"assignments":[2377],"declarations":[{"constant":false,"id":2377,"mutability":"mutable","name":"newBalance","nameLocation":"6084:10:27","nodeType":"VariableDeclaration","scope":2406,"src":"6076:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2376,"name":"uint256","nodeType":"ElementaryTypeName","src":"6076:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2387,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":2378,"name":"escrowedNFTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"6097:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2380,"indexExpression":{"id":2379,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"6110:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6097:18:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2382,"indexExpression":{"id":2381,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"6116:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6097:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"id":2383,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"6122:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2385,"indexExpression":{"id":2384,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"6129:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6122:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6097:34:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6076:55:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2388,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"6149:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6162:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6149:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2397,"nodeType":"IfStatement","src":"6145:91:27","trueBody":{"id":2396,"nodeType":"Block","src":"6165:71:27","statements":[{"errorCall":{"arguments":[{"id":2392,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"6206:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2393,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"6210:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2391,"name":"BalanceExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"6190:15:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6190:31:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2395,"nodeType":"RevertStatement","src":"6183:38:27"}]}},{"expression":{"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2398,"name":"escrowedNFTs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"6249:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2401,"indexExpression":{"id":2399,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"6262:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6249:18:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2402,"indexExpression":{"id":2400,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"6268:2:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6249:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2403,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"6274:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6249:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2405,"nodeType":"ExpressionStatement","src":"6249:35:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2363,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"6008:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2364,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"6012:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6016:6:27","memberName":"length","nodeType":"MemberAccess","src":"6012:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6008:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2407,"initializationExpression":{"assignments":[2360],"declarations":[{"constant":false,"id":2360,"mutability":"mutable","name":"i","nameLocation":"6001:1:27","nodeType":"VariableDeclaration","scope":2407,"src":"5993:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2359,"name":"uint256","nodeType":"ElementaryTypeName","src":"5993:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2362,"initialValue":{"hexValue":"30","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6005:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5993:13:27"},"loopExpression":{"expression":{"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6024:3:27","subExpression":{"id":2367,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"6024:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2369,"nodeType":"ExpressionStatement","src":"6024:3:27"},"nodeType":"ForStatement","src":"5988:307:27"},{"eventCall":{"arguments":[{"id":2409,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"6323:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2410,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"6329:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":2408,"name":"DepositTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"6309:13:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory)"}},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6309:24:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2412,"nodeType":"EmitStatement","src":"6304:29:27"},{"expression":{"expression":{"expression":{"id":2413,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"6350:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$1136_$","typeString":"type(contract IERC1155TokenReceiver)"}},"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6372:22:27","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1135,"src":"6350:44:27","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155TokenReceiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6395:8:27","memberName":"selector","nodeType":"MemberAccess","src":"6350:53:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2346,"id":2416,"nodeType":"Return","src":"6343:60:27"}]},"documentation":{"id":2330,"nodeType":"StructuredDocumentation","src":"5072:604:27","text":"@notice Handles the receipt of multiple types of tokens.\n @dev Reverts if the sender is not in the inventory.\n @dev Updates the escrowedTokens mapping.\n @dev Reverts if the updated token balance is greater than 1\n @dev Emits a {DepositTokens} event.\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\n @param values An array containing amounts of each token being transferred (corresponds to quantities)\n @return selector The function selector"},"functionSelector":"bc197c81","id":2418,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"5690:22:27","nodeType":"FunctionDefinition","parameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"5722:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2331,"name":"address","nodeType":"ElementaryTypeName","src":"5722:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2334,"mutability":"mutable","name":"from","nameLocation":"5747:4:27","nodeType":"VariableDeclaration","scope":2418,"src":"5739:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2333,"name":"address","nodeType":"ElementaryTypeName","src":"5739:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2337,"mutability":"mutable","name":"ids","nameLocation":"5780:3:27","nodeType":"VariableDeclaration","scope":2418,"src":"5761:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2335,"name":"uint256","nodeType":"ElementaryTypeName","src":"5761:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2336,"nodeType":"ArrayTypeName","src":"5761:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2340,"mutability":"mutable","name":"values","nameLocation":"5812:6:27","nodeType":"VariableDeclaration","scope":2418,"src":"5793:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2338,"name":"uint256","nodeType":"ElementaryTypeName","src":"5793:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2339,"nodeType":"ArrayTypeName","src":"5793:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2342,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"5828:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2341,"name":"bytes","nodeType":"ElementaryTypeName","src":"5828:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5712:136:27"},"returnParameters":{"id":2346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2345,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"5867:6:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2344,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5867:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5866:8:27"},"scope":2445,"src":"5681:729:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[570,1992],"body":{"id":2430,"nodeType":"Block","src":"6526:65:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2426,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"6543:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$619_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6572:10:27","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":570,"src":"6543:39:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6543:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2425,"id":2429,"nodeType":"Return","src":"6536:48:27"}]},"id":2431,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"6425:10:27","nodeType":"FunctionDefinition","overrides":{"id":2422,"nodeType":"OverrideSpecifier","overrides":[{"id":2420,"name":"Context","nameLocations":["6469:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":2002,"src":"6469:7:27"},{"id":2421,"name":"ForwarderRegistryContextBase","nameLocations":["6478:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"6478:28:27"}],"src":"6460:47:27"},"parameters":{"id":2419,"nodeType":"ParameterList","parameters":[],"src":"6435:2:27"},"returnParameters":{"id":2425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2431,"src":"6517:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2423,"name":"address","nodeType":"ElementaryTypeName","src":"6517:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6516:9:27"},"scope":2445,"src":"6416:175:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[618,2001],"body":{"id":2443,"nodeType":"Block","src":"6712:63:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2439,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"6729:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$619_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6758:8:27","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":618,"src":"6729:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6729:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2438,"id":2442,"nodeType":"Return","src":"6722:46:27"}]},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"6606:8:27","nodeType":"FunctionDefinition","overrides":{"id":2435,"nodeType":"OverrideSpecifier","overrides":[{"id":2433,"name":"Context","nameLocations":["6648:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":2002,"src":"6648:7:27"},{"id":2434,"name":"ForwarderRegistryContextBase","nameLocations":["6657:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"6657:28:27"}],"src":"6639:47:27"},"parameters":{"id":2432,"nodeType":"ParameterList","parameters":[],"src":"6614:2:27"},"returnParameters":{"id":2438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2444,"src":"6696:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2436,"name":"bytes","nodeType":"ElementaryTypeName","src":"6696:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6695:16:27"},"scope":2445,"src":"6597:178:27","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2446,"src":"1146:5631:27","usedErrors":[2107,2109,2115,2121,2123]}],"src":"32:6746:27"},"id":27},"contracts/mocks/TokenEscrow/TokenEscrowMock.sol":{"ast":{"absolutePath":"contracts/mocks/TokenEscrow/TokenEscrowMock.sol","exportedSymbols":{"Context":[1252],"IERC1155":[1098],"IForwarderRegistry":[645],"TokenEscrow":[2445],"TokenEscrowMock":[2487]},"id":2488,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2447,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"contracts/escrow/TokenEscrow.sol","file":"../../escrow/TokenEscrow.sol","id":2449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2488,"sourceUnit":2446,"src":"57:57:28","symbolAliases":[{"foreign":{"id":2448,"name":"TokenEscrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"65:11:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2451,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2488,"sourceUnit":646,"src":"115:114:28","symbolAliases":[{"foreign":{"id":2450,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"123:18:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-4.9.5/utils/Context.sol","file":"@openzeppelin/contracts-4.9.5/utils/Context.sol","id":2453,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2488,"sourceUnit":1253,"src":"230:72:28","symbolAliases":[{"foreign":{"id":2452,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"238:7:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","id":2455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2488,"sourceUnit":1099,"src":"303:101:28","symbolAliases":[{"foreign":{"id":2454,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"311:8:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2457,"name":"TokenEscrow","nameLocations":["543:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"543:11:28"},"id":2458,"nodeType":"InheritanceSpecifier","src":"543:11:28"}],"canonicalName":"TokenEscrowMock","contractDependencies":[],"contractKind":"contract","documentation":{"id":2456,"nodeType":"StructuredDocumentation","src":"406:108:28","text":"@title ORBNFTMock Contract\n @notice Mock contract for testing purposes, extends the ORBNFT contract."},"fullyImplemented":true,"id":2487,"linearizedBaseContracts":[2487,2445,979,725,32,338,350,1136,82,105,944,2002,499,631,619],"name":"TokenEscrowMock","nameLocation":"524:15:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"0b76c48be4e2908f4c9d4eabaf7538e91577fd9ae26db46693fa8d861c6a42fb","id":2462,"name":"Data","nameLocation":"567:4:28","nodeType":"EventDefinition","parameters":{"id":2461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"578:4:28","nodeType":"VariableDeclaration","scope":2462,"src":"572:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2459,"name":"bytes","nodeType":"ElementaryTypeName","src":"572:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"571:12:28"},"src":"561:23:28"},{"body":{"id":2476,"nodeType":"Block","src":"1018:2:28","statements":[]},"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"590:309:28","text":"@notice Creates a new escrow contract\n @dev Throws if the _inventory address is a zero address.\n @dev ContractOwnership is required to initiate TokenRecovery\n @param forwarderRegistry The forwarder registry contract information\n @param inventory_ The inventory contract address"},"id":2477,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2472,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"987:17:28","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},{"id":2473,"name":"inventory_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2469,"src":"1006:10:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}}],"id":2474,"kind":"baseConstructorSpecifier","modifierName":{"id":2471,"name":"TokenEscrow","nameLocations":["975:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2445,"src":"975:11:28"},"nodeType":"ModifierInvocation","src":"975:42:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"935:17:28","nodeType":"VariableDeclaration","scope":2477,"src":"916:36:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":2465,"nodeType":"UserDefinedTypeName","pathNode":{"id":2464,"name":"IForwarderRegistry","nameLocations":["916:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"916:18:28"},"referencedDeclaration":645,"src":"916:18:28","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"constant":false,"id":2469,"mutability":"mutable","name":"inventory_","nameLocation":"963:10:28","nodeType":"VariableDeclaration","scope":2477,"src":"954:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"},"typeName":{"id":2468,"nodeType":"UserDefinedTypeName","pathNode":{"id":2467,"name":"IERC1155","nameLocations":["954:8:28"],"nodeType":"IdentifierPath","referencedDeclaration":1098,"src":"954:8:28"},"referencedDeclaration":1098,"src":"954:8:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$1098","typeString":"contract IERC1155"}},"visibility":"internal"}],"src":"915:59:28"},"returnParameters":{"id":2475,"nodeType":"ParameterList","parameters":[],"src":"1018:0:28"},"scope":2487,"src":"904:116:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2485,"nodeType":"Block","src":"1052:38:28","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2481,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2444],"referencedDeclaration":2444,"src":"1072:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1072:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2480,"name":"Data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"1067:4:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1067:16:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2484,"nodeType":"EmitStatement","src":"1062:21:28"}]},"functionSelector":"c4c2bfdc","id":2486,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"1035:7:28","nodeType":"FunctionDefinition","parameters":{"id":2478,"nodeType":"ParameterList","parameters":[],"src":"1042:2:28"},"returnParameters":{"id":2479,"nodeType":"ParameterList","parameters":[],"src":"1052:0:28"},"scope":2487,"src":"1026:64:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":2488,"src":"515:577:28","usedErrors":[2107,2109,2115,2121,2123]}],"src":"32:1061:28"},"id":28}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206441c8d9b04e45323a7b64369f6e5f8be0d27cba63a65ae4f2d178251374509e64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x41C8D9B04E GASLIMIT ORIGIN GASPRICE PUSH28 0x64369F6E5F8BE0D27CBA63A65AE4F2D178251374509E64736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"301:3582:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;301:3582:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206441c8d9b04e45323a7b64369f6e5f8be0d27cba63a65ae4f2d178251374509e64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x41C8D9B04E GASLIMIT ORIGIN GASPRICE PUSH28 0x64369F6E5F8BE0D27CBA63A65AE4F2D178251374509E64736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"301:3582:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220727bf4daef428a99399d2bc7b0196d64fe050ad725e85f3eee3b00a9fe23328c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x7BF4DAEF428A99399D2BC7B0196D64FE050AD7 0x25 0xE8 0x5F RETURNDATACOPY 0xEE EXTCODESIZE STOP 0xA9 INVALID 0x23 ORIGIN DUP13 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"111:1678:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;111:1678:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220727bf4daef428a99399d2bc7b0196d64fe050ad725e85f3eee3b00a9fe23328c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH19 0x7BF4DAEF428A99399D2BC7B0196D64FE050AD7 0x25 0xE8 0x5F RETURNDATACOPY 0xEE EXTCODESIZE STOP 0xA9 INVALID 0x23 ORIGIN DUP13 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"111:1678:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bfb19d360e84671be2f05ea1e15ae486ed97c6511ff03161b54f16be3a4b4c7c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF 0xB1 SWAP14 CALLDATASIZE 0xE DUP5 PUSH8 0x1BE2F05EA1E15AE4 DUP7 0xED SWAP8 0xC6 MLOAD 0x1F CREATE BALANCE PUSH2 0xB54F AND 0xBE GASPRICE 0x4B 0x4C PUSH29 0x64736F6C63430008110033000000000000000000000000000000000000 ","sourceMap":"201:568:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;201:568:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bfb19d360e84671be2f05ea1e15ae486ed97c6511ff03161b54f16be3a4b4c7c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF 0xB1 SWAP14 CALLDATASIZE 0xE DUP5 PUSH8 0x1BE2F05EA1E15AE4 DUP7 0xED SWAP8 0xC6 MLOAD 0x1F CREATE BALANCE PUSH2 0xB54F AND 0xBE GASPRICE 0x4B 0x4C PUSH29 0x64736F6C63430008110033000000000000000000000000000000000000 ","sourceMap":"201:568:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c156358ca87645dc8fe846298fa971c7d46dd7c17be3e150653ad82af055322f64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC1 JUMP CALLDATALOAD DUP13 0xA8 PUSH23 0x45DC8FE846298FA971C7D46DD7C17BE3E150653AD82AF0 SSTORE ORIGIN 0x2F PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"225:593:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;225:593:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c156358ca87645dc8fe846298fa971c7d46dd7c17be3e150653ad82af055322f64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC1 JUMP CALLDATALOAD DUP13 0xA8 PUSH23 0x45DC8FE846298FA971C7D46DD7C17BE3E150653AD82AF0 SSTORE ORIGIN 0x2F PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"225:593:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610a3c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806373c8a95814610046578063c3666c361461005b578063f7ba94bd1461006e575b600080fd5b6100596100543660046107c3565b610081565b005b6100596100693660046107c3565b61015e565b61005961007c36600461085c565b610285565b610094335b61008e61031a565b9061034e565b8483811480156100a357508082145b6100c85760405162461bcd60e51b81526004016100bf906108c7565b60405180910390fd5b60005b8181146101545761014c8888838181106100e7576100e76108fe565b90506020020160208101906100fc919061092c565b85858481811061010e5761010e6108fe565b90506020020135888885818110610127576101276108fe565b905060200201602081019061013c919061092c565b6001600160a01b031691906103a9565b6001016100cb565b5050505050505050565b61016733610086565b84838114801561017657508082145b6101925760405162461bcd60e51b81526004016100bf906108c7565b60005b818114610154578585828181106101ae576101ae6108fe565b90506020020160208101906101c3919061092c565b6001600160a01b03166323b872dd308a8a858181106101e4576101e46108fe565b90506020020160208101906101f9919061092c565b87878681811061020b5761020b6108fe565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561026257600080fd5b505af1158015610276573d6000803e3d6000fd5b50505050806001019050610195565b61028e33610086565b828181146102ae5760405162461bcd60e51b81526004016100bf906108c7565b60005b8181146103125761030a8484838181106102cd576102cd6108fe565b905060200201358787848181106102e6576102e66108fe565b90506020020160208101906102fb919061092c565b6001600160a01b031690610400565b6001016102b1565b505050505050565b60008061034860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610950565b92915050565b81546001600160a01b038281169116146103a55760405162461bcd60e51b815260206004820152601860248201527727bbb732b939b434b81d103737ba103a34329037bbb732b960411b60448201526064016100bf565b5050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526103fb908490610516565b505050565b804710156104505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016100bf565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461049d576040519150601f19603f3d011682016040523d82523d6000602084013e6104a2565b606091505b50509050806103fb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016100bf565b600061056b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105e89092919063ffffffff16565b8051909150156103fb57808060200190518101906105899190610971565b6103fb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100bf565b60606105f784846000856105ff565b949350505050565b6060824710156106605760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100bf565b600080866001600160a01b0316858760405161067c91906109b7565b60006040518083038185875af1925050503d80600081146106b9576040519150601f19603f3d011682016040523d82523d6000602084013e6106be565b606091505b50915091506106cf878383876106da565b979650505050505050565b60608315610749578251600003610742576001600160a01b0385163b6107425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100bf565b50816105f7565b6105f7838381511561075e5781518083602001fd5b8060405162461bcd60e51b81526004016100bf91906109d3565b60008083601f84011261078a57600080fd5b5081356001600160401b038111156107a157600080fd5b6020830191508360208260051b85010111156107bc57600080fd5b9250929050565b600080600080600080606087890312156107dc57600080fd5b86356001600160401b03808211156107f357600080fd5b6107ff8a838b01610778565b9098509650602089013591508082111561081857600080fd5b6108248a838b01610778565b9096509450604089013591508082111561083d57600080fd5b5061084a89828a01610778565b979a9699509497509295939492505050565b6000806000806040858703121561087257600080fd5b84356001600160401b038082111561088957600080fd5b61089588838901610778565b909650945060208701359150808211156108ae57600080fd5b506108bb87828801610778565b95989497509550505050565b6020808252601d908201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461092957600080fd5b50565b60006020828403121561093e57600080fd5b813561094981610914565b9392505050565b8181038181111561034857634e487b7160e01b600052601160045260246000fd5b60006020828403121561098357600080fd5b8151801515811461094957600080fd5b60005b838110156109ae578181015183820152602001610996565b50506000910152565b600082516109c9818460208701610993565b9190910192915050565b60208152600082518060208401526109f2816040850160208701610993565b601f01601f1916919091016040019291505056fea2646970667358221220ccd7cb22c3f04557f93669adfd7cf8a1ed606b1c563497c26198e16b62d4ec3964736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA3C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0x15E JUMP JUMPDEST PUSH2 0x59 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST PUSH2 0x94 CALLER JUMPDEST PUSH2 0x8E PUSH2 0x31A JUMP JUMPDEST SWAP1 PUSH2 0x34E JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xA3 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0xC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x154 JUMPI PUSH2 0x14C DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0xE7 JUMPI PUSH2 0xE7 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFC SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x10E JUMPI PUSH2 0x10E PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x127 JUMPI PUSH2 0x127 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x13C SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xCB JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x167 CALLER PUSH2 0x86 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x176 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x192 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x154 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x1AE JUMPI PUSH2 0x1AE PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x1E4 JUMPI PUSH2 0x1E4 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x20B JUMPI PUSH2 0x20B PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x195 JUMP JUMPDEST PUSH2 0x28E CALLER PUSH2 0x86 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x312 JUMPI PUSH2 0x30A DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2CD JUMPI PUSH2 0x2CD PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x2E6 JUMPI PUSH2 0x2E6 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x400 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2B1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x348 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x950 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x27BBB732B939B434B81D103737BA103A34329037BBB732B9 PUSH1 0x41 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xBF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x3FB SWAP1 DUP5 SWAP1 PUSH2 0x516 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4A2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x3FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x1958DA5C1A595B9D081B585E481A185D99481C995D995C9D1959 PUSH1 0x32 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5E8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3FB JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x589 SWAP2 SWAP1 PUSH2 0x971 JUMP JUMPDEST PUSH2 0x3FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5F7 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x5FF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x660 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x67C SWAP2 SWAP1 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x6CF DUP8 DUP4 DUP4 DUP8 PUSH2 0x6DA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x749 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x742 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x742 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xBF JUMP JUMPDEST POP DUP2 PUSH2 0x5F7 JUMP JUMPDEST PUSH2 0x5F7 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x75E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x7BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x7DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FF DUP11 DUP4 DUP12 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x824 DUP11 DUP4 DUP12 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x84A DUP10 DUP3 DUP11 ADD PUSH2 0x778 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x889 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x895 DUP9 DUP4 DUP10 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BB DUP8 DUP3 DUP9 ADD PUSH2 0x778 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x929 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x949 DUP2 PUSH2 0x914 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9AE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x996 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9C9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x993 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9F2 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x993 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xD7 0xCB 0x22 0xC3 CREATE GASLIMIT JUMPI 0xF9 CALLDATASIZE PUSH10 0xADFD7CF8A1ED606B1C56 CALLVALUE SWAP8 0xC2 PUSH2 0x98E1 PUSH12 0x62D4EC3964736F6C63430008 GT STOP CALLER ","sourceMap":"782:3970:14:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_1649":{"entryPoint":1302,"id":1649,"parameterSlots":2,"returnSlots":0},"@_msgSender_1992":{"entryPoint":null,"id":1992,"parameterSlots":0,"returnSlots":1},"@_revert_1979":{"entryPoint":null,"id":1979,"parameterSlots":2,"returnSlots":0},"@enforceIsContractOwner_294":{"entryPoint":846,"id":294,"parameterSlots":2,"returnSlots":0},"@functionCallWithValue_1804":{"entryPoint":1535,"id":1804,"parameterSlots":4,"returnSlots":1},"@functionCall_1740":{"entryPoint":1512,"id":1740,"parameterSlots":3,"returnSlots":1},"@isContract_1668":{"entryPoint":null,"id":1668,"parameterSlots":1,"returnSlots":1},"@layout_306":{"entryPoint":794,"id":306,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_873":{"entryPoint":129,"id":873,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_943":{"entryPoint":350,"id":943,"parameterSlots":6,"returnSlots":0},"@recoverETH_807":{"entryPoint":645,"id":807,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1401":{"entryPoint":937,"id":1401,"parameterSlots":3,"returnSlots":0},"@sendValue_1702":{"entryPoint":1024,"id":1702,"parameterSlots":2,"returnSlots":0},"@verifyCallResultFromTarget_1935":{"entryPoint":1754,"id":1935,"parameterSlots":4,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":1912,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":2348,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":1987,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":2140,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":2417,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1333":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1222":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":2487,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2515,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2247,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":2384,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2451,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":2302,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":2324,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9702:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"98:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"147:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"156:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"149:6:29"},"nodeType":"YulFunctionCall","src":"149:12:29"},"nodeType":"YulExpressionStatement","src":"149:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"126:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"134:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"122:3:29"},"nodeType":"YulFunctionCall","src":"122:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"141:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"118:3:29"},"nodeType":"YulFunctionCall","src":"118:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"111:6:29"},"nodeType":"YulFunctionCall","src":"111:35:29"},"nodeType":"YulIf","src":"108:55:29"},{"nodeType":"YulAssignment","src":"172:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"195:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"182:12:29"},"nodeType":"YulFunctionCall","src":"182:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"172:6:29"}]},{"body":{"nodeType":"YulBlock","src":"245:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"257:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"247:6:29"},"nodeType":"YulFunctionCall","src":"247:12:29"},"nodeType":"YulExpressionStatement","src":"247:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"217:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"233:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"237:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"229:3:29"},"nodeType":"YulFunctionCall","src":"229:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"241:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"225:3:29"},"nodeType":"YulFunctionCall","src":"225:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"214:2:29"},"nodeType":"YulFunctionCall","src":"214:30:29"},"nodeType":"YulIf","src":"211:50:29"},{"nodeType":"YulAssignment","src":"270:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"286:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"294:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"282:3:29"},"nodeType":"YulFunctionCall","src":"282:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"270:8:29"}]},{"body":{"nodeType":"YulBlock","src":"359:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"368:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"371:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"361:6:29"},"nodeType":"YulFunctionCall","src":"361:12:29"},"nodeType":"YulExpressionStatement","src":"361:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"322:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"337:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:29"},"nodeType":"YulFunctionCall","src":"330:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"318:3:29"},"nodeType":"YulFunctionCall","src":"318:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"347:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"314:3:29"},"nodeType":"YulFunctionCall","src":"314:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"354:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"311:2:29"},"nodeType":"YulFunctionCall","src":"311:47:29"},"nodeType":"YulIf","src":"308:67:29"}]},"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"61:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"69:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"77:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"87:6:29","type":""}],"src":"14:367:29"},{"body":{"nodeType":"YulBlock","src":"610:879:29","statements":[{"body":{"nodeType":"YulBlock","src":"656:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"665:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"668:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"658:6:29"},"nodeType":"YulFunctionCall","src":"658:12:29"},"nodeType":"YulExpressionStatement","src":"658:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"631:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"640:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"627:3:29"},"nodeType":"YulFunctionCall","src":"627:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"652:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"623:3:29"},"nodeType":"YulFunctionCall","src":"623:32:29"},"nodeType":"YulIf","src":"620:52:29"},{"nodeType":"YulVariableDeclaration","src":"681:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"708:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"695:12:29"},"nodeType":"YulFunctionCall","src":"695:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"685:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"727:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"745:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"749:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"741:3:29"},"nodeType":"YulFunctionCall","src":"741:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"753:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"737:3:29"},"nodeType":"YulFunctionCall","src":"737:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"731:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"782:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"791:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"794:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"784:6:29"},"nodeType":"YulFunctionCall","src":"784:12:29"},"nodeType":"YulExpressionStatement","src":"784:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"770:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"778:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"767:2:29"},"nodeType":"YulFunctionCall","src":"767:14:29"},"nodeType":"YulIf","src":"764:34:29"},{"nodeType":"YulVariableDeclaration","src":"807:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"875:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"886:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"871:3:29"},"nodeType":"YulFunctionCall","src":"871:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"895:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"833:37:29"},"nodeType":"YulFunctionCall","src":"833:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"811:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"821:8:29","type":""}]},{"nodeType":"YulAssignment","src":"912:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"922:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"912:6:29"}]},{"nodeType":"YulAssignment","src":"939:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"949:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"939:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"966:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"999:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1010:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"995:3:29"},"nodeType":"YulFunctionCall","src":"995:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"982:12:29"},"nodeType":"YulFunctionCall","src":"982:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"970:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1043:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1052:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1055:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1045:6:29"},"nodeType":"YulFunctionCall","src":"1045:12:29"},"nodeType":"YulExpressionStatement","src":"1045:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1029:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1039:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1026:2:29"},"nodeType":"YulFunctionCall","src":"1026:16:29"},"nodeType":"YulIf","src":"1023:36:29"},{"nodeType":"YulVariableDeclaration","src":"1068:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1136:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1147:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1132:3:29"},"nodeType":"YulFunctionCall","src":"1132:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1158:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"1094:37:29"},"nodeType":"YulFunctionCall","src":"1094:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"1072:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"1082:8:29","type":""}]},{"nodeType":"YulAssignment","src":"1175:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1185:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1175:6:29"}]},{"nodeType":"YulAssignment","src":"1202:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"1212:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1202:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"1229:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1262:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1273:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1258:3:29"},"nodeType":"YulFunctionCall","src":"1258:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1245:12:29"},"nodeType":"YulFunctionCall","src":"1245:32:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1233:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1306:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1315:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1318:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1308:6:29"},"nodeType":"YulFunctionCall","src":"1308:12:29"},"nodeType":"YulExpressionStatement","src":"1308:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1292:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1302:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1289:2:29"},"nodeType":"YulFunctionCall","src":"1289:16:29"},"nodeType":"YulIf","src":"1286:36:29"},{"nodeType":"YulVariableDeclaration","src":"1331:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1399:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"1410:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1395:3:29"},"nodeType":"YulFunctionCall","src":"1395:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1421:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"1357:37:29"},"nodeType":"YulFunctionCall","src":"1357:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"1335:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"1345:8:29","type":""}]},{"nodeType":"YulAssignment","src":"1438:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"1448:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1438:6:29"}]},{"nodeType":"YulAssignment","src":"1465:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"1475:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1465:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"536:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"547:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"559:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"567:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"575:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"583:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"591:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"599:6:29","type":""}],"src":"386:1103:29"},{"body":{"nodeType":"YulBlock","src":"1719:879:29","statements":[{"body":{"nodeType":"YulBlock","src":"1765:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1774:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1777:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1767:6:29"},"nodeType":"YulFunctionCall","src":"1767:12:29"},"nodeType":"YulExpressionStatement","src":"1767:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1740:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1749:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1736:3:29"},"nodeType":"YulFunctionCall","src":"1736:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1761:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1732:3:29"},"nodeType":"YulFunctionCall","src":"1732:32:29"},"nodeType":"YulIf","src":"1729:52:29"},{"nodeType":"YulVariableDeclaration","src":"1790:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1817:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1804:12:29"},"nodeType":"YulFunctionCall","src":"1804:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1794:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1836:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1854:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1858:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1850:3:29"},"nodeType":"YulFunctionCall","src":"1850:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"1862:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1846:3:29"},"nodeType":"YulFunctionCall","src":"1846:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1840:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"1891:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1900:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1903:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1893:6:29"},"nodeType":"YulFunctionCall","src":"1893:12:29"},"nodeType":"YulExpressionStatement","src":"1893:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1879:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"1887:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1876:2:29"},"nodeType":"YulFunctionCall","src":"1876:14:29"},"nodeType":"YulIf","src":"1873:34:29"},{"nodeType":"YulVariableDeclaration","src":"1916:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1984:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"1995:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1980:3:29"},"nodeType":"YulFunctionCall","src":"1980:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2004:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"1942:37:29"},"nodeType":"YulFunctionCall","src":"1942:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"1920:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"1930:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2021:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2031:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2021:6:29"}]},{"nodeType":"YulAssignment","src":"2048:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2058:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2048:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2075:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2108:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2119:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2104:3:29"},"nodeType":"YulFunctionCall","src":"2104:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2091:12:29"},"nodeType":"YulFunctionCall","src":"2091:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2079:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2152:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2161:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2164:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2154:6:29"},"nodeType":"YulFunctionCall","src":"2154:12:29"},"nodeType":"YulExpressionStatement","src":"2154:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2138:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2148:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2135:2:29"},"nodeType":"YulFunctionCall","src":"2135:16:29"},"nodeType":"YulIf","src":"2132:36:29"},{"nodeType":"YulVariableDeclaration","src":"2177:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2245:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2256:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:29"},"nodeType":"YulFunctionCall","src":"2241:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2267:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2203:37:29"},"nodeType":"YulFunctionCall","src":"2203:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2181:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2191:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2284:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"2294:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2284:6:29"}]},{"nodeType":"YulAssignment","src":"2311:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"2321:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2311:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2338:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2371:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2382:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2367:3:29"},"nodeType":"YulFunctionCall","src":"2367:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2354:12:29"},"nodeType":"YulFunctionCall","src":"2354:32:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"2342:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2415:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2424:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2427:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2417:6:29"},"nodeType":"YulFunctionCall","src":"2417:12:29"},"nodeType":"YulExpressionStatement","src":"2417:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"2401:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2411:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2398:2:29"},"nodeType":"YulFunctionCall","src":"2398:16:29"},"nodeType":"YulIf","src":"2395:36:29"},{"nodeType":"YulVariableDeclaration","src":"2440:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2508:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"2519:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2504:3:29"},"nodeType":"YulFunctionCall","src":"2504:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2530:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2466:37:29"},"nodeType":"YulFunctionCall","src":"2466:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"2444:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"2454:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2547:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"2557:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2547:6:29"}]},{"nodeType":"YulAssignment","src":"2574:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"2584:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2574:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1645:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1656:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1668:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1676:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1684:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1692:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1700:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1708:6:29","type":""}],"src":"1494:1104:29"},{"body":{"nodeType":"YulBlock","src":"2768:616:29","statements":[{"body":{"nodeType":"YulBlock","src":"2814:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2823:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2826:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2816:6:29"},"nodeType":"YulFunctionCall","src":"2816:12:29"},"nodeType":"YulExpressionStatement","src":"2816:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2789:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2798:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2785:3:29"},"nodeType":"YulFunctionCall","src":"2785:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2810:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2781:3:29"},"nodeType":"YulFunctionCall","src":"2781:32:29"},"nodeType":"YulIf","src":"2778:52:29"},{"nodeType":"YulVariableDeclaration","src":"2839:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2866:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2853:12:29"},"nodeType":"YulFunctionCall","src":"2853:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2843:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2885:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2903:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2907:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2899:3:29"},"nodeType":"YulFunctionCall","src":"2899:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2911:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2895:3:29"},"nodeType":"YulFunctionCall","src":"2895:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2889:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2940:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2949:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2952:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2942:6:29"},"nodeType":"YulFunctionCall","src":"2942:12:29"},"nodeType":"YulExpressionStatement","src":"2942:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2928:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2936:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2925:2:29"},"nodeType":"YulFunctionCall","src":"2925:14:29"},"nodeType":"YulIf","src":"2922:34:29"},{"nodeType":"YulVariableDeclaration","src":"2965:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3033:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3044:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3029:3:29"},"nodeType":"YulFunctionCall","src":"3029:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3053:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2991:37:29"},"nodeType":"YulFunctionCall","src":"2991:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2969:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2979:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3070:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"3080:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3070:6:29"}]},{"nodeType":"YulAssignment","src":"3097:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3107:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3097:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3124:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3157:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3168:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3153:3:29"},"nodeType":"YulFunctionCall","src":"3153:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3140:12:29"},"nodeType":"YulFunctionCall","src":"3140:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3128:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3201:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3210:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3213:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3203:6:29"},"nodeType":"YulFunctionCall","src":"3203:12:29"},"nodeType":"YulExpressionStatement","src":"3203:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3187:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3197:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3184:2:29"},"nodeType":"YulFunctionCall","src":"3184:16:29"},"nodeType":"YulIf","src":"3181:36:29"},{"nodeType":"YulVariableDeclaration","src":"3226:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3294:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3305:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3290:3:29"},"nodeType":"YulFunctionCall","src":"3290:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3316:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3252:37:29"},"nodeType":"YulFunctionCall","src":"3252:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3230:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3240:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3333:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3343:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3333:6:29"}]},{"nodeType":"YulAssignment","src":"3360:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3370:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3360:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2710:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2721:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2733:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2741:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2749:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2757:6:29","type":""}],"src":"2603:781:29"},{"body":{"nodeType":"YulBlock","src":"3563:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3580:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3591:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3573:6:29"},"nodeType":"YulFunctionCall","src":"3573:21:29"},"nodeType":"YulExpressionStatement","src":"3573:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3614:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3625:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3610:3:29"},"nodeType":"YulFunctionCall","src":"3610:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"3630:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3603:6:29"},"nodeType":"YulFunctionCall","src":"3603:30:29"},"nodeType":"YulExpressionStatement","src":"3603:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3653:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3664:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3649:3:29"},"nodeType":"YulFunctionCall","src":"3649:18:29"},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"3669:31:29","type":"","value":"Recovery: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3642:6:29"},"nodeType":"YulFunctionCall","src":"3642:59:29"},"nodeType":"YulExpressionStatement","src":"3642:59:29"},{"nodeType":"YulAssignment","src":"3710:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3722:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3733:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3718:3:29"},"nodeType":"YulFunctionCall","src":"3718:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3710:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3540:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3554:4:29","type":""}],"src":"3389:353:29"},{"body":{"nodeType":"YulBlock","src":"3779:95:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3796:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3803:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3808:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3799:3:29"},"nodeType":"YulFunctionCall","src":"3799:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3789:6:29"},"nodeType":"YulFunctionCall","src":"3789:31:29"},"nodeType":"YulExpressionStatement","src":"3789:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3836:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3839:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3829:6:29"},"nodeType":"YulFunctionCall","src":"3829:15:29"},"nodeType":"YulExpressionStatement","src":"3829:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3863:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3853:6:29"},"nodeType":"YulFunctionCall","src":"3853:15:29"},"nodeType":"YulExpressionStatement","src":"3853:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3747:127:29"},{"body":{"nodeType":"YulBlock","src":"3924:86:29","statements":[{"body":{"nodeType":"YulBlock","src":"3988:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3997:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4000:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3990:6:29"},"nodeType":"YulFunctionCall","src":"3990:12:29"},"nodeType":"YulExpressionStatement","src":"3990:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3947:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3958:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3973:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"3978:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3969:3:29"},"nodeType":"YulFunctionCall","src":"3969:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"3982:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3965:3:29"},"nodeType":"YulFunctionCall","src":"3965:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3954:3:29"},"nodeType":"YulFunctionCall","src":"3954:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3944:2:29"},"nodeType":"YulFunctionCall","src":"3944:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3937:6:29"},"nodeType":"YulFunctionCall","src":"3937:50:29"},"nodeType":"YulIf","src":"3934:70:29"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3913:5:29","type":""}],"src":"3879:131:29"},{"body":{"nodeType":"YulBlock","src":"4085:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"4131:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4140:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4143:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4133:6:29"},"nodeType":"YulFunctionCall","src":"4133:12:29"},"nodeType":"YulExpressionStatement","src":"4133:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4106:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4115:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4102:3:29"},"nodeType":"YulFunctionCall","src":"4102:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4127:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4098:3:29"},"nodeType":"YulFunctionCall","src":"4098:32:29"},"nodeType":"YulIf","src":"4095:52:29"},{"nodeType":"YulVariableDeclaration","src":"4156:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4182:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4169:12:29"},"nodeType":"YulFunctionCall","src":"4169:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4160:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4226:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4201:24:29"},"nodeType":"YulFunctionCall","src":"4201:31:29"},"nodeType":"YulExpressionStatement","src":"4201:31:29"},{"nodeType":"YulAssignment","src":"4241:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"4251:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4241:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4051:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4062:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4074:6:29","type":""}],"src":"4015:247:29"},{"body":{"nodeType":"YulBlock","src":"4352:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"4398:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4407:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4410:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4400:6:29"},"nodeType":"YulFunctionCall","src":"4400:12:29"},"nodeType":"YulExpressionStatement","src":"4400:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4373:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4382:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4369:3:29"},"nodeType":"YulFunctionCall","src":"4369:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4394:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4365:3:29"},"nodeType":"YulFunctionCall","src":"4365:32:29"},"nodeType":"YulIf","src":"4362:52:29"},{"nodeType":"YulVariableDeclaration","src":"4423:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4449:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4436:12:29"},"nodeType":"YulFunctionCall","src":"4436:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4427:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4493:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4468:24:29"},"nodeType":"YulFunctionCall","src":"4468:31:29"},"nodeType":"YulExpressionStatement","src":"4468:31:29"},{"nodeType":"YulAssignment","src":"4508:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"4518:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4508:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1333","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4318:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4329:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4341:6:29","type":""}],"src":"4267:262:29"},{"body":{"nodeType":"YulBlock","src":"4620:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"4666:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4675:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4678:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4668:6:29"},"nodeType":"YulFunctionCall","src":"4668:12:29"},"nodeType":"YulExpressionStatement","src":"4668:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4641:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4650:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4637:3:29"},"nodeType":"YulFunctionCall","src":"4637:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4662:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4633:3:29"},"nodeType":"YulFunctionCall","src":"4633:32:29"},"nodeType":"YulIf","src":"4630:52:29"},{"nodeType":"YulVariableDeclaration","src":"4691:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4717:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4704:12:29"},"nodeType":"YulFunctionCall","src":"4704:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4695:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4761:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4736:24:29"},"nodeType":"YulFunctionCall","src":"4736:31:29"},"nodeType":"YulExpressionStatement","src":"4736:31:29"},{"nodeType":"YulAssignment","src":"4776:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"4786:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4776:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1222","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4586:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4597:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4609:6:29","type":""}],"src":"4534:263:29"},{"body":{"nodeType":"YulBlock","src":"4959:218:29","statements":[{"nodeType":"YulAssignment","src":"4969:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4981:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4992:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4977:3:29"},"nodeType":"YulFunctionCall","src":"4977:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4969:4:29"}]},{"nodeType":"YulVariableDeclaration","src":"5004:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5022:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5027:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5018:3:29"},"nodeType":"YulFunctionCall","src":"5018:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"5031:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5014:3:29"},"nodeType":"YulFunctionCall","src":"5014:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5008:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5049:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5064:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5072:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5060:3:29"},"nodeType":"YulFunctionCall","src":"5060:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5042:6:29"},"nodeType":"YulFunctionCall","src":"5042:34:29"},"nodeType":"YulExpressionStatement","src":"5042:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5096:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5107:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5092:3:29"},"nodeType":"YulFunctionCall","src":"5092:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5116:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5124:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5112:3:29"},"nodeType":"YulFunctionCall","src":"5112:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5085:6:29"},"nodeType":"YulFunctionCall","src":"5085:43:29"},"nodeType":"YulExpressionStatement","src":"5085:43:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5148:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5159:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5144:3:29"},"nodeType":"YulFunctionCall","src":"5144:18:29"},{"name":"value2","nodeType":"YulIdentifier","src":"5164:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5137:6:29"},"nodeType":"YulFunctionCall","src":"5137:34:29"},"nodeType":"YulExpressionStatement","src":"5137:34:29"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4912:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4923:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4931:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4939:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4950:4:29","type":""}],"src":"4802:375:29"},{"body":{"nodeType":"YulBlock","src":"5260:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"5306:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5315:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5318:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5308:6:29"},"nodeType":"YulFunctionCall","src":"5308:12:29"},"nodeType":"YulExpressionStatement","src":"5308:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5281:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"5290:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5277:3:29"},"nodeType":"YulFunctionCall","src":"5277:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"5302:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5273:3:29"},"nodeType":"YulFunctionCall","src":"5273:32:29"},"nodeType":"YulIf","src":"5270:52:29"},{"nodeType":"YulVariableDeclaration","src":"5331:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5357:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5344:12:29"},"nodeType":"YulFunctionCall","src":"5344:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5335:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5401:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5376:24:29"},"nodeType":"YulFunctionCall","src":"5376:31:29"},"nodeType":"YulExpressionStatement","src":"5376:31:29"},{"nodeType":"YulAssignment","src":"5416:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"5426:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5416:6:29"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5226:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5237:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5249:6:29","type":""}],"src":"5182:255:29"},{"body":{"nodeType":"YulBlock","src":"5491:176:29","statements":[{"nodeType":"YulAssignment","src":"5501:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5513:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"5516:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5509:3:29"},"nodeType":"YulFunctionCall","src":"5509:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"5501:4:29"}]},{"body":{"nodeType":"YulBlock","src":"5550:111:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5571:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5578:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5583:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5574:3:29"},"nodeType":"YulFunctionCall","src":"5574:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5564:6:29"},"nodeType":"YulFunctionCall","src":"5564:31:29"},"nodeType":"YulExpressionStatement","src":"5564:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5615:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5618:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5608:6:29"},"nodeType":"YulFunctionCall","src":"5608:15:29"},"nodeType":"YulExpressionStatement","src":"5608:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5643:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5646:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5636:6:29"},"nodeType":"YulFunctionCall","src":"5636:15:29"},"nodeType":"YulExpressionStatement","src":"5636:15:29"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"5533:4:29"},{"name":"x","nodeType":"YulIdentifier","src":"5539:1:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5530:2:29"},"nodeType":"YulFunctionCall","src":"5530:11:29"},"nodeType":"YulIf","src":"5527:134:29"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5473:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"5476:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"5482:4:29","type":""}],"src":"5442:225:29"},{"body":{"nodeType":"YulBlock","src":"5846:174:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5863:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5874:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5856:6:29"},"nodeType":"YulFunctionCall","src":"5856:21:29"},"nodeType":"YulExpressionStatement","src":"5856:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5897:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5908:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5893:3:29"},"nodeType":"YulFunctionCall","src":"5893:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"5913:2:29","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5886:6:29"},"nodeType":"YulFunctionCall","src":"5886:30:29"},"nodeType":"YulExpressionStatement","src":"5886:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5936:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5947:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5932:3:29"},"nodeType":"YulFunctionCall","src":"5932:18:29"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"5952:26:29","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:29"},"nodeType":"YulFunctionCall","src":"5925:54:29"},"nodeType":"YulExpressionStatement","src":"5925:54:29"},{"nodeType":"YulAssignment","src":"5988:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6000:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6011:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5996:3:29"},"nodeType":"YulFunctionCall","src":"5996:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5988:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5823:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5837:4:29","type":""}],"src":"5672:348:29"},{"body":{"nodeType":"YulBlock","src":"6154:145:29","statements":[{"nodeType":"YulAssignment","src":"6164:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6176:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6187:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6172:3:29"},"nodeType":"YulFunctionCall","src":"6172:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6164:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6206:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6221:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6237:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6242:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6233:3:29"},"nodeType":"YulFunctionCall","src":"6233:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"6246:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6229:3:29"},"nodeType":"YulFunctionCall","src":"6229:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6217:3:29"},"nodeType":"YulFunctionCall","src":"6217:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6199:6:29"},"nodeType":"YulFunctionCall","src":"6199:51:29"},"nodeType":"YulExpressionStatement","src":"6199:51:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6270:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6281:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6266:3:29"},"nodeType":"YulFunctionCall","src":"6266:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"6286:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6259:6:29"},"nodeType":"YulFunctionCall","src":"6259:34:29"},"nodeType":"YulExpressionStatement","src":"6259:34:29"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6115:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6126:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6134:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6145:4:29","type":""}],"src":"6025:274:29"},{"body":{"nodeType":"YulBlock","src":"6478:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6495:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6506:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6488:6:29"},"nodeType":"YulFunctionCall","src":"6488:21:29"},"nodeType":"YulExpressionStatement","src":"6488:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6529:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6540:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6525:3:29"},"nodeType":"YulFunctionCall","src":"6525:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"6545:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6518:6:29"},"nodeType":"YulFunctionCall","src":"6518:30:29"},"nodeType":"YulExpressionStatement","src":"6518:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6568:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6579:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6564:3:29"},"nodeType":"YulFunctionCall","src":"6564:18:29"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"6584:31:29","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6557:6:29"},"nodeType":"YulFunctionCall","src":"6557:59:29"},"nodeType":"YulExpressionStatement","src":"6557:59:29"},{"nodeType":"YulAssignment","src":"6625:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6637:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6648:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6633:3:29"},"nodeType":"YulFunctionCall","src":"6633:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6625:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6455:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6469:4:29","type":""}],"src":"6304:353:29"},{"body":{"nodeType":"YulBlock","src":"6853:14:29","statements":[{"nodeType":"YulAssignment","src":"6855:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"6862:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6855:3:29"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6837:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6845:3:29","type":""}],"src":"6662:205:29"},{"body":{"nodeType":"YulBlock","src":"7046:248:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7063:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7074:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7056:6:29"},"nodeType":"YulFunctionCall","src":"7056:21:29"},"nodeType":"YulExpressionStatement","src":"7056:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7097:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7108:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7093:3:29"},"nodeType":"YulFunctionCall","src":"7093:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"7113:2:29","type":"","value":"58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7086:6:29"},"nodeType":"YulFunctionCall","src":"7086:30:29"},"nodeType":"YulExpressionStatement","src":"7086:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7136:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7147:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7132:3:29"},"nodeType":"YulFunctionCall","src":"7132:18:29"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nodeType":"YulLiteral","src":"7152:34:29","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7125:6:29"},"nodeType":"YulFunctionCall","src":"7125:62:29"},"nodeType":"YulExpressionStatement","src":"7125:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7207:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7218:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7203:3:29"},"nodeType":"YulFunctionCall","src":"7203:18:29"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nodeType":"YulLiteral","src":"7223:28:29","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7196:6:29"},"nodeType":"YulFunctionCall","src":"7196:56:29"},"nodeType":"YulExpressionStatement","src":"7196:56:29"},{"nodeType":"YulAssignment","src":"7261:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7273:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7284:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7269:3:29"},"nodeType":"YulFunctionCall","src":"7269:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7261:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7023:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7037:4:29","type":""}],"src":"6872:422:29"},{"body":{"nodeType":"YulBlock","src":"7377:199:29","statements":[{"body":{"nodeType":"YulBlock","src":"7423:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7432:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7435:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7425:6:29"},"nodeType":"YulFunctionCall","src":"7425:12:29"},"nodeType":"YulExpressionStatement","src":"7425:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7398:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7407:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7394:3:29"},"nodeType":"YulFunctionCall","src":"7394:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7419:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7390:3:29"},"nodeType":"YulFunctionCall","src":"7390:32:29"},"nodeType":"YulIf","src":"7387:52:29"},{"nodeType":"YulVariableDeclaration","src":"7448:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7467:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7461:5:29"},"nodeType":"YulFunctionCall","src":"7461:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7452:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7530:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7539:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7542:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7532:6:29"},"nodeType":"YulFunctionCall","src":"7532:12:29"},"nodeType":"YulExpressionStatement","src":"7532:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7499:5:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7520:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7513:6:29"},"nodeType":"YulFunctionCall","src":"7513:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7506:6:29"},"nodeType":"YulFunctionCall","src":"7506:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7496:2:29"},"nodeType":"YulFunctionCall","src":"7496:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7489:6:29"},"nodeType":"YulFunctionCall","src":"7489:40:29"},"nodeType":"YulIf","src":"7486:60:29"},{"nodeType":"YulAssignment","src":"7555:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"7565:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7555:6:29"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7343:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7354:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7366:6:29","type":""}],"src":"7299:277:29"},{"body":{"nodeType":"YulBlock","src":"7755:232:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7772:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7783:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7765:6:29"},"nodeType":"YulFunctionCall","src":"7765:21:29"},"nodeType":"YulExpressionStatement","src":"7765:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7806:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7817:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7802:3:29"},"nodeType":"YulFunctionCall","src":"7802:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"7822:2:29","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7795:6:29"},"nodeType":"YulFunctionCall","src":"7795:30:29"},"nodeType":"YulExpressionStatement","src":"7795:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7845:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7856:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7841:3:29"},"nodeType":"YulFunctionCall","src":"7841:18:29"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"7861:34:29","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7834:6:29"},"nodeType":"YulFunctionCall","src":"7834:62:29"},"nodeType":"YulExpressionStatement","src":"7834:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7916:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7927:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7912:3:29"},"nodeType":"YulFunctionCall","src":"7912:18:29"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"7932:12:29","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7905:6:29"},"nodeType":"YulFunctionCall","src":"7905:40:29"},"nodeType":"YulExpressionStatement","src":"7905:40:29"},{"nodeType":"YulAssignment","src":"7954:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7966:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7977:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7962:3:29"},"nodeType":"YulFunctionCall","src":"7962:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7954:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7732:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7746:4:29","type":""}],"src":"7581:406:29"},{"body":{"nodeType":"YulBlock","src":"8166:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8183:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8194:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8176:6:29"},"nodeType":"YulFunctionCall","src":"8176:21:29"},"nodeType":"YulExpressionStatement","src":"8176:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8217:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8228:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8213:3:29"},"nodeType":"YulFunctionCall","src":"8213:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"8233:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8206:6:29"},"nodeType":"YulFunctionCall","src":"8206:30:29"},"nodeType":"YulExpressionStatement","src":"8206:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8256:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8267:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8252:3:29"},"nodeType":"YulFunctionCall","src":"8252:18:29"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"8272:34:29","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8245:6:29"},"nodeType":"YulFunctionCall","src":"8245:62:29"},"nodeType":"YulExpressionStatement","src":"8245:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8327:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8338:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8323:3:29"},"nodeType":"YulFunctionCall","src":"8323:18:29"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"8343:8:29","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8316:6:29"},"nodeType":"YulFunctionCall","src":"8316:36:29"},"nodeType":"YulExpressionStatement","src":"8316:36:29"},{"nodeType":"YulAssignment","src":"8361:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8373:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8384:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8369:3:29"},"nodeType":"YulFunctionCall","src":"8369:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8361:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8143:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8157:4:29","type":""}],"src":"7992:402:29"},{"body":{"nodeType":"YulBlock","src":"8465:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8475:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"8484:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8479:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8544:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8569:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"8574:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8565:3:29"},"nodeType":"YulFunctionCall","src":"8565:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8588:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"8593:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8584:3:29"},"nodeType":"YulFunctionCall","src":"8584:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8578:5:29"},"nodeType":"YulFunctionCall","src":"8578:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8558:6:29"},"nodeType":"YulFunctionCall","src":"8558:39:29"},"nodeType":"YulExpressionStatement","src":"8558:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8505:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"8508:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8502:2:29"},"nodeType":"YulFunctionCall","src":"8502:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8516:19:29","statements":[{"nodeType":"YulAssignment","src":"8518:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8527:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"8530:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8523:3:29"},"nodeType":"YulFunctionCall","src":"8523:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8518:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"8498:3:29","statements":[]},"src":"8494:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8627:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"8632:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8623:3:29"},"nodeType":"YulFunctionCall","src":"8623:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"8641:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8616:6:29"},"nodeType":"YulFunctionCall","src":"8616:27:29"},"nodeType":"YulExpressionStatement","src":"8616:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8443:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8448:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"8453:6:29","type":""}],"src":"8399:250:29"},{"body":{"nodeType":"YulBlock","src":"8791:150:29","statements":[{"nodeType":"YulVariableDeclaration","src":"8801:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8821:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8815:5:29"},"nodeType":"YulFunctionCall","src":"8815:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8805:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8876:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"8884:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8872:3:29"},"nodeType":"YulFunctionCall","src":"8872:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"8891:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"8896:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8837:34:29"},"nodeType":"YulFunctionCall","src":"8837:66:29"},"nodeType":"YulExpressionStatement","src":"8837:66:29"},{"nodeType":"YulAssignment","src":"8912:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8923:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"8928:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8919:3:29"},"nodeType":"YulFunctionCall","src":"8919:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8912:3:29"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8767:3:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8772:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8783:3:29","type":""}],"src":"8654:287:29"},{"body":{"nodeType":"YulBlock","src":"9120:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9137:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9148:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9130:6:29"},"nodeType":"YulFunctionCall","src":"9130:21:29"},"nodeType":"YulExpressionStatement","src":"9130:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9171:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9182:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9167:3:29"},"nodeType":"YulFunctionCall","src":"9167:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"9187:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9160:6:29"},"nodeType":"YulFunctionCall","src":"9160:30:29"},"nodeType":"YulExpressionStatement","src":"9160:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9210:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9221:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9206:3:29"},"nodeType":"YulFunctionCall","src":"9206:18:29"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"9226:31:29","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9199:6:29"},"nodeType":"YulFunctionCall","src":"9199:59:29"},"nodeType":"YulExpressionStatement","src":"9199:59:29"},{"nodeType":"YulAssignment","src":"9267:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9279:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9290:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9275:3:29"},"nodeType":"YulFunctionCall","src":"9275:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9267:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9097:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9111:4:29","type":""}],"src":"8946:353:29"},{"body":{"nodeType":"YulBlock","src":"9425:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9442:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9453:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9435:6:29"},"nodeType":"YulFunctionCall","src":"9435:21:29"},"nodeType":"YulExpressionStatement","src":"9435:21:29"},{"nodeType":"YulVariableDeclaration","src":"9465:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9485:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9479:5:29"},"nodeType":"YulFunctionCall","src":"9479:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9469:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9512:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9523:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9508:3:29"},"nodeType":"YulFunctionCall","src":"9508:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"9528:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9501:6:29"},"nodeType":"YulFunctionCall","src":"9501:34:29"},"nodeType":"YulExpressionStatement","src":"9501:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9583:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"9591:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9579:3:29"},"nodeType":"YulFunctionCall","src":"9579:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9600:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9611:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9596:3:29"},"nodeType":"YulFunctionCall","src":"9596:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"9616:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"9544:34:29"},"nodeType":"YulFunctionCall","src":"9544:79:29"},"nodeType":"YulExpressionStatement","src":"9544:79:29"},{"nodeType":"YulAssignment","src":"9632:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9648:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9667:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"9675:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9663:3:29"},"nodeType":"YulFunctionCall","src":"9663:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9684:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9680:3:29"},"nodeType":"YulFunctionCall","src":"9680:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9659:3:29"},"nodeType":"YulFunctionCall","src":"9659:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9644:3:29"},"nodeType":"YulFunctionCall","src":"9644:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"9691:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9640:3:29"},"nodeType":"YulFunctionCall","src":"9640:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9632:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9394:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9405:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9416:4:29","type":""}],"src":"9304:396:29"}]},"contents":"{\n    { }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1333(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1222(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806373c8a95814610046578063c3666c361461005b578063f7ba94bd1461006e575b600080fd5b6100596100543660046107c3565b610081565b005b6100596100693660046107c3565b61015e565b61005961007c36600461085c565b610285565b610094335b61008e61031a565b9061034e565b8483811480156100a357508082145b6100c85760405162461bcd60e51b81526004016100bf906108c7565b60405180910390fd5b60005b8181146101545761014c8888838181106100e7576100e76108fe565b90506020020160208101906100fc919061092c565b85858481811061010e5761010e6108fe565b90506020020135888885818110610127576101276108fe565b905060200201602081019061013c919061092c565b6001600160a01b031691906103a9565b6001016100cb565b5050505050505050565b61016733610086565b84838114801561017657508082145b6101925760405162461bcd60e51b81526004016100bf906108c7565b60005b818114610154578585828181106101ae576101ae6108fe565b90506020020160208101906101c3919061092c565b6001600160a01b03166323b872dd308a8a858181106101e4576101e46108fe565b90506020020160208101906101f9919061092c565b87878681811061020b5761020b6108fe565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561026257600080fd5b505af1158015610276573d6000803e3d6000fd5b50505050806001019050610195565b61028e33610086565b828181146102ae5760405162461bcd60e51b81526004016100bf906108c7565b60005b8181146103125761030a8484838181106102cd576102cd6108fe565b905060200201358787848181106102e6576102e66108fe565b90506020020160208101906102fb919061092c565b6001600160a01b031690610400565b6001016102b1565b505050505050565b60008061034860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610950565b92915050565b81546001600160a01b038281169116146103a55760405162461bcd60e51b815260206004820152601860248201527727bbb732b939b434b81d103737ba103a34329037bbb732b960411b60448201526064016100bf565b5050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526103fb908490610516565b505050565b804710156104505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016100bf565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461049d576040519150601f19603f3d011682016040523d82523d6000602084013e6104a2565b606091505b50509050806103fb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b60648201526084016100bf565b600061056b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105e89092919063ffffffff16565b8051909150156103fb57808060200190518101906105899190610971565b6103fb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100bf565b60606105f784846000856105ff565b949350505050565b6060824710156106605760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100bf565b600080866001600160a01b0316858760405161067c91906109b7565b60006040518083038185875af1925050503d80600081146106b9576040519150601f19603f3d011682016040523d82523d6000602084013e6106be565b606091505b50915091506106cf878383876106da565b979650505050505050565b60608315610749578251600003610742576001600160a01b0385163b6107425760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100bf565b50816105f7565b6105f7838381511561075e5781518083602001fd5b8060405162461bcd60e51b81526004016100bf91906109d3565b60008083601f84011261078a57600080fd5b5081356001600160401b038111156107a157600080fd5b6020830191508360208260051b85010111156107bc57600080fd5b9250929050565b600080600080600080606087890312156107dc57600080fd5b86356001600160401b03808211156107f357600080fd5b6107ff8a838b01610778565b9098509650602089013591508082111561081857600080fd5b6108248a838b01610778565b9096509450604089013591508082111561083d57600080fd5b5061084a89828a01610778565b979a9699509497509295939492505050565b6000806000806040858703121561087257600080fd5b84356001600160401b038082111561088957600080fd5b61089588838901610778565b909650945060208701359150808211156108ae57600080fd5b506108bb87828801610778565b95989497509550505050565b6020808252601d908201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461092957600080fd5b50565b60006020828403121561093e57600080fd5b813561094981610914565b9392505050565b8181038181111561034857634e487b7160e01b600052601160045260246000fd5b60006020828403121561098357600080fd5b8151801515811461094957600080fd5b60005b838110156109ae578181015183820152602001610996565b50506000910152565b600082516109c9818460208701610993565b9190910192915050565b60208152600082518060208401526109f2816040850160208701610993565b601f01601f1916919091016040019291505056fea2646970667358221220ccd7cb22c3f04557f93669adfd7cf8a1ed606b1c563497c26198e16b62d4ec3964736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x7C3 JUMP JUMPDEST PUSH2 0x15E JUMP JUMPDEST PUSH2 0x59 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0x85C JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST PUSH2 0x94 CALLER JUMPDEST PUSH2 0x8E PUSH2 0x31A JUMP JUMPDEST SWAP1 PUSH2 0x34E JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xA3 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0xC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x154 JUMPI PUSH2 0x14C DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0xE7 JUMPI PUSH2 0xE7 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xFC SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x10E JUMPI PUSH2 0x10E PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x127 JUMPI PUSH2 0x127 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x13C SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0x3A9 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xCB JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x167 CALLER PUSH2 0x86 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x176 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x192 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x154 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x1AE JUMPI PUSH2 0x1AE PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x1E4 JUMPI PUSH2 0x1E4 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1F9 SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x20B JUMPI PUSH2 0x20B PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x276 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x195 JUMP JUMPDEST PUSH2 0x28E CALLER PUSH2 0x86 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x2AE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP1 PUSH2 0x8C7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x312 JUMPI PUSH2 0x30A DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x2CD JUMPI PUSH2 0x2CD PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x2E6 JUMPI PUSH2 0x2E6 PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2FB SWAP2 SWAP1 PUSH2 0x92C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x400 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x2B1 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x348 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x950 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x3A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x27BBB732B939B434B81D103737BA103A34329037BBB732B9 PUSH1 0x41 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xBF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x3FB SWAP1 DUP5 SWAP1 PUSH2 0x516 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x49D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4A2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x3FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x1958DA5C1A595B9D081B585E481A185D99481C995D995C9D1959 PUSH1 0x32 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5E8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3FB JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x589 SWAP2 SWAP1 PUSH2 0x971 JUMP JUMPDEST PUSH2 0x3FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5F7 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x5FF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x660 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x67C SWAP2 SWAP1 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x6CF DUP8 DUP4 DUP4 DUP8 PUSH2 0x6DA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x749 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x742 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x742 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xBF JUMP JUMPDEST POP DUP2 PUSH2 0x5F7 JUMP JUMPDEST PUSH2 0x5F7 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x75E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBF SWAP2 SWAP1 PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x7BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x7DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FF DUP11 DUP4 DUP12 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x818 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x824 DUP11 DUP4 DUP12 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x84A DUP10 DUP3 DUP11 ADD PUSH2 0x778 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x889 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x895 DUP9 DUP4 DUP10 ADD PUSH2 0x778 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BB DUP8 DUP3 DUP9 ADD PUSH2 0x778 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x929 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x949 DUP2 PUSH2 0x914 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x348 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x949 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9AE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x996 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x9C9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x993 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9F2 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x993 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xD7 0xCB 0x22 0xC3 CREATE GASLIMIT JUMPI 0xF9 CALLDATASIZE PUSH10 0xADFD7CF8A1ED606B1C56 CALLVALUE SWAP8 0xC2 PUSH2 0x98E1 PUSH12 0x62D4EC3964736F6C63430008 GT STOP CALLER ","sourceMap":"782:3970:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2975:512;;;;;;:::i;:::-;;:::i;:::-;;4209:541;;;;;;:::i;:::-;;:::i;1812:450::-;;;;;;:::i;:::-;;:::i;2975:512::-;3108:70;719:10:25;3165:12:14;3108:33;:31;:33::i;:::-;:56;;:70::i;:::-;3205:8;3238:23;;;:51;;;;-1:-1:-1;3265:24:14;;;3238:51;3230:93;;;;-1:-1:-1;;;3230:93:14;;;;;;;:::i;:::-;;;;;;;;;3362:9;3357:114;3378:6;3373:1;:11;3357:114;;3409:47;3432:8;;3441:1;3432:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3445:7;;3453:1;3445:10;;;;;;;:::i;:::-;;;;;;;3409:6;;3416:1;3409:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3409:22:14;;:47;:22;:47::i;:::-;3386:3;;3357:114;;;;3098:389;2975:512;;;;;;:::o;4209:541::-;4348:70;719:10:25;4405:12:14;640:96:25;4348:70:14;4445:8;4478:26;;;:55;;;;-1:-1:-1;4508:25:14;;;4478:55;4470:97;;;;-1:-1:-1;;;4470:97:14;;;;;;;:::i;:::-;4606:9;4601:133;4622:6;4617:1;:11;4601:133;;4653:9;;4663:1;4653:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4653:25:14;;4687:4;4694:8;;4703:1;4694:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4707:8;;4716:1;4707:11;;;;;;;:::i;:::-;4653:66;;-1:-1:-1;;;;;;4653:66:14;;;;;;;-1:-1:-1;;;;;5060:15:29;;;4653:66:14;;;5042:34:29;5112:15;;;;5092:18;;;5085:43;-1:-1:-1;4707:11:14;;;;;;5144:18:29;;;5137:34;4977:18;;4653:66:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:3;;;;;4601:133;;1812:450;1924:70;719:10:25;1981:12:14;640:96:25;1924:70:14;2021:8;2054:24;;;2046:66;;;;-1:-1:-1;;;2046:66:14;;;;;;;:::i;:::-;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2198:21:14;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;3540:161::-;3650:15;;-1:-1:-1;;;;;3639:26:3;;;3650:15;;3639:26;3631:63;;;;-1:-1:-1;;;3631:63:3;;5874:2:29;3631:63:3;;;5856:21:29;5913:2;5893:18;;;5886:30;-1:-1:-1;;;5932:18:29;;;5925:54;5996:18;;3631:63:3;5672:348:29;3631:63:3;3540:161;;:::o;763:205:23:-;902:58;;;-1:-1:-1;;;;;6217:32:29;;902:58:23;;;6199:51:29;6266:18;;;;6259:34;;;902:58:23;;;;;;;;;;6172:18:29;;;;902:58:23;;;;;;;;-1:-1:-1;;;;;902:58:23;-1:-1:-1;;;902:58:23;;;875:86;;895:5;;875:19;:86::i;:::-;763:205;;;:::o;2412:312:24:-;2526:6;2501:21;:31;;2493:73;;;;-1:-1:-1;;;2493:73:24;;6506:2:29;2493:73:24;;;6488:21:29;6545:2;6525:18;;;6518:30;6584:31;6564:18;;;6557:59;6633:18;;2493:73:24;6304:353:29;2493:73:24;2578:12;2596:9;-1:-1:-1;;;;;2596:14:24;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;-1:-1:-1;;;2639:78:24;;7074:2:29;2639:78:24;;;7056:21:29;7113:2;7093:18;;;7086:30;7152:34;7132:18;;;7125:62;-1:-1:-1;;;7203:18:29;;;7196:56;7269:19;;2639:78:24;6872:422:29;3747:706:23;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:23;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:23;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:23;;7783:2:29;4351:85:23;;;7765:21:29;7822:2;7802:18;;;7795:30;7861:34;7841:18;;;7834:62;-1:-1:-1;;;7912:18:29;;;7905:40;7962:19;;4351:85:23;7581:406:29;3873:223:24;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:24:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:24;;8194:2:29;5149:81:24;;;8176:21:29;8233:2;8213:18;;;8206:30;8272:34;8252:18;;;8245:62;-1:-1:-1;;;8323:18:29;;;8316:36;8369:19;;5149:81:24;7992:402:29;5149:81:24;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:24;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:24:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:24;;;7908:60;;;;-1:-1:-1;;;7908:60:24;;9148:2:29;7908:60:24;;;9130:21:29;9187:2;9167:18;;;9160:30;9226:31;9206:18;;;9199:59;9275:18;;7908:60:24;8946:353:29;7908:60:24;-1:-1:-1;8003:10:24;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:24;;;;;;;;:::i;14:367:29:-;77:8;87:6;141:3;134:4;126:6;122:17;118:27;108:55;;159:1;156;149:12;108:55;-1:-1:-1;182:20:29;;-1:-1:-1;;;;;214:30:29;;211:50;;;257:1;254;247:12;211:50;294:4;286:6;282:17;270:29;;354:3;347:4;337:6;334:1;330:14;322:6;318:27;314:38;311:47;308:67;;;371:1;368;361:12;308:67;14:367;;;;;:::o;386:1103::-;559:6;567;575;583;591;599;652:2;640:9;631:7;627:23;623:32;620:52;;;668:1;665;658:12;620:52;695:23;;-1:-1:-1;;;;;767:14:29;;;764:34;;;794:1;791;784:12;764:34;833:70;895:7;886:6;875:9;871:22;833:70;:::i;:::-;922:8;;-1:-1:-1;807:96:29;-1:-1:-1;1010:2:29;995:18;;982:32;;-1:-1:-1;1026:16:29;;;1023:36;;;1055:1;1052;1045:12;1023:36;1094:72;1158:7;1147:8;1136:9;1132:24;1094:72;:::i;:::-;1185:8;;-1:-1:-1;1068:98:29;-1:-1:-1;1273:2:29;1258:18;;1245:32;;-1:-1:-1;1289:16:29;;;1286:36;;;1318:1;1315;1308:12;1286:36;;1357:72;1421:7;1410:8;1399:9;1395:24;1357:72;:::i;:::-;386:1103;;;;-1:-1:-1;386:1103:29;;-1:-1:-1;386:1103:29;;1448:8;;386:1103;-1:-1:-1;;;386:1103:29:o;2603:781::-;2733:6;2741;2749;2757;2810:2;2798:9;2789:7;2785:23;2781:32;2778:52;;;2826:1;2823;2816:12;2778:52;2853:23;;-1:-1:-1;;;;;2925:14:29;;;2922:34;;;2952:1;2949;2942:12;2922:34;2991:70;3053:7;3044:6;3033:9;3029:22;2991:70;:::i;:::-;3080:8;;-1:-1:-1;2965:96:29;-1:-1:-1;3168:2:29;3153:18;;3140:32;;-1:-1:-1;3184:16:29;;;3181:36;;;3213:1;3210;3203:12;3181:36;;3252:72;3316:7;3305:8;3294:9;3290:24;3252:72;:::i;:::-;2603:781;;;;-1:-1:-1;3343:8:29;-1:-1:-1;;;;2603:781:29:o;3389:353::-;3591:2;3573:21;;;3630:2;3610:18;;;3603:30;3669:31;3664:2;3649:18;;3642:59;3733:2;3718:18;;3389:353::o;3747:127::-;3808:10;3803:3;3799:20;3796:1;3789:31;3839:4;3836:1;3829:15;3863:4;3860:1;3853:15;3879:131;-1:-1:-1;;;;;3954:31:29;;3944:42;;3934:70;;4000:1;3997;3990:12;3934:70;3879:131;:::o;4015:247::-;4074:6;4127:2;4115:9;4106:7;4102:23;4098:32;4095:52;;;4143:1;4140;4133:12;4095:52;4182:9;4169:23;4201:31;4226:5;4201:31;:::i;:::-;4251:5;4015:247;-1:-1:-1;;;4015:247:29:o;5442:225::-;5509:9;;;5530:11;;;5527:134;;;5583:10;5578:3;5574:20;5571:1;5564:31;5618:4;5615:1;5608:15;5646:4;5643:1;5636:15;7299:277;7366:6;7419:2;7407:9;7398:7;7394:23;7390:32;7387:52;;;7435:1;7432;7425:12;7387:52;7467:9;7461:16;7520:5;7513:13;7506:21;7499:5;7496:32;7486:60;;7542:1;7539;7532:12;8399:250;8484:1;8494:113;8508:6;8505:1;8502:13;8494:113;;;8584:11;;;8578:18;8565:11;;;8558:39;8530:2;8523:10;8494:113;;;-1:-1:-1;;8641:1:29;8623:16;;8616:27;8399:250::o;8654:287::-;8783:3;8821:6;8815:13;8837:66;8896:6;8891:3;8884:4;8876:6;8872:17;8837:66;:::i;:::-;8919:16;;;;;8654:287;-1:-1:-1;;8654:287:29:o;9304:396::-;9453:2;9442:9;9435:21;9416:4;9485:6;9479:13;9528:6;9523:2;9512:9;9508:18;9501:34;9544:79;9616:6;9611:2;9600:9;9596:18;9591:2;9583:6;9579:15;9544:79;:::i;:::-;9684:2;9663:15;-1:-1:-1;;9659:29:29;9644:45;;;;9691:2;9640:54;;9304:396;-1:-1:-1;;9304:396:29:o"},"gasEstimates":{"creation":{"codeDepositCost":"524000","executionCost":"556","totalCost":"524556"},"external":{"recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite"}},"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0x6f9d7bfb917d66343e44d9f1a89f18e407d8458cfc4e58ebe2164e51fc4e4ff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.","events":{"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"TransferBatch(address,address,address,uint256[],uint256[])":{"params":{"from":"The previous tokens owner.","ids":"The transferred tokens identifiers.","operator":"The initiator of the transfer.","to":"The new tokens owner.","values":"The amounts of tokens."}},"TransferSingle(address,address,address,uint256,uint256)":{"params":{"from":"The previous token owner.","id":"The transferred token identifier.","operator":"The initiator of the transfer.","to":"The new token owner.","value":"The amount of token."}},"URI(string,uint256)":{"params":{"id":"The token identifier.","value":"The token metadata URI."}}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approved":"True if the operator is approved, false if not."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}}},"title":"ERC1155 Multi Token Standard, basic interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"params\":{\"from\":\"The previous tokens owner.\",\"ids\":\"The transferred tokens identifiers.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new tokens owner.\",\"values\":\"The amounts of tokens.\"}},\"TransferSingle(address,address,address,uint256,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"id\":\"The transferred token identifier.\",\"operator\":\"The initiator of the transfer.\",\"to\":\"The new token owner.\",\"value\":\"The amount of token.\"}},\"URI(string,uint256)\":{\"params\":{\"id\":\"The token identifier.\",\"value\":\"The token metadata URI.\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approved\":\"True if the operator is approved, false if not.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}}},\"title\":\"ERC1155 Multi Token Standard, basic interface.\",\"version\":1},\"userdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"notice\":\"Emitted when a batch of tokens is transferred.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when some token is transferred.\"},\"URI(string,uint256)\":{\"notice\":\"Emitted optionally when a token metadata URI is set.\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"TransferBatch(address,address,address,uint256[],uint256[])":{"notice":"Emitted when a batch of tokens is transferred."},"TransferSingle(address,address,address,uint256,uint256)":{"notice":"Emitted when some token is transferred."},"URI(string,uint256)":{"notice":"Emitted optionally when a token metadata URI is set."}},"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@openzeppelin/contracts-4.9.5/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-4.9.5/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.9.5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220863da672f58e0be3bd7f818f4805fd87b79628e3552cdc541ac878609a5cd3fc64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 RETURNDATASIZE 0xA6 PUSH19 0xF58E0BE3BD7F818F4805FD87B79628E3552CDC SLOAD BYTE 0xC8 PUSH25 0x609A5CD3FC64736F6C63430008110033000000000000000000 ","sourceMap":"707:3748:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220863da672f58e0be3bd7f818f4805fd87b79628e3552cdc541ac878609a5cd3fc64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 RETURNDATASIZE 0xA6 PUSH19 0xF58E0BE3BD7F818F4805FD87B79628E3552CDC SLOAD BYTE 0xC8 PUSH25 0x609A5CD3FC64736F6C63430008110033000000000000000000 ","sourceMap":"707:3748:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8475536da383a06c8df78b8e919976ce98f56ee00d5e57ddba0db92a8b1496d64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 SELFBALANCE SSTORE CALLDATASIZE 0xDA CODESIZE GASPRICE MOD 0xC8 0xDF PUSH25 0xB8E919976CE98F56EE00D5E57DDBA0DB92A8B1496D64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"194:8964:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a8475536da383a06c8df78b8e919976ce98f56ee00d5e57ddba0db92a8b1496d64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA8 SELFBALANCE SSTORE CALLDATASIZE 0xDA CODESIZE GASPRICE MOD 0xC8 0xDF PUSH25 0xB8E919976CE98F56EE00D5E57DDBA0DB92A8B1496D64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"194:8964:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220122d606cb37939daea76e44e0c9ef2a2aa4dae0b6c900c505ffd4412770fd89664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0x2D PUSH1 0x6C 0xB3 PUSH26 0x39DAEA76E44E0C9EF2A2AA4DAE0B6C900C505FFD4412770FD896 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1279:1391:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220122d606cb37939daea76e44e0c9ef2a2aa4dae0b6c900c505ffd4412770fd89664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0x2D PUSH1 0x6C 0xB3 PUSH26 0x39DAEA76E44E0C9EF2A2AA4DAE0B6C900C505FFD4412770FD896 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1279:1391:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/escrow/TokenEscrow.sol":{"TokenEscrow":{"abi":[{"inputs":[{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"},{"internalType":"contract IERC1155","name":"inventory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"BalanceExceeded","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidInventory","type":"error"},{"inputs":[],"name":"UnsupportedMethod","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"DepositTokens","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"WithdrawTokens","type":"event"},{"inputs":[],"name":"TOKEN_INVENTORY","outputs":[{"internalType":"contract IERC1155","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"escrowedNFTs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"account":"The address of the token holder","id":"The ID of the token"},"returns":{"_0":"balance The amount of token escrowed held by the token holder correponding to the token ID"}},"constructor":{"details":"Throws if the _inventory address is a zero address.ContractOwnership is required to initiate TokenRecovery","params":{"forwarderRegistry":"The forwarder registry contract information","inventory":"The inventory contract address"}},"deposit(uint256[],uint256[])":{"details":"Batch transfer tokens from the sender to this contract","params":{"ids":"An array containing ids of each token being transferred (corresponds to orbTypes)","values":"An array containing amounts of each token being transferred (corresponds to quantities)"}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if the sender is not in the inventory.Updates the escrowedTokens mapping.Reverts if the updated token balance is greater than 1Emits a {DepositTokens} event.","params":{"from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (corresponds to orbTypes)","values":"An array containing amounts of each token being transferred (corresponds to quantities)"},"returns":{"_0":"selector The function selector"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Reverts if this method has been triggered."},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw(uint256[],uint256[])":{"details":"Reverts if the array length of ids & values does not match.Reverts if the sender does not have enough balance.Updates the escrowedTokens mapping.Emits {WithdrawTokens} events.Transfers the token from this contract to the sender's address","params":{"ids":"An array containing ids of each token being transferred (corresponds to orbTypes)","values":"An array containing amounts of each token being transferred (corresponds to quantities)"}}},"title":"TokenEscrow contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2170":{"entryPoint":null,"id":2170,"parameterSlots":2,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_472":{"entryPoint":null,"id":472,"parameterSlots":1,"returnSlots":0},"@_520":{"entryPoint":null,"id":520,"parameterSlots":1,"returnSlots":0},"@_978":{"entryPoint":null,"id":978,"parameterSlots":0,"returnSlots":0},"@constructorInit_200":{"entryPoint":283,"id":200,"parameterSlots":2,"returnSlots":0},"@layout_306":{"entryPoint":229,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":409,"id":448,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_402":{"entryPoint":457,"id":402,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IForwarderRegistry_$645t_contract$_IERC1155_$1098_fromMemory":{"entryPoint":626,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":689,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IForwarderRegistry":{"entryPoint":601,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1230:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"79:86:29","statements":[{"body":{"nodeType":"YulBlock","src":"143:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"152:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"145:6:29"},"nodeType":"YulFunctionCall","src":"145:12:29"},"nodeType":"YulExpressionStatement","src":"145:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"102:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"113:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"128:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"133:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"124:3:29"},"nodeType":"YulFunctionCall","src":"124:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"137:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"120:3:29"},"nodeType":"YulFunctionCall","src":"120:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"109:3:29"},"nodeType":"YulFunctionCall","src":"109:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"99:2:29"},"nodeType":"YulFunctionCall","src":"99:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"92:6:29"},"nodeType":"YulFunctionCall","src":"92:50:29"},"nodeType":"YulIf","src":"89:70:29"}]},"name":"validator_revert_contract_IForwarderRegistry","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"68:5:29","type":""}],"src":"14:151:29"},{"body":{"nodeType":"YulBlock","src":"311:327:29","statements":[{"body":{"nodeType":"YulBlock","src":"357:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"366:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"369:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"359:6:29"},"nodeType":"YulFunctionCall","src":"359:12:29"},"nodeType":"YulExpressionStatement","src":"359:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"332:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"341:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"328:3:29"},"nodeType":"YulFunctionCall","src":"328:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"353:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"324:3:29"},"nodeType":"YulFunctionCall","src":"324:32:29"},"nodeType":"YulIf","src":"321:52:29"},{"nodeType":"YulVariableDeclaration","src":"382:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"401:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"395:5:29"},"nodeType":"YulFunctionCall","src":"395:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"386:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"465:5:29"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nodeType":"YulIdentifier","src":"420:44:29"},"nodeType":"YulFunctionCall","src":"420:51:29"},"nodeType":"YulExpressionStatement","src":"420:51:29"},{"nodeType":"YulAssignment","src":"480:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"490:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"480:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"504:40:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"529:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"540:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:29"},"nodeType":"YulFunctionCall","src":"525:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"519:5:29"},"nodeType":"YulFunctionCall","src":"519:25:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"508:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"598:7:29"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nodeType":"YulIdentifier","src":"553:44:29"},"nodeType":"YulFunctionCall","src":"553:53:29"},"nodeType":"YulExpressionStatement","src":"553:53:29"},{"nodeType":"YulAssignment","src":"615:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"625:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"615:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IForwarderRegistry_$645t_contract$_IERC1155_$1098_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"269:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"280:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"292:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"300:6:29","type":""}],"src":"170:468:29"},{"body":{"nodeType":"YulBlock","src":"692:176:29","statements":[{"nodeType":"YulAssignment","src":"702:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"714:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"717:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"710:3:29"},"nodeType":"YulFunctionCall","src":"710:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"702:4:29"}]},{"body":{"nodeType":"YulBlock","src":"751:111:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"772:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"779:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"784:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"775:3:29"},"nodeType":"YulFunctionCall","src":"775:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"765:6:29"},"nodeType":"YulFunctionCall","src":"765:31:29"},"nodeType":"YulExpressionStatement","src":"765:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"816:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"819:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:29"},"nodeType":"YulFunctionCall","src":"809:15:29"},"nodeType":"YulExpressionStatement","src":"809:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"844:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"847:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"837:6:29"},"nodeType":"YulFunctionCall","src":"837:15:29"},"nodeType":"YulExpressionStatement","src":"837:15:29"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"734:4:29"},{"name":"x","nodeType":"YulIdentifier","src":"740:1:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"731:2:29"},"nodeType":"YulFunctionCall","src":"731:11:29"},"nodeType":"YulIf","src":"728:134:29"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"674:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"677:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"683:4:29","type":""}],"src":"643:225:29"},{"body":{"nodeType":"YulBlock","src":"1047:181:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1064:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1075:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1057:6:29"},"nodeType":"YulFunctionCall","src":"1057:21:29"},"nodeType":"YulExpressionStatement","src":"1057:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1098:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1109:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1094:3:29"},"nodeType":"YulFunctionCall","src":"1094:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"1114:2:29","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1087:6:29"},"nodeType":"YulFunctionCall","src":"1087:30:29"},"nodeType":"YulExpressionStatement","src":"1087:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1137:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1148:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1133:3:29"},"nodeType":"YulFunctionCall","src":"1133:18:29"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"1153:33:29","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1126:6:29"},"nodeType":"YulFunctionCall","src":"1126:61:29"},"nodeType":"YulExpressionStatement","src":"1126:61:29"},{"nodeType":"YulAssignment","src":"1196:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1208:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1219:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1204:3:29"},"nodeType":"YulFunctionCall","src":"1204:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1196:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1024:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1038:4:29","type":""}],"src":"873:355:29"}]},"contents":"{\n    { }\n    function validator_revert_contract_IForwarderRegistry(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IForwarderRegistry_$645t_contract$_IERC1155_$1098_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IForwarderRegistry(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IForwarderRegistry(value_1)\n        value1 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x19A0 CODESIZE SUB DUP1 PUSH3 0x19A0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x272 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x71 DUP2 PUSH3 0x5D PUSH3 0xE5 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x9A8 OR SWAP1 SHR JUMP JUMPDEST PUSH3 0x11B PUSH1 0x20 SHL PUSH3 0x9D6 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0xAA PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x95 PUSH3 0x199 PUSH1 0x20 SHL PUSH3 0xA3A OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1C9 PUSH1 0x20 SHL PUSH3 0xA68 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6524D08B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE POP PUSH3 0x2D3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x115 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x2B1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x172 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x195 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x95 PUSH3 0x199 PUSH1 0x20 SHL PUSH3 0xA3A OR PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x115 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x2B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x22B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x293 DUP2 PUSH3 0x259 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x2A6 DUP2 PUSH3 0x259 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x115 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x167D PUSH3 0x323 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x151 ADD MSTORE DUP2 DUP2 PUSH2 0x516 ADD MSTORE DUP2 DUP2 PUSH2 0x5BA ADD MSTORE PUSH2 0x84F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x114 ADD MSTORE DUP2 DUP2 PUSH2 0x183 ADD MSTORE DUP2 DUP2 PUSH2 0xDA0 ADD MSTORE PUSH2 0xDF5 ADD MSTORE PUSH2 0x167D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x4DFDE97A EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x81C197ED EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0xF223885A EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF997659A EQ PUSH2 0x26E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0xD7 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E8 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x1114 JUMP JUMPDEST PUSH2 0x2BF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x134 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x181 CALLDATASIZE PUSH1 0x4 PUSH2 0x1145 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x11AD JUMP JUMPDEST PUSH2 0x2D3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C6 PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x3B6 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x58E JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F2 JUMP JUMPDEST PUSH2 0x5AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x11AD JUMP JUMPDEST PUSH2 0x724 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x230 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x84D JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B0 JUMP JUMPDEST PUSH2 0x8D8 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x1145 JUMP JUMPDEST PUSH2 0x8F3 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x911 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x10E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B9 DUP3 PUSH2 0x2CD PUSH2 0xA3A JUMP JUMPDEST SWAP1 PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x2DE PUSH2 0xB53 JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0x9A8 JUMP JUMPDEST SWAP1 PUSH2 0xB5D JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x2FB JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3AC JUMPI PUSH2 0x3A4 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x33F JUMPI PUSH2 0x33F PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x354 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x37F JUMPI PUSH2 0x37F PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x394 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0xB89 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x323 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x3D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3E0 PUSH2 0xB53 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x401 JUMPI PUSH2 0x401 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x41E JUMPI PUSH2 0x41E PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD SWAP3 POP POP DUP2 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x317 JUMP JUMPDEST PUSH2 0x47F DUP3 DUP3 PUSH2 0x147C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP DUP2 SWAP1 POP PUSH2 0x4B3 DUP2 PUSH2 0x148F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3E5 JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x651C6D84833866465BF050FEA9FB84DC59FAF4FC13D4607553B539E31E53FF02 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x4F7 SWAP3 SWAP2 SWAP1 PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x1759616B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2EB2C2D6 SWAP1 PUSH2 0x555 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A8 PUSH2 0x59B PUSH2 0x9A8 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6524D08B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x6CB JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x617 JUMPI PUSH2 0x617 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x634 JUMPI PUSH2 0x634 PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x667 SWAP5 SWAP2 SWAP1 SWAP3 MUL ADD CALLDATALOAD SWAP2 POP PUSH2 0x154D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x695 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF4DCF56B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SSTORE DUP1 PUSH2 0x6C3 DUP2 PUSH2 0x148F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5FB JUMP JUMPDEST POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xD4960FB57883D065FB41B7F993F9BE3105AF91FE2B595A398457E1FF226CDC50 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x707 SWAP3 SWAP2 SWAP1 PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x72F PUSH2 0x2DE PUSH2 0xB53 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x73E JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x75A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3AC JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x776 JUMPI PUSH2 0x776 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x78B SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x7AC JUMPI PUSH2 0x7AC PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7C1 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x7D3 JUMPI PUSH2 0x7D3 PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x83E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x75D JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2EB2C2D6 PUSH2 0x884 PUSH2 0xB53 JUMP JUMPDEST ADDRESS DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8AA SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH4 0x36A2F63 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x90E PUSH2 0x8FE PUSH2 0xB53 JUMP JUMPDEST DUP3 PUSH2 0x907 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBE0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x91C PUSH2 0x2DE PUSH2 0xB53 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x93C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9A0 JUMPI PUSH2 0x998 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x95B JUMPI PUSH2 0x95B PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x974 JUMPI PUSH2 0x974 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x989 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x93F JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B9 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x147C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xA1A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1628 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0xA36 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0xA2F PUSH2 0xA3A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA68 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B9 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x147C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xAC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB12 JUMPI POP PUSH1 0x0 PUSH2 0x2B9 JUMP JUMPDEST PUSH4 0xFE003659 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB32 JUMPI POP PUSH1 0x1 PUSH2 0x2B9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A8 PUSH2 0xD7B JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1560 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xBDB SWAP1 DUP5 SWAP1 PUSH2 0xE71 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC0E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1560 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC5F JUMPI DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1628 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xCB5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD02 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x1958DA5C1A595B9D081B585E481A185D99481C995D995C9D1959 PUSH1 0x32 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD8B JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD95 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xE60 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x4494D465 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE60 SWAP2 SWAP1 PUSH2 0x1592 JUMP JUMPDEST ISZERO PUSH2 0xE6A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC6 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF43 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xBDB JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xEE4 SWAP2 SWAP1 PUSH2 0x1592 JUMP JUMPDEST PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF52 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xF5A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xFBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xFD7 SWAP2 SWAP1 PUSH2 0x15D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x102A DUP8 DUP4 DUP4 DUP8 PUSH2 0x1035 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x10A4 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x109D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x109D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x317 JUMP JUMPDEST POP DUP2 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0xF52 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x10B9 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x15F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1106 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x113E DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x118B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x11C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x11DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11E9 DUP11 DUP4 DUP12 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x120E DUP11 DUP4 DUP12 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1234 DUP10 DUP3 DUP11 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x125C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127F DUP9 DUP4 DUP10 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A5 DUP8 DUP3 DUP9 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x130E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x1319 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x1329 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1351 DUP13 DUP4 DUP14 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1376 DUP13 DUP4 DUP14 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x138F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139C DUP12 DUP3 DUP13 ADD PUSH2 0x12B1 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x13D4 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x13E4 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x140D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1234 DUP10 DUP3 DUP11 ADD PUSH2 0x12B1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2B9 JUMPI PUSH2 0x2B9 PUSH2 0x1466 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x14A1 JUMPI PUSH2 0x14A1 PUSH2 0x1466 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x14C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xF52 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x151B SWAP1 DUP4 ADD DUP7 DUP9 PUSH2 0x14A8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x152E DUP2 DUP6 DUP8 PUSH2 0x14A8 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2B9 JUMPI PUSH2 0x2B9 PUSH2 0x1466 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x27BBB732B939B434B81D103737BA103A34329037BBB732B9 PUSH1 0x41 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x15B7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x15EA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x15B4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1613 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x15B4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID DUP12 0xE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E0A26469706673582212206FD33C765D8850681F PUSH12 0x6AB5A914A6B84A749A0E4552 PUSH25 0xD86CE166D0ED6264064736F6C634300081100330000000000 ","sourceMap":"1146:5631:27:-:0;;;2278:285;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;620:38:8;;;;2410:10:27;1007:63:0;2410:10:27;1007:33:0;:31;;;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;963:114;779:103:15;-1:-1:-1;;;877:4:15;779:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:103;;;;;:::i;:::-;-1:-1:-1;;;;;2436:32:27;::::2;2432:88;;2491:18;;-1:-1:-1::0;;;2491:18:27::2;;;;;;;;;;;2432:88;-1:-1:-1::0;;;;;2529:27:27::2;;::::0;-1:-1:-1;1146:5631:27;;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;;;;;:34;;:::i;:89::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;1075:2:29;774:79:6;;;1057:21:29;1114:2;1094:18;;;1087:30;1153:33;1133:18;;;1126:61;1204:18;;774:79:6;;;;;;;;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;14:151:29:-;-1:-1:-1;;;;;109:31:29;;99:42;;89:70;;155:1;152;145:12;89:70;14:151;:::o;170:468::-;292:6;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;401:9;395:16;420:51;465:5;420:51;:::i;:::-;540:2;525:18;;519:25;490:5;;-1:-1:-1;553:53:29;519:25;553:53;:::i;:::-;625:7;615:17;;;170:468;;;;;:::o;643:225::-;710:9;;;731:11;;;728:134;;;784:10;779:3;775:20;772:1;765:31;819:4;816:1;809:15;847:4;844:1;837:15;873:355;1146:5631:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@TOKEN_INVENTORY_2127":{"entryPoint":null,"id":2127,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1649":{"entryPoint":3697,"id":1649,"parameterSlots":2,"returnSlots":0},"@_msgSender_2431":{"entryPoint":2899,"id":2431,"parameterSlots":0,"returnSlots":1},"@_msgSender_570":{"entryPoint":3451,"id":570,"parameterSlots":0,"returnSlots":1},"@_revert_1979":{"entryPoint":null,"id":1979,"parameterSlots":2,"returnSlots":0},"@balanceOf_2187":{"entryPoint":662,"id":2187,"parameterSlots":2,"returnSlots":1},"@constructorInit_200":{"entryPoint":2518,"id":200,"parameterSlots":2,"returnSlots":0},"@deposit_2212":{"entryPoint":2125,"id":2212,"parameterSlots":4,"returnSlots":0},"@enforceIsContractOwner_294":{"entryPoint":2909,"id":294,"parameterSlots":2,"returnSlots":0},"@escrowedNFTs_2134":{"entryPoint":null,"id":2134,"parameterSlots":0,"returnSlots":0},"@forwarderRegistry_481":{"entryPoint":null,"id":481,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1804":{"entryPoint":3930,"id":1804,"parameterSlots":4,"returnSlots":1},"@functionCall_1740":{"entryPoint":3907,"id":1740,"parameterSlots":3,"returnSlots":1},"@isContract_1668":{"entryPoint":null,"id":1668,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_498":{"entryPoint":null,"id":498,"parameterSlots":1,"returnSlots":1},"@layout_306":{"entryPoint":2472,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":2618,"id":448,"parameterSlots":0,"returnSlots":1},"@msgSender_656":{"entryPoint":null,"id":656,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_2418":{"entryPoint":1453,"id":2418,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_2329":{"entryPoint":2264,"id":2329,"parameterSlots":6,"returnSlots":1},"@owner_276":{"entryPoint":null,"id":276,"parameterSlots":1,"returnSlots":1},"@owner_63":{"entryPoint":1422,"id":63,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_873":{"entryPoint":723,"id":873,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_943":{"entryPoint":1828,"id":943,"parameterSlots":6,"returnSlots":0},"@recoverETH_807":{"entryPoint":2321,"id":807,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1401":{"entryPoint":2953,"id":1401,"parameterSlots":3,"returnSlots":0},"@sendValue_1702":{"entryPoint":3173,"id":1702,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_402":{"entryPoint":2664,"id":402,"parameterSlots":3,"returnSlots":0},"@supportsInterface_337":{"entryPoint":703,"id":337,"parameterSlots":1,"returnSlots":1},"@supportsInterface_436":{"entryPoint":2803,"id":436,"parameterSlots":2,"returnSlots":1},"@transferOwnership_263":{"entryPoint":3040,"id":263,"parameterSlots":3,"returnSlots":0},"@transferOwnership_81":{"entryPoint":2291,"id":81,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1935":{"entryPoint":4149,"id":1935,"parameterSlots":4,"returnSlots":1},"@withdraw_2309":{"entryPoint":950,"id":2309,"parameterSlots":4,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":4450,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":4785,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4421,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":4850,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":5040,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4328,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4525,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4678,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":5522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":4372,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1333":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1222":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5288,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5592,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5358,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5338,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155_$1098__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5145,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5472,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5453,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5244,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5556,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":5263,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5222,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5200,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4307,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17646:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:29","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:29"},"nodeType":"YulFunctionCall","src":"125:12:29"},"nodeType":"YulExpressionStatement","src":"125:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:29"},"nodeType":"YulFunctionCall","src":"104:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:29"},"nodeType":"YulFunctionCall","src":"100:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:29"},"nodeType":"YulFunctionCall","src":"89:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:29"},"nodeType":"YulFunctionCall","src":"79:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:29"},"nodeType":"YulFunctionCall","src":"72:50:29"},"nodeType":"YulIf","src":"69:70:29"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:29","type":""}],"src":"14:131:29"},{"body":{"nodeType":"YulBlock","src":"237:228:29","statements":[{"body":{"nodeType":"YulBlock","src":"283:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"292:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"295:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"285:6:29"},"nodeType":"YulFunctionCall","src":"285:12:29"},"nodeType":"YulExpressionStatement","src":"285:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"258:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"267:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"254:3:29"},"nodeType":"YulFunctionCall","src":"254:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"279:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"250:3:29"},"nodeType":"YulFunctionCall","src":"250:32:29"},"nodeType":"YulIf","src":"247:52:29"},{"nodeType":"YulVariableDeclaration","src":"308:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"321:12:29"},"nodeType":"YulFunctionCall","src":"321:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"312:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"353:24:29"},"nodeType":"YulFunctionCall","src":"353:31:29"},"nodeType":"YulExpressionStatement","src":"353:31:29"},{"nodeType":"YulAssignment","src":"393:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"403:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"393:6:29"}]},{"nodeType":"YulAssignment","src":"417:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"444:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:29"},"nodeType":"YulFunctionCall","src":"440:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"427:12:29"},"nodeType":"YulFunctionCall","src":"427:32:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"417:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"195:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"206:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"218:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"226:6:29","type":""}],"src":"150:315:29"},{"body":{"nodeType":"YulBlock","src":"571:76:29","statements":[{"nodeType":"YulAssignment","src":"581:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:29"},"nodeType":"YulFunctionCall","src":"589:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"581:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"623:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"634:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"616:6:29"},"nodeType":"YulFunctionCall","src":"616:25:29"},"nodeType":"YulExpressionStatement","src":"616:25:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"540:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"551:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"562:4:29","type":""}],"src":"470:177:29"},{"body":{"nodeType":"YulBlock","src":"721:217:29","statements":[{"body":{"nodeType":"YulBlock","src":"767:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"776:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"779:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"769:6:29"},"nodeType":"YulFunctionCall","src":"769:12:29"},"nodeType":"YulExpressionStatement","src":"769:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"742:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"751:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"738:3:29"},"nodeType":"YulFunctionCall","src":"738:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"763:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"734:3:29"},"nodeType":"YulFunctionCall","src":"734:32:29"},"nodeType":"YulIf","src":"731:52:29"},{"nodeType":"YulVariableDeclaration","src":"792:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"818:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"805:12:29"},"nodeType":"YulFunctionCall","src":"805:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"796:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"892:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"901:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"904:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"894:6:29"},"nodeType":"YulFunctionCall","src":"894:12:29"},"nodeType":"YulExpressionStatement","src":"894:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"850:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"861:5:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"872:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"877:10:29","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"868:3:29"},"nodeType":"YulFunctionCall","src":"868:20:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"857:3:29"},"nodeType":"YulFunctionCall","src":"857:32:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"847:2:29"},"nodeType":"YulFunctionCall","src":"847:43:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"840:6:29"},"nodeType":"YulFunctionCall","src":"840:51:29"},"nodeType":"YulIf","src":"837:71:29"},{"nodeType":"YulAssignment","src":"917:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"927:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"917:6:29"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"687:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"698:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"710:6:29","type":""}],"src":"652:286:29"},{"body":{"nodeType":"YulBlock","src":"1038:92:29","statements":[{"nodeType":"YulAssignment","src":"1048:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1060:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1071:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1056:3:29"},"nodeType":"YulFunctionCall","src":"1056:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1048:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1090:9:29"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1115:6:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1108:6:29"},"nodeType":"YulFunctionCall","src":"1108:14:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1101:6:29"},"nodeType":"YulFunctionCall","src":"1101:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1083:6:29"},"nodeType":"YulFunctionCall","src":"1083:41:29"},"nodeType":"YulExpressionStatement","src":"1083:41:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1007:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1018:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:29","type":""}],"src":"943:187:29"},{"body":{"nodeType":"YulBlock","src":"1262:102:29","statements":[{"nodeType":"YulAssignment","src":"1272:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1284:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1295:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1280:3:29"},"nodeType":"YulFunctionCall","src":"1280:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1272:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1314:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1329:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1345:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1350:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1341:3:29"},"nodeType":"YulFunctionCall","src":"1341:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"1354:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1337:3:29"},"nodeType":"YulFunctionCall","src":"1337:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1325:3:29"},"nodeType":"YulFunctionCall","src":"1325:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1307:6:29"},"nodeType":"YulFunctionCall","src":"1307:51:29"},"nodeType":"YulExpressionStatement","src":"1307:51:29"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1231:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1242:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1253:4:29","type":""}],"src":"1135:229:29"},{"body":{"nodeType":"YulBlock","src":"1487:102:29","statements":[{"nodeType":"YulAssignment","src":"1497:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1509:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1520:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1505:3:29"},"nodeType":"YulFunctionCall","src":"1505:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1497:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1539:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1554:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1570:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1575:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1566:3:29"},"nodeType":"YulFunctionCall","src":"1566:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"1579:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1562:3:29"},"nodeType":"YulFunctionCall","src":"1562:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1550:3:29"},"nodeType":"YulFunctionCall","src":"1550:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1532:6:29"},"nodeType":"YulFunctionCall","src":"1532:51:29"},"nodeType":"YulExpressionStatement","src":"1532:51:29"}]},"name":"abi_encode_tuple_t_contract$_IERC1155_$1098__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1456:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1467:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1478:4:29","type":""}],"src":"1369:220:29"},{"body":{"nodeType":"YulBlock","src":"1664:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"1710:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1719:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1712:6:29"},"nodeType":"YulFunctionCall","src":"1712:12:29"},"nodeType":"YulExpressionStatement","src":"1712:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1685:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1694:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1681:3:29"},"nodeType":"YulFunctionCall","src":"1681:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1706:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1677:3:29"},"nodeType":"YulFunctionCall","src":"1677:32:29"},"nodeType":"YulIf","src":"1674:52:29"},{"nodeType":"YulVariableDeclaration","src":"1735:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1761:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1748:12:29"},"nodeType":"YulFunctionCall","src":"1748:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1739:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1805:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1780:24:29"},"nodeType":"YulFunctionCall","src":"1780:31:29"},"nodeType":"YulExpressionStatement","src":"1780:31:29"},{"nodeType":"YulAssignment","src":"1820:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"1830:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1820:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1630:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1641:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1653:6:29","type":""}],"src":"1594:247:29"},{"body":{"nodeType":"YulBlock","src":"1930:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"1979:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1988:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1991:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1981:6:29"},"nodeType":"YulFunctionCall","src":"1981:12:29"},"nodeType":"YulExpressionStatement","src":"1981:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1958:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1966:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1954:3:29"},"nodeType":"YulFunctionCall","src":"1954:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1973:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1950:3:29"},"nodeType":"YulFunctionCall","src":"1950:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1943:6:29"},"nodeType":"YulFunctionCall","src":"1943:35:29"},"nodeType":"YulIf","src":"1940:55:29"},{"nodeType":"YulAssignment","src":"2004:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2027:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2014:12:29"},"nodeType":"YulFunctionCall","src":"2014:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2004:6:29"}]},{"body":{"nodeType":"YulBlock","src":"2077:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2086:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2089:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2079:6:29"},"nodeType":"YulFunctionCall","src":"2079:12:29"},"nodeType":"YulExpressionStatement","src":"2079:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2049:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2065:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2069:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2061:3:29"},"nodeType":"YulFunctionCall","src":"2061:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2073:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2057:3:29"},"nodeType":"YulFunctionCall","src":"2057:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2046:2:29"},"nodeType":"YulFunctionCall","src":"2046:30:29"},"nodeType":"YulIf","src":"2043:50:29"},{"nodeType":"YulAssignment","src":"2102:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2118:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2126:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2114:3:29"},"nodeType":"YulFunctionCall","src":"2114:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2102:8:29"}]},{"body":{"nodeType":"YulBlock","src":"2191:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2200:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2203:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2193:6:29"},"nodeType":"YulFunctionCall","src":"2193:12:29"},"nodeType":"YulExpressionStatement","src":"2193:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2154:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2166:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2169:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2162:3:29"},"nodeType":"YulFunctionCall","src":"2162:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2150:3:29"},"nodeType":"YulFunctionCall","src":"2150:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"2179:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2146:3:29"},"nodeType":"YulFunctionCall","src":"2146:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"2186:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2143:2:29"},"nodeType":"YulFunctionCall","src":"2143:47:29"},"nodeType":"YulIf","src":"2140:67:29"}]},"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1893:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1901:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1909:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"1919:6:29","type":""}],"src":"1846:367:29"},{"body":{"nodeType":"YulBlock","src":"2442:879:29","statements":[{"body":{"nodeType":"YulBlock","src":"2488:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2497:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2500:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2490:6:29"},"nodeType":"YulFunctionCall","src":"2490:12:29"},"nodeType":"YulExpressionStatement","src":"2490:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2463:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2472:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2459:3:29"},"nodeType":"YulFunctionCall","src":"2459:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2484:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2455:3:29"},"nodeType":"YulFunctionCall","src":"2455:32:29"},"nodeType":"YulIf","src":"2452:52:29"},{"nodeType":"YulVariableDeclaration","src":"2513:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2540:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2527:12:29"},"nodeType":"YulFunctionCall","src":"2527:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2517:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2559:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2577:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2581:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2573:3:29"},"nodeType":"YulFunctionCall","src":"2573:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2585:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2569:3:29"},"nodeType":"YulFunctionCall","src":"2569:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2563:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2614:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2623:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2626:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2616:6:29"},"nodeType":"YulFunctionCall","src":"2616:12:29"},"nodeType":"YulExpressionStatement","src":"2616:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2602:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2610:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2599:2:29"},"nodeType":"YulFunctionCall","src":"2599:14:29"},"nodeType":"YulIf","src":"2596:34:29"},{"nodeType":"YulVariableDeclaration","src":"2639:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2707:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2718:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2703:3:29"},"nodeType":"YulFunctionCall","src":"2703:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2727:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2665:37:29"},"nodeType":"YulFunctionCall","src":"2665:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2643:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2653:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2744:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2754:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2744:6:29"}]},{"nodeType":"YulAssignment","src":"2771:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2781:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2771:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2798:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2831:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2842:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2827:3:29"},"nodeType":"YulFunctionCall","src":"2827:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2814:12:29"},"nodeType":"YulFunctionCall","src":"2814:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2802:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2875:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2884:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2887:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2877:6:29"},"nodeType":"YulFunctionCall","src":"2877:12:29"},"nodeType":"YulExpressionStatement","src":"2877:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2861:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2871:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2858:2:29"},"nodeType":"YulFunctionCall","src":"2858:16:29"},"nodeType":"YulIf","src":"2855:36:29"},{"nodeType":"YulVariableDeclaration","src":"2900:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2979:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:29"},"nodeType":"YulFunctionCall","src":"2964:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2990:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2926:37:29"},"nodeType":"YulFunctionCall","src":"2926:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2904:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2914:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3007:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3017:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3007:6:29"}]},{"nodeType":"YulAssignment","src":"3034:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3044:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3034:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3061:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3094:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3105:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3090:3:29"},"nodeType":"YulFunctionCall","src":"3090:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3077:12:29"},"nodeType":"YulFunctionCall","src":"3077:32:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"3065:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3138:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3147:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3150:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3140:6:29"},"nodeType":"YulFunctionCall","src":"3140:12:29"},"nodeType":"YulExpressionStatement","src":"3140:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"3124:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3134:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3121:2:29"},"nodeType":"YulFunctionCall","src":"3121:16:29"},"nodeType":"YulIf","src":"3118:36:29"},{"nodeType":"YulVariableDeclaration","src":"3163:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"3242:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:29"},"nodeType":"YulFunctionCall","src":"3227:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3253:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3189:37:29"},"nodeType":"YulFunctionCall","src":"3189:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"3167:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"3177:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3270:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"3280:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3270:6:29"}]},{"nodeType":"YulAssignment","src":"3297:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"3307:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3297:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2368:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2379:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2391:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2399:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2407:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2415:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2423:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2431:6:29","type":""}],"src":"2218:1103:29"},{"body":{"nodeType":"YulBlock","src":"3483:616:29","statements":[{"body":{"nodeType":"YulBlock","src":"3529:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3538:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3541:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3531:6:29"},"nodeType":"YulFunctionCall","src":"3531:12:29"},"nodeType":"YulExpressionStatement","src":"3531:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3504:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3513:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3500:3:29"},"nodeType":"YulFunctionCall","src":"3500:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3525:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3496:3:29"},"nodeType":"YulFunctionCall","src":"3496:32:29"},"nodeType":"YulIf","src":"3493:52:29"},{"nodeType":"YulVariableDeclaration","src":"3554:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3581:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3568:12:29"},"nodeType":"YulFunctionCall","src":"3568:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3558:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3600:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3618:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3622:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3614:3:29"},"nodeType":"YulFunctionCall","src":"3614:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"3626:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3610:3:29"},"nodeType":"YulFunctionCall","src":"3610:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3604:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3655:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3664:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3667:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3657:6:29"},"nodeType":"YulFunctionCall","src":"3657:12:29"},"nodeType":"YulExpressionStatement","src":"3657:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3643:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3651:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3640:2:29"},"nodeType":"YulFunctionCall","src":"3640:14:29"},"nodeType":"YulIf","src":"3637:34:29"},{"nodeType":"YulVariableDeclaration","src":"3680:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3748:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3759:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3744:3:29"},"nodeType":"YulFunctionCall","src":"3744:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3768:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3706:37:29"},"nodeType":"YulFunctionCall","src":"3706:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"3684:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"3694:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3785:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"3795:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3785:6:29"}]},{"nodeType":"YulAssignment","src":"3812:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3822:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3812:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3839:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3872:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3883:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3868:3:29"},"nodeType":"YulFunctionCall","src":"3868:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3855:12:29"},"nodeType":"YulFunctionCall","src":"3855:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3843:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3916:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3925:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3928:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3918:6:29"},"nodeType":"YulFunctionCall","src":"3918:12:29"},"nodeType":"YulExpressionStatement","src":"3918:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3902:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3912:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3899:2:29"},"nodeType":"YulFunctionCall","src":"3899:16:29"},"nodeType":"YulIf","src":"3896:36:29"},{"nodeType":"YulVariableDeclaration","src":"3941:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4009:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4020:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4005:3:29"},"nodeType":"YulFunctionCall","src":"4005:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4031:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3967:37:29"},"nodeType":"YulFunctionCall","src":"3967:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3945:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3955:8:29","type":""}]},{"nodeType":"YulAssignment","src":"4048:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"4058:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4048:6:29"}]},{"nodeType":"YulAssignment","src":"4075:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"4085:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4075:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3425:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3436:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3448:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3456:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3464:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3472:6:29","type":""}],"src":"3326:773:29"},{"body":{"nodeType":"YulBlock","src":"4205:102:29","statements":[{"nodeType":"YulAssignment","src":"4215:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4227:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4238:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4223:3:29"},"nodeType":"YulFunctionCall","src":"4223:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4215:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4257:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4272:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4288:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4293:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4284:3:29"},"nodeType":"YulFunctionCall","src":"4284:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4280:3:29"},"nodeType":"YulFunctionCall","src":"4280:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4268:3:29"},"nodeType":"YulFunctionCall","src":"4268:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4250:6:29"},"nodeType":"YulFunctionCall","src":"4250:51:29"},"nodeType":"YulExpressionStatement","src":"4250:51:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4174:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4185:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4196:4:29","type":""}],"src":"4104:203:29"},{"body":{"nodeType":"YulBlock","src":"4384:275:29","statements":[{"body":{"nodeType":"YulBlock","src":"4433:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4442:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4445:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4435:6:29"},"nodeType":"YulFunctionCall","src":"4435:12:29"},"nodeType":"YulExpressionStatement","src":"4435:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4412:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4420:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4408:3:29"},"nodeType":"YulFunctionCall","src":"4408:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"4427:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4404:3:29"},"nodeType":"YulFunctionCall","src":"4404:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4397:6:29"},"nodeType":"YulFunctionCall","src":"4397:35:29"},"nodeType":"YulIf","src":"4394:55:29"},{"nodeType":"YulAssignment","src":"4458:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4481:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4468:12:29"},"nodeType":"YulFunctionCall","src":"4468:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4458:6:29"}]},{"body":{"nodeType":"YulBlock","src":"4531:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4540:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4543:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4533:6:29"},"nodeType":"YulFunctionCall","src":"4533:12:29"},"nodeType":"YulExpressionStatement","src":"4533:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4503:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4519:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"4523:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4515:3:29"},"nodeType":"YulFunctionCall","src":"4515:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"4527:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4511:3:29"},"nodeType":"YulFunctionCall","src":"4511:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4500:2:29"},"nodeType":"YulFunctionCall","src":"4500:30:29"},"nodeType":"YulIf","src":"4497:50:29"},{"nodeType":"YulAssignment","src":"4556:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4572:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4580:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4568:3:29"},"nodeType":"YulFunctionCall","src":"4568:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4556:8:29"}]},{"body":{"nodeType":"YulBlock","src":"4637:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4646:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4649:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4639:6:29"},"nodeType":"YulFunctionCall","src":"4639:12:29"},"nodeType":"YulExpressionStatement","src":"4639:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4608:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"4616:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4604:3:29"},"nodeType":"YulFunctionCall","src":"4604:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"4625:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4600:3:29"},"nodeType":"YulFunctionCall","src":"4600:30:29"},{"name":"end","nodeType":"YulIdentifier","src":"4632:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4597:2:29"},"nodeType":"YulFunctionCall","src":"4597:39:29"},"nodeType":"YulIf","src":"4594:59:29"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4347:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"4355:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"4363:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"4373:6:29","type":""}],"src":"4312:347:29"},{"body":{"nodeType":"YulBlock","src":"4891:1111:29","statements":[{"body":{"nodeType":"YulBlock","src":"4938:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4947:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4950:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4940:6:29"},"nodeType":"YulFunctionCall","src":"4940:12:29"},"nodeType":"YulExpressionStatement","src":"4940:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4912:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4921:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4908:3:29"},"nodeType":"YulFunctionCall","src":"4908:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4933:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4904:3:29"},"nodeType":"YulFunctionCall","src":"4904:33:29"},"nodeType":"YulIf","src":"4901:53:29"},{"nodeType":"YulVariableDeclaration","src":"4963:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4989:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4976:12:29"},"nodeType":"YulFunctionCall","src":"4976:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4967:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5033:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5008:24:29"},"nodeType":"YulFunctionCall","src":"5008:31:29"},"nodeType":"YulExpressionStatement","src":"5008:31:29"},{"nodeType":"YulAssignment","src":"5048:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"5058:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5048:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5072:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5104:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5115:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5100:3:29"},"nodeType":"YulFunctionCall","src":"5100:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5087:12:29"},"nodeType":"YulFunctionCall","src":"5087:32:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5076:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5153:7:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5128:24:29"},"nodeType":"YulFunctionCall","src":"5128:33:29"},"nodeType":"YulExpressionStatement","src":"5128:33:29"},{"nodeType":"YulAssignment","src":"5170:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5180:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5170:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5196:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5227:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5238:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5223:3:29"},"nodeType":"YulFunctionCall","src":"5223:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5210:12:29"},"nodeType":"YulFunctionCall","src":"5210:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5200:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5251:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5269:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"5273:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5265:3:29"},"nodeType":"YulFunctionCall","src":"5265:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"5277:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5261:3:29"},"nodeType":"YulFunctionCall","src":"5261:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5255:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5306:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5315:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5318:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5308:6:29"},"nodeType":"YulFunctionCall","src":"5308:12:29"},"nodeType":"YulExpressionStatement","src":"5308:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5294:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5302:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5291:2:29"},"nodeType":"YulFunctionCall","src":"5291:14:29"},"nodeType":"YulIf","src":"5288:34:29"},{"nodeType":"YulVariableDeclaration","src":"5331:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5399:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5395:3:29"},"nodeType":"YulFunctionCall","src":"5395:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5419:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"5357:37:29"},"nodeType":"YulFunctionCall","src":"5357:70:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"5335:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"5345:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5436:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"5446:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5436:6:29"}]},{"nodeType":"YulAssignment","src":"5463:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"5473:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5463:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5490:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5523:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5534:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5519:3:29"},"nodeType":"YulFunctionCall","src":"5519:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5506:12:29"},"nodeType":"YulFunctionCall","src":"5506:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5494:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5567:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5576:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5579:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5569:6:29"},"nodeType":"YulFunctionCall","src":"5569:12:29"},"nodeType":"YulExpressionStatement","src":"5569:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5553:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5563:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5550:2:29"},"nodeType":"YulFunctionCall","src":"5550:16:29"},"nodeType":"YulIf","src":"5547:36:29"},{"nodeType":"YulVariableDeclaration","src":"5592:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5660:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5671:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5656:3:29"},"nodeType":"YulFunctionCall","src":"5656:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5682:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"5618:37:29"},"nodeType":"YulFunctionCall","src":"5618:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"5596:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"5606:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5699:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"5709:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5699:6:29"}]},{"nodeType":"YulAssignment","src":"5726:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"5736:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5726:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5753:49:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5786:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5797:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5782:3:29"},"nodeType":"YulFunctionCall","src":"5782:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5769:12:29"},"nodeType":"YulFunctionCall","src":"5769:33:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5757:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5831:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5840:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5843:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5833:6:29"},"nodeType":"YulFunctionCall","src":"5833:12:29"},"nodeType":"YulExpressionStatement","src":"5833:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5817:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5827:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5814:2:29"},"nodeType":"YulFunctionCall","src":"5814:16:29"},"nodeType":"YulIf","src":"5811:36:29"},{"nodeType":"YulVariableDeclaration","src":"5856:86:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5912:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5923:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5908:3:29"},"nodeType":"YulFunctionCall","src":"5908:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5934:7:29"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"5882:25:29"},"nodeType":"YulFunctionCall","src":"5882:60:29"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"5860:8:29","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"5870:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5951:18:29","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"5961:8:29"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5951:6:29"}]},{"nodeType":"YulAssignment","src":"5978:18:29","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"5988:8:29"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"5978:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4801:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4812:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4824:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4832:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4840:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4848:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4856:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4864:6:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4872:6:29","type":""},{"name":"value7","nodeType":"YulTypedName","src":"4880:6:29","type":""}],"src":"4664:1338:29"},{"body":{"nodeType":"YulBlock","src":"6106:103:29","statements":[{"nodeType":"YulAssignment","src":"6116:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6128:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6139:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6124:3:29"},"nodeType":"YulFunctionCall","src":"6124:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6116:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6158:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6173:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6185:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6190:10:29","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6181:3:29"},"nodeType":"YulFunctionCall","src":"6181:20:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6169:3:29"},"nodeType":"YulFunctionCall","src":"6169:33:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6151:6:29"},"nodeType":"YulFunctionCall","src":"6151:52:29"},"nodeType":"YulExpressionStatement","src":"6151:52:29"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6075:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6086:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6097:4:29","type":""}],"src":"6007:202:29"},{"body":{"nodeType":"YulBlock","src":"6439:879:29","statements":[{"body":{"nodeType":"YulBlock","src":"6485:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6494:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6497:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6487:6:29"},"nodeType":"YulFunctionCall","src":"6487:12:29"},"nodeType":"YulExpressionStatement","src":"6487:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6460:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6469:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6456:3:29"},"nodeType":"YulFunctionCall","src":"6456:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6481:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6452:3:29"},"nodeType":"YulFunctionCall","src":"6452:32:29"},"nodeType":"YulIf","src":"6449:52:29"},{"nodeType":"YulVariableDeclaration","src":"6510:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6537:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6524:12:29"},"nodeType":"YulFunctionCall","src":"6524:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6514:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6556:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6574:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"6578:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6570:3:29"},"nodeType":"YulFunctionCall","src":"6570:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"6582:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6566:3:29"},"nodeType":"YulFunctionCall","src":"6566:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6560:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6611:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6620:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6623:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6613:6:29"},"nodeType":"YulFunctionCall","src":"6613:12:29"},"nodeType":"YulExpressionStatement","src":"6613:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6599:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"6607:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6596:2:29"},"nodeType":"YulFunctionCall","src":"6596:14:29"},"nodeType":"YulIf","src":"6593:34:29"},{"nodeType":"YulVariableDeclaration","src":"6636:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6704:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6715:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6700:3:29"},"nodeType":"YulFunctionCall","src":"6700:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6724:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6662:37:29"},"nodeType":"YulFunctionCall","src":"6662:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"6640:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"6650:8:29","type":""}]},{"nodeType":"YulAssignment","src":"6741:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"6751:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6741:6:29"}]},{"nodeType":"YulAssignment","src":"6768:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6778:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6768:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"6795:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6828:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6839:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6824:3:29"},"nodeType":"YulFunctionCall","src":"6824:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6811:12:29"},"nodeType":"YulFunctionCall","src":"6811:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6799:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6872:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6881:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6884:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6874:6:29"},"nodeType":"YulFunctionCall","src":"6874:12:29"},"nodeType":"YulExpressionStatement","src":"6874:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6858:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"6868:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6855:2:29"},"nodeType":"YulFunctionCall","src":"6855:16:29"},"nodeType":"YulIf","src":"6852:36:29"},{"nodeType":"YulVariableDeclaration","src":"6897:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6965:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6976:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6961:3:29"},"nodeType":"YulFunctionCall","src":"6961:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6987:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6923:37:29"},"nodeType":"YulFunctionCall","src":"6923:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"6901:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"6911:8:29","type":""}]},{"nodeType":"YulAssignment","src":"7004:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"7014:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7004:6:29"}]},{"nodeType":"YulAssignment","src":"7031:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"7041:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7031:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7058:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7091:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7102:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7087:3:29"},"nodeType":"YulFunctionCall","src":"7087:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7074:12:29"},"nodeType":"YulFunctionCall","src":"7074:32:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"7062:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7135:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7144:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7147:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7137:6:29"},"nodeType":"YulFunctionCall","src":"7137:12:29"},"nodeType":"YulExpressionStatement","src":"7137:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"7121:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"7131:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7118:2:29"},"nodeType":"YulFunctionCall","src":"7118:16:29"},"nodeType":"YulIf","src":"7115:36:29"},{"nodeType":"YulVariableDeclaration","src":"7160:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7228:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"7239:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7224:3:29"},"nodeType":"YulFunctionCall","src":"7224:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7250:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"7186:37:29"},"nodeType":"YulFunctionCall","src":"7186:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"7164:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"7174:8:29","type":""}]},{"nodeType":"YulAssignment","src":"7267:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"7277:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7267:6:29"}]},{"nodeType":"YulAssignment","src":"7294:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"7304:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7294:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6365:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6376:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6388:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6396:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6404:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6412:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6420:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6428:6:29","type":""}],"src":"6214:1104:29"},{"body":{"nodeType":"YulBlock","src":"7480:666:29","statements":[{"body":{"nodeType":"YulBlock","src":"7527:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7536:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7539:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7529:6:29"},"nodeType":"YulFunctionCall","src":"7529:12:29"},"nodeType":"YulExpressionStatement","src":"7529:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7501:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7510:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7497:3:29"},"nodeType":"YulFunctionCall","src":"7497:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7522:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7493:3:29"},"nodeType":"YulFunctionCall","src":"7493:33:29"},"nodeType":"YulIf","src":"7490:53:29"},{"nodeType":"YulVariableDeclaration","src":"7552:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7578:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7565:12:29"},"nodeType":"YulFunctionCall","src":"7565:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7556:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7622:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7597:24:29"},"nodeType":"YulFunctionCall","src":"7597:31:29"},"nodeType":"YulExpressionStatement","src":"7597:31:29"},{"nodeType":"YulAssignment","src":"7637:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"7647:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7637:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7661:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7693:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7704:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7689:3:29"},"nodeType":"YulFunctionCall","src":"7689:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7676:12:29"},"nodeType":"YulFunctionCall","src":"7676:32:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7665:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"7742:7:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7717:24:29"},"nodeType":"YulFunctionCall","src":"7717:33:29"},"nodeType":"YulExpressionStatement","src":"7717:33:29"},{"nodeType":"YulAssignment","src":"7759:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"7769:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7759:6:29"}]},{"nodeType":"YulAssignment","src":"7785:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7812:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7823:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7808:3:29"},"nodeType":"YulFunctionCall","src":"7808:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7795:12:29"},"nodeType":"YulFunctionCall","src":"7795:32:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7785:6:29"}]},{"nodeType":"YulAssignment","src":"7836:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7863:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7874:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7859:3:29"},"nodeType":"YulFunctionCall","src":"7859:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7846:12:29"},"nodeType":"YulFunctionCall","src":"7846:32:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7836:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7887:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7918:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7929:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7914:3:29"},"nodeType":"YulFunctionCall","src":"7914:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7901:12:29"},"nodeType":"YulFunctionCall","src":"7901:33:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7891:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7977:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7986:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7989:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7979:6:29"},"nodeType":"YulFunctionCall","src":"7979:12:29"},"nodeType":"YulExpressionStatement","src":"7979:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7949:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7965:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"7969:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7961:3:29"},"nodeType":"YulFunctionCall","src":"7961:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"7973:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7957:3:29"},"nodeType":"YulFunctionCall","src":"7957:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7946:2:29"},"nodeType":"YulFunctionCall","src":"7946:30:29"},"nodeType":"YulIf","src":"7943:50:29"},{"nodeType":"YulVariableDeclaration","src":"8002:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8058:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"8069:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8054:3:29"},"nodeType":"YulFunctionCall","src":"8054:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8078:7:29"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"8028:25:29"},"nodeType":"YulFunctionCall","src":"8028:58:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"8006:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"8016:8:29","type":""}]},{"nodeType":"YulAssignment","src":"8095:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"8105:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8095:6:29"}]},{"nodeType":"YulAssignment","src":"8122:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"8132:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"8122:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7406:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7417:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7429:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7437:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7445:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7453:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7461:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7469:6:29","type":""}],"src":"7323:823:29"},{"body":{"nodeType":"YulBlock","src":"8316:616:29","statements":[{"body":{"nodeType":"YulBlock","src":"8362:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8371:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8374:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8364:6:29"},"nodeType":"YulFunctionCall","src":"8364:12:29"},"nodeType":"YulExpressionStatement","src":"8364:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8337:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"8346:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8333:3:29"},"nodeType":"YulFunctionCall","src":"8333:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"8358:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8329:3:29"},"nodeType":"YulFunctionCall","src":"8329:32:29"},"nodeType":"YulIf","src":"8326:52:29"},{"nodeType":"YulVariableDeclaration","src":"8387:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8414:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8401:12:29"},"nodeType":"YulFunctionCall","src":"8401:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8391:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8433:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8451:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"8455:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8447:3:29"},"nodeType":"YulFunctionCall","src":"8447:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"8459:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8443:3:29"},"nodeType":"YulFunctionCall","src":"8443:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8437:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8488:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8497:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8500:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8490:6:29"},"nodeType":"YulFunctionCall","src":"8490:12:29"},"nodeType":"YulExpressionStatement","src":"8490:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8476:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8484:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8473:2:29"},"nodeType":"YulFunctionCall","src":"8473:14:29"},"nodeType":"YulIf","src":"8470:34:29"},{"nodeType":"YulVariableDeclaration","src":"8513:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8581:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"8592:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8577:3:29"},"nodeType":"YulFunctionCall","src":"8577:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8601:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8539:37:29"},"nodeType":"YulFunctionCall","src":"8539:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"8517:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"8527:8:29","type":""}]},{"nodeType":"YulAssignment","src":"8618:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"8628:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8618:6:29"}]},{"nodeType":"YulAssignment","src":"8645:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"8655:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8645:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"8672:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8705:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8716:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8701:3:29"},"nodeType":"YulFunctionCall","src":"8701:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8688:12:29"},"nodeType":"YulFunctionCall","src":"8688:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8676:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8749:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8758:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8761:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8751:6:29"},"nodeType":"YulFunctionCall","src":"8751:12:29"},"nodeType":"YulExpressionStatement","src":"8751:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8735:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8745:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8732:2:29"},"nodeType":"YulFunctionCall","src":"8732:16:29"},"nodeType":"YulIf","src":"8729:36:29"},{"nodeType":"YulVariableDeclaration","src":"8774:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8842:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8853:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8838:3:29"},"nodeType":"YulFunctionCall","src":"8838:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8864:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8800:37:29"},"nodeType":"YulFunctionCall","src":"8800:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"8778:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"8788:8:29","type":""}]},{"nodeType":"YulAssignment","src":"8881:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8891:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8881:6:29"}]},{"nodeType":"YulAssignment","src":"8908:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8918:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8908:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8258:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8269:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8281:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8289:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8297:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8305:6:29","type":""}],"src":"8151:781:29"},{"body":{"nodeType":"YulBlock","src":"9111:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9128:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9139:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9121:6:29"},"nodeType":"YulFunctionCall","src":"9121:21:29"},"nodeType":"YulExpressionStatement","src":"9121:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9162:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9173:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9158:3:29"},"nodeType":"YulFunctionCall","src":"9158:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"9178:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9151:6:29"},"nodeType":"YulFunctionCall","src":"9151:30:29"},"nodeType":"YulExpressionStatement","src":"9151:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9201:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9212:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9197:3:29"},"nodeType":"YulFunctionCall","src":"9197:18:29"},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"9217:31:29","type":"","value":"Recovery: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9190:6:29"},"nodeType":"YulFunctionCall","src":"9190:59:29"},"nodeType":"YulExpressionStatement","src":"9190:59:29"},{"nodeType":"YulAssignment","src":"9258:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9270:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9281:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9266:3:29"},"nodeType":"YulFunctionCall","src":"9266:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9258:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9088:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9102:4:29","type":""}],"src":"8937:353:29"},{"body":{"nodeType":"YulBlock","src":"9327:95:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9344:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9351:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9356:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9347:3:29"},"nodeType":"YulFunctionCall","src":"9347:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9337:6:29"},"nodeType":"YulFunctionCall","src":"9337:31:29"},"nodeType":"YulExpressionStatement","src":"9337:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9384:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9387:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9377:6:29"},"nodeType":"YulFunctionCall","src":"9377:15:29"},"nodeType":"YulExpressionStatement","src":"9377:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9408:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9411:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9401:6:29"},"nodeType":"YulFunctionCall","src":"9401:15:29"},"nodeType":"YulExpressionStatement","src":"9401:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9295:127:29"},{"body":{"nodeType":"YulBlock","src":"9512:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"9558:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9567:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9570:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9560:6:29"},"nodeType":"YulFunctionCall","src":"9560:12:29"},"nodeType":"YulExpressionStatement","src":"9560:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9533:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"9542:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9529:3:29"},"nodeType":"YulFunctionCall","src":"9529:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"9554:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9525:3:29"},"nodeType":"YulFunctionCall","src":"9525:32:29"},"nodeType":"YulIf","src":"9522:52:29"},{"nodeType":"YulVariableDeclaration","src":"9583:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9609:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9596:12:29"},"nodeType":"YulFunctionCall","src":"9596:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9587:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9653:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9628:24:29"},"nodeType":"YulFunctionCall","src":"9628:31:29"},"nodeType":"YulExpressionStatement","src":"9628:31:29"},{"nodeType":"YulAssignment","src":"9668:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"9678:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9668:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1333","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9478:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9489:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9501:6:29","type":""}],"src":"9427:262:29"},{"body":{"nodeType":"YulBlock","src":"9823:119:29","statements":[{"nodeType":"YulAssignment","src":"9833:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9845:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9856:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9841:3:29"},"nodeType":"YulFunctionCall","src":"9841:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9833:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9875:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"9886:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9868:6:29"},"nodeType":"YulFunctionCall","src":"9868:25:29"},"nodeType":"YulExpressionStatement","src":"9868:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9913:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9924:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9909:3:29"},"nodeType":"YulFunctionCall","src":"9909:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"9929:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9902:6:29"},"nodeType":"YulFunctionCall","src":"9902:34:29"},"nodeType":"YulExpressionStatement","src":"9902:34:29"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9784:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9795:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9803:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9814:4:29","type":""}],"src":"9694:248:29"},{"body":{"nodeType":"YulBlock","src":"9979:95:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9996:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10003:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10008:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9999:3:29"},"nodeType":"YulFunctionCall","src":"9999:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9989:6:29"},"nodeType":"YulFunctionCall","src":"9989:31:29"},"nodeType":"YulExpressionStatement","src":"9989:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10036:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10039:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10029:6:29"},"nodeType":"YulFunctionCall","src":"10029:15:29"},"nodeType":"YulExpressionStatement","src":"10029:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10060:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10063:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10053:6:29"},"nodeType":"YulFunctionCall","src":"10053:15:29"},"nodeType":"YulExpressionStatement","src":"10053:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9947:127:29"},{"body":{"nodeType":"YulBlock","src":"10128:79:29","statements":[{"nodeType":"YulAssignment","src":"10138:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10150:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"10153:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10146:3:29"},"nodeType":"YulFunctionCall","src":"10146:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"10138:4:29"}]},{"body":{"nodeType":"YulBlock","src":"10179:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10181:16:29"},"nodeType":"YulFunctionCall","src":"10181:18:29"},"nodeType":"YulExpressionStatement","src":"10181:18:29"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"10170:4:29"},{"name":"x","nodeType":"YulIdentifier","src":"10176:1:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10167:2:29"},"nodeType":"YulFunctionCall","src":"10167:11:29"},"nodeType":"YulIf","src":"10164:37:29"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10110:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"10113:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"10119:4:29","type":""}],"src":"10079:128:29"},{"body":{"nodeType":"YulBlock","src":"10259:88:29","statements":[{"body":{"nodeType":"YulBlock","src":"10290:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10292:16:29"},"nodeType":"YulFunctionCall","src":"10292:18:29"},"nodeType":"YulExpressionStatement","src":"10292:18:29"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10275:5:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10286:1:29","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10282:3:29"},"nodeType":"YulFunctionCall","src":"10282:6:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10272:2:29"},"nodeType":"YulFunctionCall","src":"10272:17:29"},"nodeType":"YulIf","src":"10269:43:29"},{"nodeType":"YulAssignment","src":"10321:20:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10332:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"10339:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10328:3:29"},"nodeType":"YulFunctionCall","src":"10328:13:29"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10321:3:29"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10241:5:29","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10251:3:29","type":""}],"src":"10212:135:29"},{"body":{"nodeType":"YulBlock","src":"10430:233:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10447:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10452:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10440:6:29"},"nodeType":"YulFunctionCall","src":"10440:19:29"},"nodeType":"YulExpressionStatement","src":"10440:19:29"},{"body":{"nodeType":"YulBlock","src":"10503:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10512:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10515:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10505:6:29"},"nodeType":"YulFunctionCall","src":"10505:12:29"},"nodeType":"YulExpressionStatement","src":"10505:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10474:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10490:3:29","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"10495:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10486:3:29"},"nodeType":"YulFunctionCall","src":"10486:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"10499:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10482:3:29"},"nodeType":"YulFunctionCall","src":"10482:19:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10471:2:29"},"nodeType":"YulFunctionCall","src":"10471:31:29"},"nodeType":"YulIf","src":"10468:51:29"},{"nodeType":"YulVariableDeclaration","src":"10528:30:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10548:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10551:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10544:3:29"},"nodeType":"YulFunctionCall","src":"10544:14:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10532:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10584:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10589:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10580:3:29"},"nodeType":"YulFunctionCall","src":"10580:14:29"},{"name":"start","nodeType":"YulIdentifier","src":"10596:5:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"10603:8:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"10567:12:29"},"nodeType":"YulFunctionCall","src":"10567:45:29"},"nodeType":"YulExpressionStatement","src":"10567:45:29"},{"nodeType":"YulAssignment","src":"10621:36:29","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10636:3:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"10641:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10632:3:29"},"nodeType":"YulFunctionCall","src":"10632:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"10652:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10628:3:29"},"nodeType":"YulFunctionCall","src":"10628:29:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10621:3:29"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"10399:5:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"10406:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10414:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10422:3:29","type":""}],"src":"10352:311:29"},{"body":{"nodeType":"YulBlock","src":"10829:127:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10846:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10857:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10839:6:29"},"nodeType":"YulFunctionCall","src":"10839:21:29"},"nodeType":"YulExpressionStatement","src":"10839:21:29"},{"nodeType":"YulAssignment","src":"10869:81:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10915:6:29"},{"name":"value1","nodeType":"YulIdentifier","src":"10923:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10935:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10946:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10931:3:29"},"nodeType":"YulFunctionCall","src":"10931:18:29"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"10877:37:29"},"nodeType":"YulFunctionCall","src":"10877:73:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10869:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10790:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10801:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10809:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10820:4:29","type":""}],"src":"10668:288:29"},{"body":{"nodeType":"YulBlock","src":"11366:538:29","statements":[{"nodeType":"YulVariableDeclaration","src":"11376:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11394:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11399:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11390:3:29"},"nodeType":"YulFunctionCall","src":"11390:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"11403:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11386:3:29"},"nodeType":"YulFunctionCall","src":"11386:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11380:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11421:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11436:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"11444:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11432:3:29"},"nodeType":"YulFunctionCall","src":"11432:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11414:6:29"},"nodeType":"YulFunctionCall","src":"11414:34:29"},"nodeType":"YulExpressionStatement","src":"11414:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11468:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11479:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11464:3:29"},"nodeType":"YulFunctionCall","src":"11464:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11488:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"11496:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11484:3:29"},"nodeType":"YulFunctionCall","src":"11484:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11457:6:29"},"nodeType":"YulFunctionCall","src":"11457:43:29"},"nodeType":"YulExpressionStatement","src":"11457:43:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11520:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11531:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11516:3:29"},"nodeType":"YulFunctionCall","src":"11516:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"11536:3:29","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11509:6:29"},"nodeType":"YulFunctionCall","src":"11509:31:29"},"nodeType":"YulExpressionStatement","src":"11509:31:29"},{"nodeType":"YulVariableDeclaration","src":"11549:88:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11601:6:29"},{"name":"value3","nodeType":"YulIdentifier","src":"11609:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11621:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11632:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11617:3:29"},"nodeType":"YulFunctionCall","src":"11617:19:29"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"11563:37:29"},"nodeType":"YulFunctionCall","src":"11563:74:29"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11553:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11657:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11668:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11653:3:29"},"nodeType":"YulFunctionCall","src":"11653:18:29"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11677:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11685:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11673:3:29"},"nodeType":"YulFunctionCall","src":"11673:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11646:6:29"},"nodeType":"YulFunctionCall","src":"11646:50:29"},"nodeType":"YulExpressionStatement","src":"11646:50:29"},{"nodeType":"YulVariableDeclaration","src":"11705:75:29","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"11757:6:29"},{"name":"value5","nodeType":"YulIdentifier","src":"11765:6:29"},{"name":"tail_1","nodeType":"YulIdentifier","src":"11773:6:29"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"11719:37:29"},"nodeType":"YulFunctionCall","src":"11719:61:29"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"11709:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11800:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11811:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11796:3:29"},"nodeType":"YulFunctionCall","src":"11796:19:29"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11821:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11829:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11817:3:29"},"nodeType":"YulFunctionCall","src":"11817:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11789:6:29"},"nodeType":"YulFunctionCall","src":"11789:51:29"},"nodeType":"YulExpressionStatement","src":"11789:51:29"},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11856:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"11864:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11849:6:29"},"nodeType":"YulFunctionCall","src":"11849:17:29"},"nodeType":"YulExpressionStatement","src":"11849:17:29"},{"nodeType":"YulAssignment","src":"11875:23:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11887:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"11895:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11883:3:29"},"nodeType":"YulFunctionCall","src":"11883:15:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11875:4:29"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11295:9:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11306:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11314:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11322:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11330:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11338:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11346:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11357:4:29","type":""}],"src":"10961:943:29"},{"body":{"nodeType":"YulBlock","src":"11957:77:29","statements":[{"nodeType":"YulAssignment","src":"11967:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11978:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"11981:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11974:3:29"},"nodeType":"YulFunctionCall","src":"11974:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11967:3:29"}]},{"body":{"nodeType":"YulBlock","src":"12006:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12008:16:29"},"nodeType":"YulFunctionCall","src":"12008:18:29"},"nodeType":"YulExpressionStatement","src":"12008:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11998:1:29"},{"name":"sum","nodeType":"YulIdentifier","src":"12001:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11995:2:29"},"nodeType":"YulFunctionCall","src":"11995:10:29"},"nodeType":"YulIf","src":"11992:36:29"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11940:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"11943:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11949:3:29","type":""}],"src":"11909:125:29"},{"body":{"nodeType":"YulBlock","src":"12125:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"12171:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12180:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12183:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12173:6:29"},"nodeType":"YulFunctionCall","src":"12173:12:29"},"nodeType":"YulExpressionStatement","src":"12173:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12146:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12155:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12142:3:29"},"nodeType":"YulFunctionCall","src":"12142:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"12167:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12138:3:29"},"nodeType":"YulFunctionCall","src":"12138:32:29"},"nodeType":"YulIf","src":"12135:52:29"},{"nodeType":"YulVariableDeclaration","src":"12196:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12222:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12209:12:29"},"nodeType":"YulFunctionCall","src":"12209:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12200:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12266:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12241:24:29"},"nodeType":"YulFunctionCall","src":"12241:31:29"},"nodeType":"YulExpressionStatement","src":"12241:31:29"},{"nodeType":"YulAssignment","src":"12281:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"12291:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12281:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1222","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12091:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12102:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12114:6:29","type":""}],"src":"12039:263:29"},{"body":{"nodeType":"YulBlock","src":"12464:218:29","statements":[{"nodeType":"YulAssignment","src":"12474:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12486:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12497:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12482:3:29"},"nodeType":"YulFunctionCall","src":"12482:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12474:4:29"}]},{"nodeType":"YulVariableDeclaration","src":"12509:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12527:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12532:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12523:3:29"},"nodeType":"YulFunctionCall","src":"12523:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"12536:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12519:3:29"},"nodeType":"YulFunctionCall","src":"12519:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12513:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12554:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12569:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12577:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12565:3:29"},"nodeType":"YulFunctionCall","src":"12565:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12547:6:29"},"nodeType":"YulFunctionCall","src":"12547:34:29"},"nodeType":"YulExpressionStatement","src":"12547:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12601:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12612:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12597:3:29"},"nodeType":"YulFunctionCall","src":"12597:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12621:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12629:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12617:3:29"},"nodeType":"YulFunctionCall","src":"12617:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12590:6:29"},"nodeType":"YulFunctionCall","src":"12590:43:29"},"nodeType":"YulExpressionStatement","src":"12590:43:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12653:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12664:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12649:3:29"},"nodeType":"YulFunctionCall","src":"12649:18:29"},{"name":"value2","nodeType":"YulIdentifier","src":"12669:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12642:6:29"},"nodeType":"YulFunctionCall","src":"12642:34:29"},"nodeType":"YulExpressionStatement","src":"12642:34:29"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12417:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12428:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12436:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12444:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12455:4:29","type":""}],"src":"12307:375:29"},{"body":{"nodeType":"YulBlock","src":"12765:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"12811:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12820:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12823:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12813:6:29"},"nodeType":"YulFunctionCall","src":"12813:12:29"},"nodeType":"YulExpressionStatement","src":"12813:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12786:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12795:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12782:3:29"},"nodeType":"YulFunctionCall","src":"12782:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"12807:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12778:3:29"},"nodeType":"YulFunctionCall","src":"12778:32:29"},"nodeType":"YulIf","src":"12775:52:29"},{"nodeType":"YulVariableDeclaration","src":"12836:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12862:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12849:12:29"},"nodeType":"YulFunctionCall","src":"12849:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12840:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12906:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12881:24:29"},"nodeType":"YulFunctionCall","src":"12881:31:29"},"nodeType":"YulExpressionStatement","src":"12881:31:29"},{"nodeType":"YulAssignment","src":"12921:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"12931:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12921:6:29"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12731:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12742:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12754:6:29","type":""}],"src":"12687:255:29"},{"body":{"nodeType":"YulBlock","src":"13121:181:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13138:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13149:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13131:6:29"},"nodeType":"YulFunctionCall","src":"13131:21:29"},"nodeType":"YulExpressionStatement","src":"13131:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13172:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13183:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13168:3:29"},"nodeType":"YulFunctionCall","src":"13168:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"13188:2:29","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13161:6:29"},"nodeType":"YulFunctionCall","src":"13161:30:29"},"nodeType":"YulExpressionStatement","src":"13161:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13211:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13222:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13207:3:29"},"nodeType":"YulFunctionCall","src":"13207:18:29"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"13227:33:29","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13200:6:29"},"nodeType":"YulFunctionCall","src":"13200:61:29"},"nodeType":"YulExpressionStatement","src":"13200:61:29"},{"nodeType":"YulAssignment","src":"13270:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13282:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13293:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13278:3:29"},"nodeType":"YulFunctionCall","src":"13278:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13270:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13098:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13112:4:29","type":""}],"src":"12947:355:29"},{"body":{"nodeType":"YulBlock","src":"13481:174:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13498:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13509:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13491:6:29"},"nodeType":"YulFunctionCall","src":"13491:21:29"},"nodeType":"YulExpressionStatement","src":"13491:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13532:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13543:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13528:3:29"},"nodeType":"YulFunctionCall","src":"13528:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"13548:2:29","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13521:6:29"},"nodeType":"YulFunctionCall","src":"13521:30:29"},"nodeType":"YulExpressionStatement","src":"13521:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13571:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13582:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13567:3:29"},"nodeType":"YulFunctionCall","src":"13567:18:29"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"13587:26:29","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13560:6:29"},"nodeType":"YulFunctionCall","src":"13560:54:29"},"nodeType":"YulExpressionStatement","src":"13560:54:29"},{"nodeType":"YulAssignment","src":"13623:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13635:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13646:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13631:3:29"},"nodeType":"YulFunctionCall","src":"13631:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13623:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13458:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13472:4:29","type":""}],"src":"13307:348:29"},{"body":{"nodeType":"YulBlock","src":"13789:145:29","statements":[{"nodeType":"YulAssignment","src":"13799:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13811:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13822:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13807:3:29"},"nodeType":"YulFunctionCall","src":"13807:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13799:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13841:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13856:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13872:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13877:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13868:3:29"},"nodeType":"YulFunctionCall","src":"13868:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"13881:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13864:3:29"},"nodeType":"YulFunctionCall","src":"13864:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13852:3:29"},"nodeType":"YulFunctionCall","src":"13852:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13834:6:29"},"nodeType":"YulFunctionCall","src":"13834:51:29"},"nodeType":"YulExpressionStatement","src":"13834:51:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13905:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13916:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13901:3:29"},"nodeType":"YulFunctionCall","src":"13901:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"13921:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13894:6:29"},"nodeType":"YulFunctionCall","src":"13894:34:29"},"nodeType":"YulExpressionStatement","src":"13894:34:29"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13750:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13761:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13769:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13780:4:29","type":""}],"src":"13660:274:29"},{"body":{"nodeType":"YulBlock","src":"14113:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14130:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14141:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14123:6:29"},"nodeType":"YulFunctionCall","src":"14123:21:29"},"nodeType":"YulExpressionStatement","src":"14123:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14164:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14175:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14160:3:29"},"nodeType":"YulFunctionCall","src":"14160:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"14180:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14153:6:29"},"nodeType":"YulFunctionCall","src":"14153:30:29"},"nodeType":"YulExpressionStatement","src":"14153:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14203:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14214:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14199:3:29"},"nodeType":"YulFunctionCall","src":"14199:18:29"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"14219:31:29","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14192:6:29"},"nodeType":"YulFunctionCall","src":"14192:59:29"},"nodeType":"YulExpressionStatement","src":"14192:59:29"},{"nodeType":"YulAssignment","src":"14260:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14272:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14283:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14268:3:29"},"nodeType":"YulFunctionCall","src":"14268:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14260:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14090:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14104:4:29","type":""}],"src":"13939:353:29"},{"body":{"nodeType":"YulBlock","src":"14488:14:29","statements":[{"nodeType":"YulAssignment","src":"14490:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"14497:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14490:3:29"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14472:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14480:3:29","type":""}],"src":"14297:205:29"},{"body":{"nodeType":"YulBlock","src":"14681:248:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14698:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14709:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14691:6:29"},"nodeType":"YulFunctionCall","src":"14691:21:29"},"nodeType":"YulExpressionStatement","src":"14691:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14732:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14743:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14728:3:29"},"nodeType":"YulFunctionCall","src":"14728:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"14748:2:29","type":"","value":"58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14721:6:29"},"nodeType":"YulFunctionCall","src":"14721:30:29"},"nodeType":"YulExpressionStatement","src":"14721:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14771:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14782:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14767:3:29"},"nodeType":"YulFunctionCall","src":"14767:18:29"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nodeType":"YulLiteral","src":"14787:34:29","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14760:6:29"},"nodeType":"YulFunctionCall","src":"14760:62:29"},"nodeType":"YulExpressionStatement","src":"14760:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14842:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14853:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14838:3:29"},"nodeType":"YulFunctionCall","src":"14838:18:29"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nodeType":"YulLiteral","src":"14858:28:29","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14831:6:29"},"nodeType":"YulFunctionCall","src":"14831:56:29"},"nodeType":"YulExpressionStatement","src":"14831:56:29"},{"nodeType":"YulAssignment","src":"14896:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14908:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14919:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14904:3:29"},"nodeType":"YulFunctionCall","src":"14904:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14896:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14658:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14672:4:29","type":""}],"src":"14507:422:29"},{"body":{"nodeType":"YulBlock","src":"15063:175:29","statements":[{"nodeType":"YulAssignment","src":"15073:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15085:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15096:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15081:3:29"},"nodeType":"YulFunctionCall","src":"15081:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15073:4:29"}]},{"nodeType":"YulVariableDeclaration","src":"15108:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15126:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15131:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15122:3:29"},"nodeType":"YulFunctionCall","src":"15122:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"15135:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15118:3:29"},"nodeType":"YulFunctionCall","src":"15118:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15112:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15153:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15168:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"15176:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15164:3:29"},"nodeType":"YulFunctionCall","src":"15164:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15146:6:29"},"nodeType":"YulFunctionCall","src":"15146:34:29"},"nodeType":"YulExpressionStatement","src":"15146:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15200:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15211:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15196:3:29"},"nodeType":"YulFunctionCall","src":"15196:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15220:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"15228:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15216:3:29"},"nodeType":"YulFunctionCall","src":"15216:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15189:6:29"},"nodeType":"YulFunctionCall","src":"15189:43:29"},"nodeType":"YulExpressionStatement","src":"15189:43:29"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15024:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15035:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15043:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15054:4:29","type":""}],"src":"14934:304:29"},{"body":{"nodeType":"YulBlock","src":"15321:199:29","statements":[{"body":{"nodeType":"YulBlock","src":"15367:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15376:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15379:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15369:6:29"},"nodeType":"YulFunctionCall","src":"15369:12:29"},"nodeType":"YulExpressionStatement","src":"15369:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15342:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"15351:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15338:3:29"},"nodeType":"YulFunctionCall","src":"15338:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"15363:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15334:3:29"},"nodeType":"YulFunctionCall","src":"15334:32:29"},"nodeType":"YulIf","src":"15331:52:29"},{"nodeType":"YulVariableDeclaration","src":"15392:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15411:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15405:5:29"},"nodeType":"YulFunctionCall","src":"15405:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15396:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"15474:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15483:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15486:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15476:6:29"},"nodeType":"YulFunctionCall","src":"15476:12:29"},"nodeType":"YulExpressionStatement","src":"15476:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15443:5:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15464:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15457:6:29"},"nodeType":"YulFunctionCall","src":"15457:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15450:6:29"},"nodeType":"YulFunctionCall","src":"15450:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15440:2:29"},"nodeType":"YulFunctionCall","src":"15440:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15433:6:29"},"nodeType":"YulFunctionCall","src":"15433:40:29"},"nodeType":"YulIf","src":"15430:60:29"},{"nodeType":"YulAssignment","src":"15499:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"15509:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15499:6:29"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15287:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15298:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15310:6:29","type":""}],"src":"15243:277:29"},{"body":{"nodeType":"YulBlock","src":"15699:232:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15716:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15727:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15709:6:29"},"nodeType":"YulFunctionCall","src":"15709:21:29"},"nodeType":"YulExpressionStatement","src":"15709:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15750:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15761:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15746:3:29"},"nodeType":"YulFunctionCall","src":"15746:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"15766:2:29","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15739:6:29"},"nodeType":"YulFunctionCall","src":"15739:30:29"},"nodeType":"YulExpressionStatement","src":"15739:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15789:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15800:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15785:3:29"},"nodeType":"YulFunctionCall","src":"15785:18:29"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"15805:34:29","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15778:6:29"},"nodeType":"YulFunctionCall","src":"15778:62:29"},"nodeType":"YulExpressionStatement","src":"15778:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15860:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15871:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15856:3:29"},"nodeType":"YulFunctionCall","src":"15856:18:29"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"15876:12:29","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15849:6:29"},"nodeType":"YulFunctionCall","src":"15849:40:29"},"nodeType":"YulExpressionStatement","src":"15849:40:29"},{"nodeType":"YulAssignment","src":"15898:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15910:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15921:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15906:3:29"},"nodeType":"YulFunctionCall","src":"15906:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15898:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15676:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15690:4:29","type":""}],"src":"15525:406:29"},{"body":{"nodeType":"YulBlock","src":"16110:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16127:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16138:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16120:6:29"},"nodeType":"YulFunctionCall","src":"16120:21:29"},"nodeType":"YulExpressionStatement","src":"16120:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16161:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16172:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16157:3:29"},"nodeType":"YulFunctionCall","src":"16157:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"16177:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16150:6:29"},"nodeType":"YulFunctionCall","src":"16150:30:29"},"nodeType":"YulExpressionStatement","src":"16150:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16200:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16211:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16196:3:29"},"nodeType":"YulFunctionCall","src":"16196:18:29"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"16216:34:29","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16189:6:29"},"nodeType":"YulFunctionCall","src":"16189:62:29"},"nodeType":"YulExpressionStatement","src":"16189:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16271:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16282:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16267:3:29"},"nodeType":"YulFunctionCall","src":"16267:18:29"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"16287:8:29","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16260:6:29"},"nodeType":"YulFunctionCall","src":"16260:36:29"},"nodeType":"YulExpressionStatement","src":"16260:36:29"},{"nodeType":"YulAssignment","src":"16305:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16317:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16328:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16313:3:29"},"nodeType":"YulFunctionCall","src":"16313:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16305:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16087:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16101:4:29","type":""}],"src":"15936:402:29"},{"body":{"nodeType":"YulBlock","src":"16409:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"16419:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"16428:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16423:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"16488:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16513:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"16518:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16509:3:29"},"nodeType":"YulFunctionCall","src":"16509:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16532:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"16537:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16528:3:29"},"nodeType":"YulFunctionCall","src":"16528:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16522:5:29"},"nodeType":"YulFunctionCall","src":"16522:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16502:6:29"},"nodeType":"YulFunctionCall","src":"16502:39:29"},"nodeType":"YulExpressionStatement","src":"16502:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16449:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"16452:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16446:2:29"},"nodeType":"YulFunctionCall","src":"16446:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16460:19:29","statements":[{"nodeType":"YulAssignment","src":"16462:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16471:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"16474:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16467:3:29"},"nodeType":"YulFunctionCall","src":"16467:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16462:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"16442:3:29","statements":[]},"src":"16438:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16571:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"16576:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16567:3:29"},"nodeType":"YulFunctionCall","src":"16567:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"16585:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16560:6:29"},"nodeType":"YulFunctionCall","src":"16560:27:29"},"nodeType":"YulExpressionStatement","src":"16560:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"16387:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"16392:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"16397:6:29","type":""}],"src":"16343:250:29"},{"body":{"nodeType":"YulBlock","src":"16735:150:29","statements":[{"nodeType":"YulVariableDeclaration","src":"16745:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16765:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16759:5:29"},"nodeType":"YulFunctionCall","src":"16759:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16749:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16820:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"16828:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16816:3:29"},"nodeType":"YulFunctionCall","src":"16816:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"16835:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"16840:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16781:34:29"},"nodeType":"YulFunctionCall","src":"16781:66:29"},"nodeType":"YulExpressionStatement","src":"16781:66:29"},{"nodeType":"YulAssignment","src":"16856:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16867:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"16872:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16863:3:29"},"nodeType":"YulFunctionCall","src":"16863:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16856:3:29"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16711:3:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16716:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16727:3:29","type":""}],"src":"16598:287:29"},{"body":{"nodeType":"YulBlock","src":"17064:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17081:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17092:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17074:6:29"},"nodeType":"YulFunctionCall","src":"17074:21:29"},"nodeType":"YulExpressionStatement","src":"17074:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17115:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17126:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17111:3:29"},"nodeType":"YulFunctionCall","src":"17111:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"17131:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17104:6:29"},"nodeType":"YulFunctionCall","src":"17104:30:29"},"nodeType":"YulExpressionStatement","src":"17104:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17154:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17165:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17150:3:29"},"nodeType":"YulFunctionCall","src":"17150:18:29"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"17170:31:29","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17143:6:29"},"nodeType":"YulFunctionCall","src":"17143:59:29"},"nodeType":"YulExpressionStatement","src":"17143:59:29"},{"nodeType":"YulAssignment","src":"17211:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17223:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17234:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17219:3:29"},"nodeType":"YulFunctionCall","src":"17219:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17211:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17041:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17055:4:29","type":""}],"src":"16890:353:29"},{"body":{"nodeType":"YulBlock","src":"17369:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17386:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17397:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17379:6:29"},"nodeType":"YulFunctionCall","src":"17379:21:29"},"nodeType":"YulExpressionStatement","src":"17379:21:29"},{"nodeType":"YulVariableDeclaration","src":"17409:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17429:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17423:5:29"},"nodeType":"YulFunctionCall","src":"17423:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17413:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17456:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17467:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17452:3:29"},"nodeType":"YulFunctionCall","src":"17452:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"17472:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17445:6:29"},"nodeType":"YulFunctionCall","src":"17445:34:29"},"nodeType":"YulExpressionStatement","src":"17445:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17527:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17535:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17523:3:29"},"nodeType":"YulFunctionCall","src":"17523:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17544:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17555:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17540:3:29"},"nodeType":"YulFunctionCall","src":"17540:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"17560:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17488:34:29"},"nodeType":"YulFunctionCall","src":"17488:79:29"},"nodeType":"YulExpressionStatement","src":"17488:79:29"},{"nodeType":"YulAssignment","src":"17576:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17592:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17611:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17619:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17607:3:29"},"nodeType":"YulFunctionCall","src":"17607:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17628:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17624:3:29"},"nodeType":"YulFunctionCall","src":"17624:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17603:3:29"},"nodeType":"YulFunctionCall","src":"17603:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17588:3:29"},"nodeType":"YulFunctionCall","src":"17588:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"17635:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17584:3:29"},"nodeType":"YulFunctionCall","src":"17584:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17576:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17338:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17349:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17360:4:29","type":""}],"src":"17248:396:29"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155_$1098__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1333(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value2, value3, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_calldata(value4, value5, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1222(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"509":[{"length":32,"start":276},{"length":32,"start":387},{"length":32,"start":3488},{"length":32,"start":3573}],"2127":[{"length":32,"start":337},{"length":32,"start":1302},{"length":32,"start":1466},{"length":32,"start":2127}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c45760003560e01c8062fdd58e146100c957806301ffc9a7146100ef5780632b4c9f16146101125780634dfde97a1461014c578063572b6c051461017357806373c8a958146101b357806381c197ed146101c85780638da5cb5b146101db578063bc197c81146101e3578063c3666c361461020f578063f223885a14610222578063f23a6e6114610235578063f2fde38b14610248578063f7ba94bd1461025b578063f997659a1461026e575b600080fd5b6100dc6100d73660046110e8565b610296565b6040519081526020015b60405180910390f35b6101026100fd366004611114565b6102bf565b60405190151581526020016100e6565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016100e6565b6101347f000000000000000000000000000000000000000000000000000000000000000081565b610102610181366004611145565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6101c66101c13660046111ad565b6102d3565b005b6101c66101d6366004611246565b6103b6565b61013461058e565b6101f66101f13660046112f2565b6105ad565b6040516001600160e01b031990911681526020016100e6565b6101c661021d3660046111ad565b610724565b6101c6610230366004611246565b61084d565b6101f66102433660046113b0565b6108d8565b6101c6610256366004611145565b6108f3565b6101c6610269366004611246565b610911565b6100dc61027c3660046110e8565b600060208181529281526040808220909352908152205481565b6001600160a01b0382166000908152602081815260408083208484529091529020545b92915050565b60006102b9826102cd610a3a565b90610af3565b6102ec6102de610b53565b6102e66109a8565b90610b5d565b8483811480156102fb57508082145b6103205760405162461bcd60e51b815260040161031790611419565b60405180910390fd5b60005b8181146103ac576103a488888381811061033f5761033f611450565b90506020020160208101906103549190611145565b85858481811061036657610366611450565b9050602002013588888581811061037f5761037f611450565b90506020020160208101906103949190611145565b6001600160a01b03169190610b89565b600101610323565b5050505050505050565b8281146103d6576040516335e83ac360e01b815260040160405180910390fd5b60006103e0610b53565b905060005b848110156104bb57600086868381811061040157610401611450565b905060200201359050600085858481811061041e5761041e611450565b6001600160a01b03871660009081526020818152604080832088845282529091205491029290920135925050818110156104755760405163cf47918160e01b81526004810184905260248101829052604401610317565b61047f828261147c565b6001600160a01b0386166000908152602081815260408083209683529590529390932092909255508190506104b38161148f565b9150506103e5565b50806001600160a01b03167f651c6d84833866465bf050fea9fb84dc59faf4fc13d4607553b539e31e53ff0286866040516104f79291906114da565b60405180910390a2604051631759616b60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632eb2c2d69061055590309085908a908a908a908a906004016114ee565b600060405180830381600087803b15801561056f57600080fd5b505af1158015610583573d6000803e3d6000fd5b505050505050505050565b60006105a861059b6109a8565b546001600160a01b031690565b905090565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105f857604051636524d08b60e01b815260040160405180910390fd5b60005b868110156106cb57600088888381811061061757610617611450565b905060200201359050600087878481811061063457610634611450565b6001600160a01b038e1660009081526020818152604080832088845282529091205461066794919092020135915061154d565b905060018111156106955760405163f4dcf56b60e01b81526004810183905260248101829052604401610317565b6001600160a01b038b166000908152602081815260408083209483529390529190912055806106c38161148f565b9150506105fb565b50876001600160a01b03167fd4960fb57883d065fb41b7f993f9be3105af91fe2b595a398457e1ff226cdc5088886040516107079291906114da565b60405180910390a25063bc197c8160e01b98975050505050505050565b61072f6102de610b53565b84838114801561073e57508082145b61075a5760405162461bcd60e51b815260040161031790611419565b60005b8181146103ac5785858281811061077657610776611450565b905060200201602081019061078b9190611145565b6001600160a01b03166323b872dd308a8a858181106107ac576107ac611450565b90506020020160208101906107c19190611145565b8787868181106107d3576107d3611450565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561082a57600080fd5b505af115801561083e573d6000803e3d6000fd5b5050505080600101905061075d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d6610884610b53565b30878787876040518763ffffffff1660e01b81526004016108aa969594939291906114ee565b600060405180830381600087803b1580156108c457600080fd5b505af11580156103ac573d6000803e3d6000fd5b600060405163036a2f6360e31b815260040160405180910390fd5b61090e6108fe610b53565b826109076109a8565b9190610be0565b50565b61091c6102de610b53565b8281811461093c5760405162461bcd60e51b815260040161031790611419565b60005b8181146109a05761099884848381811061095b5761095b611450565b9050602002013587878481811061097457610974611450565b90506020020160208101906109899190611145565b6001600160a01b031690610c65565b60010161093f565b505050505050565b6000806102b960017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61147c565b6001600160a01b03811615610a1a5781546001600160a01b0319166001600160a01b0382169081178355604051600090600080516020611628833981519152908290a35b610a366307f5828d60e41b6001610a2f610a3a565b9190610a68565b5050565b6000806102b960017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61147c565b600160e01b6001600160e01b0319831601610ac55760405162461bcd60e51b815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c7565006044820152606401610317565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6000600160e01b6001600160e01b0319831601610b12575060006102b9565b63fe00365960e01b6001600160e01b0319831601610b32575060016102b9565b506001600160e01b0319166000908152602091909152604090205460ff1690565b60006105a8610d7b565b81546001600160a01b03828116911614610a365760405162461bcd60e51b815260040161031790611560565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bdb908490610e71565b505050565b82546001600160a01b039081169083168114610c0e5760405162461bcd60e51b815260040161031790611560565b816001600160a01b0316816001600160a01b031614610c5f5783546001600160a01b0319166001600160a01b0383811691821786556040519083169060008051602061162883398151915290600090a35b50505050565b80471015610cb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610317565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d02576040519150601f19603f3d011682016040523d82523d6000602084013e610d07565b606091505b5050905080610bdb5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b6064820152608401610317565b600033321480610d8b5750601836105b15610d9557503390565b60131936013560601c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331480610e605750604051634494d46560e11b81526001600160a01b0382811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e609190611592565b15610e6a57919050565b3391505090565b6000610ec6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f439092919063ffffffff16565b805190915015610bdb5780806020019051810190610ee49190611592565b610bdb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610317565b6060610f528484600085610f5a565b949350505050565b606082471015610fbb5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610317565b600080866001600160a01b03168587604051610fd791906115d8565b60006040518083038185875af1925050503d8060008114611014576040519150601f19603f3d011682016040523d82523d6000602084013e611019565b606091505b509150915061102a87838387611035565b979650505050505050565b606083156110a457825160000361109d576001600160a01b0385163b61109d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610317565b5081610f52565b610f5283838151156110b95781518083602001fd5b8060405162461bcd60e51b815260040161031791906115f4565b6001600160a01b038116811461090e57600080fd5b600080604083850312156110fb57600080fd5b8235611106816110d3565b946020939093013593505050565b60006020828403121561112657600080fd5b81356001600160e01b03198116811461113e57600080fd5b9392505050565b60006020828403121561115757600080fd5b813561113e816110d3565b60008083601f84011261117457600080fd5b5081356001600160401b0381111561118b57600080fd5b6020830191508360208260051b85010111156111a657600080fd5b9250929050565b600080600080600080606087890312156111c657600080fd5b86356001600160401b03808211156111dd57600080fd5b6111e98a838b01611162565b9098509650602089013591508082111561120257600080fd5b61120e8a838b01611162565b9096509450604089013591508082111561122757600080fd5b5061123489828a01611162565b979a9699509497509295939492505050565b6000806000806040858703121561125c57600080fd5b84356001600160401b038082111561127357600080fd5b61127f88838901611162565b9096509450602087013591508082111561129857600080fd5b506112a587828801611162565b95989497509550505050565b60008083601f8401126112c357600080fd5b5081356001600160401b038111156112da57600080fd5b6020830191508360208285010111156111a657600080fd5b60008060008060008060008060a0898b03121561130e57600080fd5b8835611319816110d3565b97506020890135611329816110d3565b965060408901356001600160401b038082111561134557600080fd5b6113518c838d01611162565b909850965060608b013591508082111561136a57600080fd5b6113768c838d01611162565b909650945060808b013591508082111561138f57600080fd5b5061139c8b828c016112b1565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156113c957600080fd5b86356113d4816110d3565b955060208701356113e4816110d3565b9450604087013593506060870135925060808701356001600160401b0381111561140d57600080fd5b61123489828a016112b1565b6020808252601d908201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156102b9576102b9611466565b6000600182016114a1576114a1611466565b5060010190565b81835260006001600160fb1b038311156114c157600080fd5b8260051b80836020870137939093016020019392505050565b602081526000610f526020830184866114a8565b6001600160a01b0387811682528616602082015260a06040820181905260009061151b90830186886114a8565b828103606084015261152e8185876114a8565b8381036080909401939093525050600081526020019695505050505050565b808201808211156102b9576102b9611466565b60208082526018908201527727bbb732b939b434b81d103737ba103a34329037bbb732b960411b604082015260600190565b6000602082840312156115a457600080fd5b8151801515811461113e57600080fd5b60005b838110156115cf5781810151838201526020016115b7565b50506000910152565b600082516115ea8184602087016115b4565b9190910192915050565b60208152600082518060208401526116138160408501602087016115b4565b601f01601f1916919091016040019291505056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212206fd33c765d8850681f6b6ab5a914a6b84a749a0e4552780d86ce166d0ed6264064736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x4DFDE97A EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x81C197ED EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0xF223885A EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF997659A EQ PUSH2 0x26E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0xD7 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E8 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x1114 JUMP JUMPDEST PUSH2 0x2BF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x134 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x181 CALLDATASIZE PUSH1 0x4 PUSH2 0x1145 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x11AD JUMP JUMPDEST PUSH2 0x2D3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C6 PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x3B6 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x58E JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x1F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F2 JUMP JUMPDEST PUSH2 0x5AD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x11AD JUMP JUMPDEST PUSH2 0x724 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x230 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x84D JUMP JUMPDEST PUSH2 0x1F6 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B0 JUMP JUMPDEST PUSH2 0x8D8 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x1145 JUMP JUMPDEST PUSH2 0x8F3 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x1246 JUMP JUMPDEST PUSH2 0x911 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x10E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B9 DUP3 PUSH2 0x2CD PUSH2 0xA3A JUMP JUMPDEST SWAP1 PUSH2 0xAF3 JUMP JUMPDEST PUSH2 0x2EC PUSH2 0x2DE PUSH2 0xB53 JUMP JUMPDEST PUSH2 0x2E6 PUSH2 0x9A8 JUMP JUMPDEST SWAP1 PUSH2 0xB5D JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x2FB JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x320 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3AC JUMPI PUSH2 0x3A4 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x33F JUMPI PUSH2 0x33F PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x354 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x366 JUMPI PUSH2 0x366 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x37F JUMPI PUSH2 0x37F PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x394 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0xB89 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x323 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x3D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3E0 PUSH2 0xB53 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x401 JUMPI PUSH2 0x401 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x41E JUMPI PUSH2 0x41E PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD SWAP3 POP POP DUP2 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x317 JUMP JUMPDEST PUSH2 0x47F DUP3 DUP3 PUSH2 0x147C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP DUP2 SWAP1 POP PUSH2 0x4B3 DUP2 PUSH2 0x148F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3E5 JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x651C6D84833866465BF050FEA9FB84DC59FAF4FC13D4607553B539E31E53FF02 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x4F7 SWAP3 SWAP2 SWAP1 PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x1759616B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2EB2C2D6 SWAP1 PUSH2 0x555 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x583 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A8 PUSH2 0x59B PUSH2 0x9A8 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6524D08B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x6CB JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x617 JUMPI PUSH2 0x617 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x634 JUMPI PUSH2 0x634 PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x667 SWAP5 SWAP2 SWAP1 SWAP3 MUL ADD CALLDATALOAD SWAP2 POP PUSH2 0x154D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x695 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF4DCF56B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SSTORE DUP1 PUSH2 0x6C3 DUP2 PUSH2 0x148F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x5FB JUMP JUMPDEST POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xD4960FB57883D065FB41B7F993F9BE3105AF91FE2B595A398457E1FF226CDC50 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x707 SWAP3 SWAP2 SWAP1 PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x72F PUSH2 0x2DE PUSH2 0xB53 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x73E JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x75A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3AC JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x776 JUMPI PUSH2 0x776 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x78B SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x7AC JUMPI PUSH2 0x7AC PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7C1 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x7D3 JUMPI PUSH2 0x7D3 PUSH2 0x1450 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x83E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x75D JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2EB2C2D6 PUSH2 0x884 PUSH2 0xB53 JUMP JUMPDEST ADDRESS DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8AA SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x14EE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH4 0x36A2F63 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x90E PUSH2 0x8FE PUSH2 0xB53 JUMP JUMPDEST DUP3 PUSH2 0x907 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBE0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x91C PUSH2 0x2DE PUSH2 0xB53 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x93C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1419 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9A0 JUMPI PUSH2 0x998 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x95B JUMPI PUSH2 0x95B PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x974 JUMPI PUSH2 0x974 PUSH2 0x1450 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x989 SWAP2 SWAP1 PUSH2 0x1145 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0xC65 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x93F JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B9 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x147C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xA1A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1628 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0xA36 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0xA2F PUSH2 0xA3A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA68 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2B9 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x147C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xAC5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB12 JUMPI POP PUSH1 0x0 PUSH2 0x2B9 JUMP JUMPDEST PUSH4 0xFE003659 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB32 JUMPI POP PUSH1 0x1 PUSH2 0x2B9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A8 PUSH2 0xD7B JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA36 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1560 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xBDB SWAP1 DUP5 SWAP1 PUSH2 0xE71 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC0E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP1 PUSH2 0x1560 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC5F JUMPI DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1628 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xCB5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD02 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x1958DA5C1A595B9D081B585E481A185D99481C995D995C9D1959 PUSH1 0x32 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD8B JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD95 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 PUSH2 0xE60 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x4494D465 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE60 SWAP2 SWAP1 PUSH2 0x1592 JUMP JUMPDEST ISZERO PUSH2 0xE6A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC6 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF43 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xBDB JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xEE4 SWAP2 SWAP1 PUSH2 0x1592 JUMP JUMPDEST PUSH2 0xBDB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF52 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xF5A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xFBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x317 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xFD7 SWAP2 SWAP1 PUSH2 0x15D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1014 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x102A DUP8 DUP4 DUP4 DUP8 PUSH2 0x1035 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x10A4 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x109D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x109D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x317 JUMP JUMPDEST POP DUP2 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0xF52 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x10B9 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x317 SWAP2 SWAP1 PUSH2 0x15F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1106 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x113E DUP2 PUSH2 0x10D3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x118B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x11C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x11DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11E9 DUP11 DUP4 DUP12 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x120E DUP11 DUP4 DUP12 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1234 DUP10 DUP3 DUP11 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x125C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127F DUP9 DUP4 DUP10 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1298 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A5 DUP8 DUP3 DUP9 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x12DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x11A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x130E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x1319 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x1329 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1351 DUP13 DUP4 DUP14 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1376 DUP13 DUP4 DUP14 ADD PUSH2 0x1162 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x138F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x139C DUP12 DUP3 DUP13 ADD PUSH2 0x12B1 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x13D4 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x13E4 DUP2 PUSH2 0x10D3 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x140D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1234 DUP10 DUP3 DUP11 ADD PUSH2 0x12B1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2B9 JUMPI PUSH2 0x2B9 PUSH2 0x1466 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x14A1 JUMPI PUSH2 0x14A1 PUSH2 0x1466 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x14C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xF52 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x14A8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x151B SWAP1 DUP4 ADD DUP7 DUP9 PUSH2 0x14A8 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x152E DUP2 DUP6 DUP8 PUSH2 0x14A8 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2B9 JUMPI PUSH2 0x2B9 PUSH2 0x1466 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x27BBB732B939B434B81D103737BA103A34329037BBB732B9 PUSH1 0x41 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x15CF JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x15B7 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x15EA DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x15B4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1613 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x15B4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID DUP12 0xE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E0A26469706673582212206FD33C765D8850681F PUSH12 0x6AB5A914A6B84A749A0E4552 PUSH25 0xD86CE166D0ED6264064736F6C634300081100330000000000 ","sourceMap":"1146:5631:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2861:129;;;;;;:::i;:::-;;:::i;:::-;;;616:25:29;;;604:2;589:18;2861:129:27;;;;;;;;541:174:4;;;;;;:::i;:::-;;:::i;:::-;;;1108:14:29;;1101:22;1083:41;;1071:2;1056:18;541:174:4;943:187:29;727:114:7;816:18;727:114;;;-1:-1:-1;;;;;1325:32:29;;;1307:51;;1295:2;1280:18;727:114:7;1135:229:29;1748:41:27;;;;;876:157:7;;;;;;:::i;:::-;1007:18;-1:-1:-1;;;;;986:40:7;;;;;;;876:157;2975:512:14;;;;;;:::i;:::-;;:::i;:::-;;4064:724:27;;;;;;:::i;:::-;;:::i;709:129:1:-;;;:::i;5681:729:27:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;;6169:33:29;;;6151:52;;6139:2;6124:18;5681:729:27;6007:202:29;4209:541:14;;;;;;:::i;:::-;;:::i;3322:177:27:-;;;;;;:::i;:::-;;:::i;4913:153::-;;;;;;:::i;:::-;;:::i;872:161:1:-;;;;;;:::i;:::-;;:::i;1812:450:14:-;;;;;;:::i;:::-;;:::i;1891:67:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2861:129;-1:-1:-1;;;;;2958:21:27;;2932:7;2958:21;;;;;;;;;;;:25;;;;;;;;;2861:129;;;;;:::o;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;2975:512:14:-;3108:70;3165:12;:10;:12::i;:::-;3108:33;:31;:33::i;:::-;:56;;:70::i;:::-;3205:8;3238:23;;;:51;;;;-1:-1:-1;3265:24:14;;;3238:51;3230:93;;;;-1:-1:-1;;;3230:93:14;;;;;;;:::i;:::-;;;;;;;;;3362:9;3357:114;3378:6;3373:1;:11;3357:114;;3409:47;3432:8;;3441:1;3432:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3445:7;;3453:1;3445:10;;;;;;;:::i;:::-;;;;;;;3409:6;;3416:1;3409:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3409:22:14;;:47;:22;:47::i;:::-;3386:3;;3357:114;;;;3098:389;2975:512;;;;;;:::o;4064:724:27:-;4156:27;;;4152:85;;4206:20;;-1:-1:-1;;;4206:20:27;;;;;;;;;;;4152:85;4246:14;4263:12;:10;:12::i;:::-;4246:29;;4290:9;4285:366;4305:14;;;4285:366;;;4340:10;4353:3;;4357:1;4353:6;;;;;;;:::i;:::-;;;;;;;4340:19;;4373:13;4389:6;;4396:1;4389:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;4436:20:27;;4412:21;4436:20;;;4389:9;4436:20;;;;;;;:24;;;;;;;;;4389:9;;;;;;;;-1:-1:-1;;4478:21:27;;;4474:105;;;4526:38;;-1:-1:-1;;;4526:38:27;;;;;9868:25:29;;;9909:18;;;9902:34;;;9841:18;;4526:38:27;9694:248:29;4474:105:27;4619:21;4635:5;4619:13;:21;:::i;:::-;-1:-1:-1;;;;;4592:20:27;;:12;:20;;;;;;;;;;;:24;;;;;;;;;;:48;;;;-1:-1:-1;4321:3:27;;-1:-1:-1;4321:3:27;;;:::i;:::-;;;;4285:366;;;;4681:6;-1:-1:-1;;;;;4666:27:27;;4689:3;;4666:27;;;;;;;:::i;:::-;;;;;;;;4704:77;;-1:-1:-1;;;4704:77:27;;-1:-1:-1;;;;;4704:15:27;:37;;;;:77;;4750:4;;4757:6;;4765:3;;;;4770:6;;;;4704:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4142:646;4064:724;;;;:::o;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;-1:-1:-1;;;;;3352:15:3;;3256:118;790:41:1;783:48;;709:129;:::o;5681:729:27:-;5867:6;5889:10;-1:-1:-1;;;;;5911:15:27;5889:38;;5885:94;;5950:18;;-1:-1:-1;;;5950:18:27;;;;;;;;;;;5885:94;5993:9;5988:307;6008:14;;;5988:307;;;6043:10;6056:3;;6060:1;6056:6;;;;;;;:::i;:::-;;;;;;;6043:19;;6076:18;6122:6;;6129:1;6122:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;6097:18:27;;:12;:18;;;6122:9;6097:18;;;;;;;:22;;;;;;;;;:34;;6122:9;;;;;;;-1:-1:-1;6097:34:27;:::i;:::-;6076:55;;6162:1;6149:10;:14;6145:91;;;6190:31;;-1:-1:-1;;;6190:31:27;;;;;9868:25:29;;;9909:18;;;9902:34;;;9841:18;;6190:31:27;9694:248:29;6145:91:27;-1:-1:-1;;;;;6249:18:27;;:12;:18;;;;;;;;;;;:22;;;;;;;;;;:35;6024:3;;;;:::i;:::-;;;;5988:307;;;;6323:4;-1:-1:-1;;;;;6309:24:27;;6329:3;;6309:24;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;5681:729:27;;;;;;;;;;:::o;4209:541:14:-;4348:70;4405:12;:10;:12::i;4348:70::-;4445:8;4478:26;;;:55;;;;-1:-1:-1;4508:25:14;;;4478:55;4470:97;;;;-1:-1:-1;;;4470:97:14;;;;;;;:::i;:::-;4606:9;4601:133;4622:6;4617:1;:11;4601:133;;4653:9;;4663:1;4653:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4653:25:14;;4687:4;4694:8;;4703:1;4694:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4707:8;;4716:1;4707:11;;;;;;;:::i;:::-;4653:66;;-1:-1:-1;;;;;;4653:66:14;;;;;;;-1:-1:-1;;;;;12565:15:29;;;4653:66:14;;;12547:34:29;12617:15;;;;12597:18;;;12590:43;-1:-1:-1;4707:11:14;;;;;;12649:18:29;;;12642:34;12482:18;;4653:66:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:3;;;;;4601:133;;3322:177:27;3409:15;-1:-1:-1;;;;;3409:37:27;;3447:12;:10;:12::i;:::-;3469:4;3476:3;;3481:6;;3409:83;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4913:153;5015:6;5040:19;;-1:-1:-1;;;5040:19:27;;;;;;;;;;;872:161:1;951:75;1003:12;:10;:12::i;:::-;1017:8;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;1812:450:14:-;1924:70;1981:12;:10;:12::i;1924:70::-;2021:8;2054:24;;;2046:66;;;;-1:-1:-1;;;2046:66:14;;;;;;;:::i;:::-;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2198:21:14;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;;;;;;;;;;;;1511:46:3;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;13149:2:29;774:79:6;;;13131:21:29;13188:2;13168:18;;;13161:30;13227:33;13207:18;;;13200:61;13278:18;;774:79:6;12947:355:29;774:79:6;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;1267:340::-;1355:14;-1:-1:-1;;;;;;;;;1385:35:6;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;-1:-1:-1;;;;;;;;;1472:40:6;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;;;;;;;1566:34:6;:21;:34;;;;;;;;;;;;;;;1267:340::o;6416:175:27:-;6517:7;6543:41;:39;:41::i;3540:161:3:-;3650:15;;-1:-1:-1;;;;;3639:26:3;;;3650:15;;3639:26;3631:63;;;;-1:-1:-1;;;3631:63:3;;;;;;;:::i;763:205:23:-;902:58;;;-1:-1:-1;;;;;13852:32:29;;902:58:23;;;13834:51:29;13901:18;;;;13894:34;;;902:58:23;;;;;;;;;;13807:18:29;;;;902:58:23;;;;;;;;-1:-1:-1;;;;;902:58:23;-1:-1:-1;;;902:58:23;;;875:86;;895:5;;875:19;:86::i;:::-;763:205;;;:::o;2760:369:3:-;2882:15;;-1:-1:-1;;;;;2882:15:3;;;;2915:23;;;;2907:60;;;;-1:-1:-1;;;2907:60:3;;;;;;;:::i;:::-;2998:8;-1:-1:-1;;;;;2981:25:3;:13;-1:-1:-1;;;;;2981:25:3;;2977:146;;3022:26;;-1:-1:-1;;;;;;3022:26:3;-1:-1:-1;;;;;3022:26:3;;;;;;;;3067:45;;;;;;-1:-1:-1;;;;;;;;;;;3067:45:3;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;2412:312:24:-;2526:6;2501:21;:31;;2493:73;;;;-1:-1:-1;;;2493:73:24;;14141:2:29;2493:73:24;;;14123:21:29;14180:2;14160:18;;;14153:30;14219:31;14199:18;;;14192:59;14268:18;;2493:73:24;13939:353:29;2493:73:24;2578:12;2596:9;-1:-1:-1;;;;;2596:14:24;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;-1:-1:-1;;;2639:78:24;;14709:2:29;2639:78:24;;;14691:21:29;14748:2;14728:18;;;14721:30;14787:34;14767:18;;;14760:62;-1:-1:-1;;;14838:18:29;;;14831:56;14904:19;;2639:78:24;14507:422:29;781:743:8;834:7;1044:10;1058:9;1044:23;;:47;;-1:-1:-1;1089:2:8;1071:8;:20;1044:47;1040:95;;;-1:-1:-1;1114:10:8;;781:743::o;1040:95::-;-1:-1:-1;;465:14:11;461:23;448:37;444:2;440:46;1369:18:8;-1:-1:-1;;;;;1347:41:8;:10;:41;;:103;;-1:-1:-1;1392:58:8;;-1:-1:-1;;;1392:58:8;;-1:-1:-1;;;;;15164:15:29;;;1392:58:8;;;15146:34:29;1439:10:8;15196:18:29;;;15189:43;1392:18:8;:38;;;;15081:18:29;;1392:58:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1343:147;;;1473:6;781:743;-1:-1:-1;781:743:8:o;1343:147::-;1507:10;1500:17;;;781:743;:::o;3747:706:23:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:23;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:23;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:23;;15727:2:29;4351:85:23;;;15709:21:29;15766:2;15746:18;;;15739:30;15805:34;15785:18;;;15778:62;-1:-1:-1;;;15856:18:29;;;15849:40;15906:19;;4351:85:23;15525:406:29;3873:223:24;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:24:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:24;;16138:2:29;5149:81:24;;;16120:21:29;16177:2;16157:18;;;16150:30;16216:34;16196:18;;;16189:62;-1:-1:-1;;;16267:18:29;;;16260:36;16313:19;;5149:81:24;15936:402:29;5149:81:24;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:24;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:24:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:24;;;7908:60;;;;-1:-1:-1;;;7908:60:24;;17092:2:29;7908:60:24;;;17074:21:29;17131:2;17111:18;;;17104:30;17170:31;17150:18;;;17143:59;17219:18;;7908:60:24;16890:353:29;7908:60:24;-1:-1:-1;8003:10:24;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:24;;;;;;;;:::i;14:131:29:-;-1:-1:-1;;;;;89:31:29;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:29:o;652:286::-;710:6;763:2;751:9;742:7;738:23;734:32;731:52;;;779:1;776;769:12;731:52;805:23;;-1:-1:-1;;;;;;857:32:29;;847:43;;837:71;;904:1;901;894:12;837:71;927:5;652:286;-1:-1:-1;;;652:286:29:o;1594:247::-;1653:6;1706:2;1694:9;1685:7;1681:23;1677:32;1674:52;;;1722:1;1719;1712:12;1674:52;1761:9;1748:23;1780:31;1805:5;1780:31;:::i;1846:367::-;1909:8;1919:6;1973:3;1966:4;1958:6;1954:17;1950:27;1940:55;;1991:1;1988;1981:12;1940:55;-1:-1:-1;2014:20:29;;-1:-1:-1;;;;;2046:30:29;;2043:50;;;2089:1;2086;2079:12;2043:50;2126:4;2118:6;2114:17;2102:29;;2186:3;2179:4;2169:6;2166:1;2162:14;2154:6;2150:27;2146:38;2143:47;2140:67;;;2203:1;2200;2193:12;2140:67;1846:367;;;;;:::o;2218:1103::-;2391:6;2399;2407;2415;2423;2431;2484:2;2472:9;2463:7;2459:23;2455:32;2452:52;;;2500:1;2497;2490:12;2452:52;2527:23;;-1:-1:-1;;;;;2599:14:29;;;2596:34;;;2626:1;2623;2616:12;2596:34;2665:70;2727:7;2718:6;2707:9;2703:22;2665:70;:::i;:::-;2754:8;;-1:-1:-1;2639:96:29;-1:-1:-1;2842:2:29;2827:18;;2814:32;;-1:-1:-1;2858:16:29;;;2855:36;;;2887:1;2884;2877:12;2855:36;2926:72;2990:7;2979:8;2968:9;2964:24;2926:72;:::i;:::-;3017:8;;-1:-1:-1;2900:98:29;-1:-1:-1;3105:2:29;3090:18;;3077:32;;-1:-1:-1;3121:16:29;;;3118:36;;;3150:1;3147;3140:12;3118:36;;3189:72;3253:7;3242:8;3231:9;3227:24;3189:72;:::i;:::-;2218:1103;;;;-1:-1:-1;2218:1103:29;;-1:-1:-1;2218:1103:29;;3280:8;;2218:1103;-1:-1:-1;;;2218:1103:29:o;3326:773::-;3448:6;3456;3464;3472;3525:2;3513:9;3504:7;3500:23;3496:32;3493:52;;;3541:1;3538;3531:12;3493:52;3568:23;;-1:-1:-1;;;;;3640:14:29;;;3637:34;;;3667:1;3664;3657:12;3637:34;3706:70;3768:7;3759:6;3748:9;3744:22;3706:70;:::i;:::-;3795:8;;-1:-1:-1;3680:96:29;-1:-1:-1;3883:2:29;3868:18;;3855:32;;-1:-1:-1;3899:16:29;;;3896:36;;;3928:1;3925;3918:12;3896:36;;3967:72;4031:7;4020:8;4009:9;4005:24;3967:72;:::i;:::-;3326:773;;;;-1:-1:-1;4058:8:29;-1:-1:-1;;;;3326:773:29:o;4312:347::-;4363:8;4373:6;4427:3;4420:4;4412:6;4408:17;4404:27;4394:55;;4445:1;4442;4435:12;4394:55;-1:-1:-1;4468:20:29;;-1:-1:-1;;;;;4500:30:29;;4497:50;;;4543:1;4540;4533:12;4497:50;4580:4;4572:6;4568:17;4556:29;;4632:3;4625:4;4616:6;4608;4604:19;4600:30;4597:39;4594:59;;;4649:1;4646;4639:12;4664:1338;4824:6;4832;4840;4848;4856;4864;4872;4880;4933:3;4921:9;4912:7;4908:23;4904:33;4901:53;;;4950:1;4947;4940:12;4901:53;4989:9;4976:23;5008:31;5033:5;5008:31;:::i;:::-;5058:5;-1:-1:-1;5115:2:29;5100:18;;5087:32;5128:33;5087:32;5128:33;:::i;:::-;5180:7;-1:-1:-1;5238:2:29;5223:18;;5210:32;-1:-1:-1;;;;;5291:14:29;;;5288:34;;;5318:1;5315;5308:12;5288:34;5357:70;5419:7;5410:6;5399:9;5395:22;5357:70;:::i;:::-;5446:8;;-1:-1:-1;5331:96:29;-1:-1:-1;5534:2:29;5519:18;;5506:32;;-1:-1:-1;5550:16:29;;;5547:36;;;5579:1;5576;5569:12;5547:36;5618:72;5682:7;5671:8;5660:9;5656:24;5618:72;:::i;:::-;5709:8;;-1:-1:-1;5592:98:29;-1:-1:-1;5797:3:29;5782:19;;5769:33;;-1:-1:-1;5814:16:29;;;5811:36;;;5843:1;5840;5833:12;5811:36;;5882:60;5934:7;5923:8;5912:9;5908:24;5882:60;:::i;:::-;4664:1338;;;;-1:-1:-1;4664:1338:29;;-1:-1:-1;4664:1338:29;;;;;;5961:8;-1:-1:-1;;;4664:1338:29:o;7323:823::-;7429:6;7437;7445;7453;7461;7469;7522:3;7510:9;7501:7;7497:23;7493:33;7490:53;;;7539:1;7536;7529:12;7490:53;7578:9;7565:23;7597:31;7622:5;7597:31;:::i;:::-;7647:5;-1:-1:-1;7704:2:29;7689:18;;7676:32;7717:33;7676:32;7717:33;:::i;:::-;7769:7;-1:-1:-1;7823:2:29;7808:18;;7795:32;;-1:-1:-1;7874:2:29;7859:18;;7846:32;;-1:-1:-1;7929:3:29;7914:19;;7901:33;-1:-1:-1;;;;;7946:30:29;;7943:50;;;7989:1;7986;7979:12;7943:50;8028:58;8078:7;8069:6;8058:9;8054:22;8028:58;:::i;8937:353::-;9139:2;9121:21;;;9178:2;9158:18;;;9151:30;9217:31;9212:2;9197:18;;9190:59;9281:2;9266:18;;8937:353::o;9295:127::-;9356:10;9351:3;9347:20;9344:1;9337:31;9387:4;9384:1;9377:15;9411:4;9408:1;9401:15;9947:127;10008:10;10003:3;9999:20;9996:1;9989:31;10039:4;10036:1;10029:15;10063:4;10060:1;10053:15;10079:128;10146:9;;;10167:11;;;10164:37;;;10181:18;;:::i;10212:135::-;10251:3;10272:17;;;10269:43;;10292:18;;:::i;:::-;-1:-1:-1;10339:1:29;10328:13;;10212:135::o;10352:311::-;10440:19;;;10422:3;-1:-1:-1;;;;;10471:31:29;;10468:51;;;10515:1;10512;10505:12;10468:51;10551:6;10548:1;10544:14;10603:8;10596:5;10589:4;10584:3;10580:14;10567:45;10632:18;;;;10652:4;10628:29;;10352:311;-1:-1:-1;;;10352:311:29:o;10668:288::-;10857:2;10846:9;10839:21;10820:4;10877:73;10946:2;10935:9;10931:18;10923:6;10915;10877:73;:::i;10961:943::-;-1:-1:-1;;;;;11432:15:29;;;11414:34;;11484:15;;11479:2;11464:18;;11457:43;11394:3;11531:2;11516:18;;11509:31;;;11357:4;;11563:74;;11617:19;;11609:6;11601;11563:74;:::i;:::-;11685:9;11677:6;11673:22;11668:2;11657:9;11653:18;11646:50;11719:61;11773:6;11765;11757;11719:61;:::i;:::-;11817:22;;;11811:3;11796:19;;;11789:51;;;;-1:-1:-1;;11864:1:29;11849:17;;11895:2;11883:15;;10961:943;-1:-1:-1;;;;;;10961:943:29:o;11909:125::-;11974:9;;;11995:10;;;11992:36;;;12008:18;;:::i;13307:348::-;13509:2;13491:21;;;13548:2;13528:18;;;13521:30;-1:-1:-1;;;13582:2:29;13567:18;;13560:54;13646:2;13631:18;;13307:348::o;15243:277::-;15310:6;15363:2;15351:9;15342:7;15338:23;15334:32;15331:52;;;15379:1;15376;15369:12;15331:52;15411:9;15405:16;15464:5;15457:13;15450:21;15443:5;15440:32;15430:60;;15486:1;15483;15476:12;16343:250;16428:1;16438:113;16452:6;16449:1;16446:13;16438:113;;;16528:11;;;16522:18;16509:11;;;16502:39;16474:2;16467:10;16438:113;;;-1:-1:-1;;16585:1:29;16567:16;;16560:27;16343:250::o;16598:287::-;16727:3;16765:6;16759:13;16781:66;16840:6;16835:3;16828:4;16820:6;16816:17;16781:66;:::i;:::-;16863:16;;;;;16598:287;-1:-1:-1;;16598:287:29:o;17248:396::-;17397:2;17386:9;17379:21;17360:4;17429:6;17423:13;17472:6;17467:2;17456:9;17452:18;17445:34;17488:79;17560:6;17555:2;17544:9;17540:18;17535:2;17527:6;17523:15;17488:79;:::i;:::-;17628:2;17607:15;-1:-1:-1;;17603:29:29;17588:45;;;;17635:2;17584:54;;17248:396;-1:-1:-1;;17248:396:29:o"},"gasEstimates":{"creation":{"codeDepositCost":"1151400","executionCost":"infinite","totalCost":"infinite"},"external":{"TOKEN_INVENTORY()":"infinite","balanceOf(address,uint256)":"2611","deposit(uint256[],uint256[])":"infinite","escrowedNFTs(address,uint256)":"2875","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite","withdraw(uint256[],uint256[])":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"TOKEN_INVENTORY()":"4dfde97a","balanceOf(address,uint256)":"00fdd58e","deposit(uint256[],uint256[])":"f223885a","escrowedNFTs(address,uint256)":"f997659a","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","withdraw(uint256[],uint256[])":"81c197ed"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155\",\"name\":\"inventory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInventory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedMethod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"DepositTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_INVENTORY\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"The address of the token holder\",\"id\":\"The ID of the token\"},\"returns\":{\"_0\":\"balance The amount of token escrowed held by the token holder correponding to the token ID\"}},\"constructor\":{\"details\":\"Throws if the _inventory address is a zero address.ContractOwnership is required to initiate TokenRecovery\",\"params\":{\"forwarderRegistry\":\"The forwarder registry contract information\",\"inventory\":\"The inventory contract address\"}},\"deposit(uint256[],uint256[])\":{\"details\":\"Batch transfer tokens from the sender to this contract\",\"params\":{\"ids\":\"An array containing ids of each token being transferred (corresponds to orbTypes)\",\"values\":\"An array containing amounts of each token being transferred (corresponds to quantities)\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if the sender is not in the inventory.Updates the escrowedTokens mapping.Reverts if the updated token balance is greater than 1Emits a {DepositTokens} event.\",\"params\":{\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (corresponds to orbTypes)\",\"values\":\"An array containing amounts of each token being transferred (corresponds to quantities)\"},\"returns\":{\"_0\":\"selector The function selector\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if this method has been triggered.\"},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw(uint256[],uint256[])\":{\"details\":\"Reverts if the array length of ids & values does not match.Reverts if the sender does not have enough balance.Updates the escrowedTokens mapping.Emits {WithdrawTokens} events.Transfers the token from this contract to the sender's address\",\"params\":{\"ids\":\"An array containing ids of each token being transferred (corresponds to orbTypes)\",\"values\":\"An array containing amounts of each token being transferred (corresponds to quantities)\"}}},\"title\":\"TokenEscrow contract\",\"version\":1},\"userdoc\":{\"events\":{\"DepositTokens(address,uint256[])\":{\"notice\":\"Emitted when tokens are deposited\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"WithdrawTokens(address,uint256[])\":{\"notice\":\"Emitted when tokens are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"TOKEN_INVENTORY()\":{\"notice\":\"An Orb contract reference\"},\"balanceOf(address,uint256)\":{\"notice\":\"Returns the escrowed token balance of a given token held by a given address\"},\"constructor\":{\"notice\":\"Creates a new escrow contract\"},\"deposit(uint256[],uint256[])\":{\"notice\":\"Handles the deposit of tokens.\"},\"escrowedNFTs(address,uint256)\":{\"notice\":\"Mapping from owner address to a mapping from token ID to escrowed token count.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple types of tokens.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single type of token.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw(uint256[],uint256[])\":{\"notice\":\"Handles token withdrawal\"}},\"notice\":\"Contract that allows users to escrow tokens for use in the Anichess Game.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/escrow/TokenEscrow.sol\":\"TokenEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0x6f9d7bfb917d66343e44d9f1a89f18e407d8458cfc4e58ebe2164e51fc4e4ff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/escrow/TokenEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\n\\n/// @title TokenEscrow contract\\n/// @notice Contract that allows users to escrow tokens for use in the Anichess Game.\\ncontract TokenEscrow is ForwarderRegistryContext, TokenRecovery, ERC1155TokenReceiver {\\n    /// @notice Emitted when tokens are deposited\\n    event DepositTokens(address indexed user, uint256[] ids);\\n\\n    /// @notice Emitted when tokens are withdrawn\\n    event WithdrawTokens(address indexed user, uint256[] ids);\\n\\n    // Custom errors\\n    error InvalidInventory();\\n    error UnsupportedMethod();\\n    error InsufficientBalance(uint256 tokenId, uint256 balance);\\n    error BalanceExceeded(uint256 tokenId, uint256 balance);\\n    error InconsistentArrays();\\n\\n    /// @notice An Orb contract reference\\n    IERC1155 public immutable TOKEN_INVENTORY;\\n\\n    /// @notice Mapping from owner address to a mapping from token ID to escrowed token count.\\n    mapping(address => mapping(uint256 => uint256)) public escrowedNFTs;\\n\\n    /// @notice Creates a new escrow contract\\n    /// @dev Throws if the _inventory address is a zero address.\\n    /// @dev ContractOwnership is required to initiate TokenRecovery\\n    /// @param forwarderRegistry The forwarder registry contract information\\n    /// @param inventory The inventory contract address\\n    constructor(IForwarderRegistry forwarderRegistry, IERC1155 inventory) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        if (address(inventory) == address(0)) {\\n            revert InvalidInventory();\\n        }\\n        TOKEN_INVENTORY = inventory;\\n    }\\n\\n    /// @notice Returns the escrowed token balance of a given token held by a given address\\n    /// @param account The address of the token holder\\n    /// @param id The ID of the token\\n    /// @return balance The amount of token escrowed held by the token holder correponding to the token ID\\n    function balanceOf(address account, uint256 id) external view returns (uint256) {\\n        return escrowedNFTs[account][id];\\n    }\\n\\n    /// @notice Handles the deposit of tokens.\\n    /// @dev Batch transfer tokens from the sender to this contract\\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\\n    function deposit(uint256[] calldata ids, uint256[] calldata values) external {\\n        TOKEN_INVENTORY.safeBatchTransferFrom(_msgSender(), address(this), ids, values, \\\"\\\");\\n    }\\n\\n    /// @notice Handles token withdrawal\\n    /// @dev Reverts if the array length of ids & values does not match.\\n    /// @dev Reverts if the sender does not have enough balance.\\n    /// @dev Updates the escrowedTokens mapping.\\n    /// @dev Emits {WithdrawTokens} events.\\n    /// @dev Transfers the token from this contract to the sender's address\\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\\n    function withdraw(uint256[] calldata ids, uint256[] calldata values) external {\\n        if (ids.length != values.length) {\\n            revert InconsistentArrays();\\n        }\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            uint256 senderBalance = escrowedNFTs[sender][id];\\n            if (senderBalance < value) {\\n                revert InsufficientBalance(id, senderBalance);\\n            }\\n            escrowedNFTs[sender][id] = senderBalance - value;\\n        }\\n\\n        emit WithdrawTokens(sender, ids);\\n\\n        TOKEN_INVENTORY.safeBatchTransferFrom(address(this), sender, ids, values, \\\"\\\");\\n    }\\n\\n    /// @notice Handles the receipt of a single type of token.\\n    /// @dev Reverts if this method has been triggered.\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns (bytes4) {\\n        revert UnsupportedMethod();\\n    }\\n\\n    /// @notice Handles the receipt of multiple types of tokens.\\n    /// @dev Reverts if the sender is not in the inventory.\\n    /// @dev Updates the escrowedTokens mapping.\\n    /// @dev Reverts if the updated token balance is greater than 1\\n    /// @dev Emits a {DepositTokens} event.\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\\n    /// @return selector The function selector\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(TOKEN_INVENTORY)) {\\n            revert InvalidInventory();\\n        }\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 newBalance = escrowedNFTs[from][id] + values[i];\\n            if (newBalance > 1) {\\n                revert BalanceExceeded(id, newBalance);\\n            }\\n            escrowedNFTs[from][id] = newBalance;\\n        }\\n        emit DepositTokens(from, ids);\\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xd94fda89c0b59d11cb6c98c7411d42766af01844effd5286078025216ffc2064\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2134,"contract":"contracts/escrow/TokenEscrow.sol:TokenEscrow","label":"escrowedNFTs","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"DepositTokens(address,uint256[])":{"notice":"Emitted when tokens are deposited"},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"WithdrawTokens(address,uint256[])":{"notice":"Emitted when tokens are withdrawn"}},"kind":"user","methods":{"TOKEN_INVENTORY()":{"notice":"An Orb contract reference"},"balanceOf(address,uint256)":{"notice":"Returns the escrowed token balance of a given token held by a given address"},"constructor":{"notice":"Creates a new escrow contract"},"deposit(uint256[],uint256[])":{"notice":"Handles the deposit of tokens."},"escrowedNFTs(address,uint256)":{"notice":"Mapping from owner address to a mapping from token ID to escrowed token count."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple types of tokens."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single type of token."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw(uint256[],uint256[])":{"notice":"Handles token withdrawal"}},"notice":"Contract that allows users to escrow tokens for use in the Anichess Game.","version":1}}},"contracts/mocks/TokenEscrow/TokenEscrowMock.sol":{"TokenEscrowMock":{"abi":[{"inputs":[{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"},{"internalType":"contract IERC1155","name":"inventory_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"BalanceExceeded","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidInventory","type":"error"},{"inputs":[],"name":"UnsupportedMethod","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"Data","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"DepositTokens","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"WithdrawTokens","type":"event"},{"inputs":[],"name":"TOKEN_INVENTORY","outputs":[{"internalType":"contract IERC1155","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"escrowedNFTs","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"msgData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"account":"The address of the token holder","id":"The ID of the token"},"returns":{"_0":"balance The amount of token escrowed held by the token holder correponding to the token ID"}},"constructor":{"details":"Throws if the _inventory address is a zero address.ContractOwnership is required to initiate TokenRecovery","params":{"forwarderRegistry":"The forwarder registry contract information","inventory_":"The inventory contract address"}},"deposit(uint256[],uint256[])":{"details":"Batch transfer tokens from the sender to this contract","params":{"ids":"An array containing ids of each token being transferred (corresponds to orbTypes)","values":"An array containing amounts of each token being transferred (corresponds to quantities)"}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if the sender is not in the inventory.Updates the escrowedTokens mapping.Reverts if the updated token balance is greater than 1Emits a {DepositTokens} event.","params":{"from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (corresponds to orbTypes)","values":"An array containing amounts of each token being transferred (corresponds to quantities)"},"returns":{"_0":"selector The function selector"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Reverts if this method has been triggered."},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw(uint256[],uint256[])":{"details":"Reverts if the array length of ids & values does not match.Reverts if the sender does not have enough balance.Updates the escrowedTokens mapping.Emits {WithdrawTokens} events.Transfers the token from this contract to the sender's address","params":{"ids":"An array containing ids of each token being transferred (corresponds to orbTypes)","values":"An array containing amounts of each token being transferred (corresponds to quantities)"}}},"title":"ORBNFTMock Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2170":{"entryPoint":null,"id":2170,"parameterSlots":2,"returnSlots":0},"@_2477":{"entryPoint":null,"id":2477,"parameterSlots":2,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_472":{"entryPoint":null,"id":472,"parameterSlots":1,"returnSlots":0},"@_520":{"entryPoint":null,"id":520,"parameterSlots":1,"returnSlots":0},"@_978":{"entryPoint":null,"id":978,"parameterSlots":0,"returnSlots":0},"@constructorInit_200":{"entryPoint":288,"id":200,"parameterSlots":2,"returnSlots":0},"@layout_306":{"entryPoint":234,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":414,"id":448,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_402":{"entryPoint":462,"id":402,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IForwarderRegistry_$645t_contract$_IERC1155_$1098_fromMemory":{"entryPoint":631,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":694,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IForwarderRegistry":{"entryPoint":606,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1230:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"79:86:29","statements":[{"body":{"nodeType":"YulBlock","src":"143:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"152:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"145:6:29"},"nodeType":"YulFunctionCall","src":"145:12:29"},"nodeType":"YulExpressionStatement","src":"145:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"102:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"113:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"128:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"133:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"124:3:29"},"nodeType":"YulFunctionCall","src":"124:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"137:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"120:3:29"},"nodeType":"YulFunctionCall","src":"120:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"109:3:29"},"nodeType":"YulFunctionCall","src":"109:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"99:2:29"},"nodeType":"YulFunctionCall","src":"99:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"92:6:29"},"nodeType":"YulFunctionCall","src":"92:50:29"},"nodeType":"YulIf","src":"89:70:29"}]},"name":"validator_revert_contract_IForwarderRegistry","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"68:5:29","type":""}],"src":"14:151:29"},{"body":{"nodeType":"YulBlock","src":"311:327:29","statements":[{"body":{"nodeType":"YulBlock","src":"357:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"366:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"369:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"359:6:29"},"nodeType":"YulFunctionCall","src":"359:12:29"},"nodeType":"YulExpressionStatement","src":"359:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"332:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"341:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"328:3:29"},"nodeType":"YulFunctionCall","src":"328:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"353:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"324:3:29"},"nodeType":"YulFunctionCall","src":"324:32:29"},"nodeType":"YulIf","src":"321:52:29"},{"nodeType":"YulVariableDeclaration","src":"382:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"401:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"395:5:29"},"nodeType":"YulFunctionCall","src":"395:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"386:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"465:5:29"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nodeType":"YulIdentifier","src":"420:44:29"},"nodeType":"YulFunctionCall","src":"420:51:29"},"nodeType":"YulExpressionStatement","src":"420:51:29"},{"nodeType":"YulAssignment","src":"480:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"490:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"480:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"504:40:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"529:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"540:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:29"},"nodeType":"YulFunctionCall","src":"525:18:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"519:5:29"},"nodeType":"YulFunctionCall","src":"519:25:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"508:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"598:7:29"}],"functionName":{"name":"validator_revert_contract_IForwarderRegistry","nodeType":"YulIdentifier","src":"553:44:29"},"nodeType":"YulFunctionCall","src":"553:53:29"},"nodeType":"YulExpressionStatement","src":"553:53:29"},{"nodeType":"YulAssignment","src":"615:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"625:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"615:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IForwarderRegistry_$645t_contract$_IERC1155_$1098_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"269:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"280:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"292:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"300:6:29","type":""}],"src":"170:468:29"},{"body":{"nodeType":"YulBlock","src":"692:176:29","statements":[{"nodeType":"YulAssignment","src":"702:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"714:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"717:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"710:3:29"},"nodeType":"YulFunctionCall","src":"710:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"702:4:29"}]},{"body":{"nodeType":"YulBlock","src":"751:111:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"772:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"779:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"784:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"775:3:29"},"nodeType":"YulFunctionCall","src":"775:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"765:6:29"},"nodeType":"YulFunctionCall","src":"765:31:29"},"nodeType":"YulExpressionStatement","src":"765:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"816:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"819:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:29"},"nodeType":"YulFunctionCall","src":"809:15:29"},"nodeType":"YulExpressionStatement","src":"809:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"844:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"847:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"837:6:29"},"nodeType":"YulFunctionCall","src":"837:15:29"},"nodeType":"YulExpressionStatement","src":"837:15:29"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"734:4:29"},{"name":"x","nodeType":"YulIdentifier","src":"740:1:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"731:2:29"},"nodeType":"YulFunctionCall","src":"731:11:29"},"nodeType":"YulIf","src":"728:134:29"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"674:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"677:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"683:4:29","type":""}],"src":"643:225:29"},{"body":{"nodeType":"YulBlock","src":"1047:181:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1064:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1075:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1057:6:29"},"nodeType":"YulFunctionCall","src":"1057:21:29"},"nodeType":"YulExpressionStatement","src":"1057:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1098:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1109:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1094:3:29"},"nodeType":"YulFunctionCall","src":"1094:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"1114:2:29","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1087:6:29"},"nodeType":"YulFunctionCall","src":"1087:30:29"},"nodeType":"YulExpressionStatement","src":"1087:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1137:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1148:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1133:3:29"},"nodeType":"YulFunctionCall","src":"1133:18:29"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"1153:33:29","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1126:6:29"},"nodeType":"YulFunctionCall","src":"1126:61:29"},"nodeType":"YulExpressionStatement","src":"1126:61:29"},{"nodeType":"YulAssignment","src":"1196:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1208:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1219:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1204:3:29"},"nodeType":"YulFunctionCall","src":"1204:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1196:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1024:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1038:4:29","type":""}],"src":"873:355:29"}]},"contents":"{\n    { }\n    function validator_revert_contract_IForwarderRegistry(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IForwarderRegistry_$645t_contract$_IERC1155_$1098_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IForwarderRegistry(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IForwarderRegistry(value_1)\n        value1 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1BAB CODESIZE SUB DUP1 PUSH3 0x1BAB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x277 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x80 MSTORE DUP2 DUP2 CALLER PUSH3 0x73 DUP2 PUSH3 0x5F PUSH3 0xEA PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x9FC OR SWAP1 SHR JUMP JUMPDEST PUSH3 0x120 PUSH1 0x20 SHL PUSH3 0xA2A OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0xAC PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x97 PUSH3 0x19E PUSH1 0x20 SHL PUSH3 0xA8E OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1CE PUSH1 0x20 SHL PUSH3 0xABC OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xD4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6524D08B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE POP PUSH3 0x2D8 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11A PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x2B6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x177 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x19A PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x97 PUSH3 0x19E PUSH1 0x20 SHL PUSH3 0xA8E OR PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11A PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x2B6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x230 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x274 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x298 DUP2 PUSH3 0x25E JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x2AB DUP2 PUSH3 0x25E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x11A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x1875 PUSH3 0x336 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x15C ADD MSTORE DUP2 DUP2 PUSH2 0x529 ADD MSTORE DUP2 DUP2 PUSH2 0x5CD ADD MSTORE PUSH2 0x8A3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x11F ADD MSTORE DUP2 DUP2 PUSH2 0x18E ADD MSTORE DUP2 DUP2 PUSH2 0xE13 ADD MSTORE DUP2 DUP2 PUSH2 0xE51 ADD MSTORE DUP2 DUP2 PUSH2 0xFD6 ADD MSTORE PUSH2 0xFFF ADD MSTORE PUSH2 0x1875 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x4DFDE97A EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x81C197ED EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0xC4C2BFDC EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0xF223885A EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xF997659A EQ PUSH2 0x281 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x126D JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x1299 JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x13F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0x12CA JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x1CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1332 JUMP JUMPDEST PUSH2 0x2E6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D1 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x5A1 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1477 JUMP JUMPDEST PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x228 CALLDATASIZE PUSH1 0x4 PUSH2 0x1332 JUMP JUMPDEST PUSH2 0x737 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x860 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x1535 JUMP JUMPDEST PUSH2 0x92C JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CA JUMP JUMPDEST PUSH2 0x947 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x28F CALLDATASIZE PUSH1 0x4 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC DUP3 PUSH2 0x2E0 PUSH2 0xA8E JUMP JUMPDEST SWAP1 PUSH2 0xB47 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x2F1 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x2F9 PUSH2 0x9FC JUMP JUMPDEST SWAP1 PUSH2 0xBB1 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x30E JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x333 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x159E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3BF JUMPI PUSH2 0x3B7 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x367 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x379 JUMPI PUSH2 0x379 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x392 JUMPI PUSH2 0x392 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3A7 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x336 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F3 PUSH2 0xBA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x414 JUMPI PUSH2 0x414 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x431 JUMPI PUSH2 0x431 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD SWAP3 POP POP DUP2 DUP2 LT ISZERO PUSH2 0x488 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x32A JUMP JUMPDEST PUSH2 0x492 DUP3 DUP3 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP DUP2 SWAP1 POP PUSH2 0x4C6 DUP2 PUSH2 0x1614 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F8 JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x651C6D84833866465BF050FEA9FB84DC59FAF4FC13D4607553B539E31E53FF02 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x50A SWAP3 SWAP2 SWAP1 PUSH2 0x165F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x1759616B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2EB2C2D6 SWAP1 PUSH2 0x568 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x596 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB PUSH2 0x5AE PUSH2 0x9FC JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x60B JUMPI PUSH1 0x40 MLOAD PUSH4 0x6524D08B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x6DE JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x62A JUMPI PUSH2 0x62A PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x647 JUMPI PUSH2 0x647 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x67A SWAP5 SWAP2 SWAP1 SWAP3 MUL ADD CALLDATALOAD SWAP2 POP PUSH2 0x16D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF4DCF56B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SSTORE DUP1 PUSH2 0x6D6 DUP2 PUSH2 0x1614 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x60E JUMP JUMPDEST POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xD4960FB57883D065FB41B7F993F9BE3105AF91FE2B595A398457E1FF226CDC50 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x71A SWAP3 SWAP2 SWAP1 PUSH2 0x165F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x742 PUSH2 0x2F1 PUSH2 0xBA7 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x751 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x159E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3BF JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x789 JUMPI PUSH2 0x789 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x79E SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7D4 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x770 JUMP JUMPDEST PUSH32 0xB76C48BE4E2908F4C9D4EABAF7538E91577FD9AE26DB46693FA8D861C6A42FB PUSH2 0x889 PUSH2 0xC34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x897 SWAP3 SWAP2 SWAP1 PUSH2 0x16E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2EB2C2D6 PUSH2 0x8D8 PUSH2 0xBA7 JUMP JUMPDEST ADDRESS DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8FE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH4 0x36A2F63 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x962 PUSH2 0x952 PUSH2 0xBA7 JUMP JUMPDEST DUP3 PUSH2 0x95B PUSH2 0x9FC JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC47 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x970 PUSH2 0x2F1 PUSH2 0xBA7 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x990 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x159E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9F4 JUMPI PUSH2 0x9EC DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x9AF JUMPI PUSH2 0x9AF PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x9C8 JUMPI PUSH2 0x9C8 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DD SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x993 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xA6E JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1820 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0xA8A PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0xA83 PUSH2 0xA8E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xABC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB66 JUMPI POP PUSH1 0x0 PUSH2 0x2CC JUMP JUMPDEST PUSH4 0xFE003659 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB86 JUMPI POP PUSH1 0x1 PUSH2 0x2CC JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB PUSH2 0xDE2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x1714 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xC2F SWAP1 DUP5 SWAP1 PUSH2 0xEDA JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0xC3F PUSH2 0xFAC JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x1714 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCC6 JUMPI DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1820 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xD1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD6E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xC2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x1958DA5C1A595B9D081B585E481A185D99481C995D995C9D1959 PUSH1 0x32 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xDF2 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xDFC JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE06 PUSH2 0x10A9 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0xEC9 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x4494D465 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH2 0xE88 SWAP1 DUP5 SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x1746 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEC9 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST ISZERO PUSH2 0xED3 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10B5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xC2F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xF4D SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0xC2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32A JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xFBD JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xFCB JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x1093 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8929A8CA PUSH2 0x1034 PUSH2 0x10A9 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1052 SWAP3 SWAP2 SWAP1 PUSH2 0x1746 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1093 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST ISZERO PUSH2 0x10A0 JUMPI PUSH2 0xC3F PUSH2 0x10CC JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10C4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x10DF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0xC3F PUSH1 0x13 NOT DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1782 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x115C SWAP2 SWAP1 PUSH2 0x17D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1199 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x119E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x11AF DUP8 DUP4 DUP4 DUP8 PUSH2 0x11BA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1229 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1222 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32A JUMP JUMPDEST POP DUP2 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x10C4 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x123E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x17EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x128B DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12C3 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x132B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x134B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x136E DUP11 DUP4 DUP12 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1393 DUP11 DUP4 DUP12 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13B9 DUP10 DUP3 DUP11 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x13F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1404 DUP9 DUP4 DUP10 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x141D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142A DUP8 DUP3 DUP9 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x145F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x132B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x149E DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x14AE DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x14CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D6 DUP13 DUP4 DUP14 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14FB DUP13 DUP4 DUP14 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1521 DUP12 DUP3 DUP13 ADD PUSH2 0x1436 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x154E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1559 DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x1569 DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13B9 DUP10 DUP3 DUP11 ADD PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2CC JUMPI PUSH2 0x2CC PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1626 JUMPI PUSH2 0x1626 PUSH2 0x15EB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x1646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x10C4 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x162D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x16A0 SWAP1 DUP4 ADD DUP7 DUP9 PUSH2 0x162D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x16B3 DUP2 DUP6 DUP8 PUSH2 0x162D JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2CC JUMPI PUSH2 0x2CC PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x27BBB732B939B434B81D103737BA103A34329037BBB732B9 PUSH1 0x41 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x179F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17C7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17AF JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x17E2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x17AC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x180B DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID DUP12 0xE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E0A264697066735822122034CC647A760667A019 0xF7 0xC6 PUSH13 0xEB962C1F9742BCC46F044A8D47 0xAE MSIZE 0xF 0xC3 0xF8 0xD2 DUP9 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"515:577:28:-:0;;;904:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;620:38:8;;;;;1006:10:28;2410::27;1007:63:0;2410:10:27;1007:33:0;:31;;;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;963:114;779:103:15;-1:-1:-1;;;877:4:15;779:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:103;;;;;:::i;:::-;-1:-1:-1;;;;;2436:32:27;::::2;2432:88;;2491:18;;-1:-1:-1::0;;;2491:18:27::2;;;;;;;;;;;2432:88;-1:-1:-1::0;;;;;2529:27:27::2;;::::0;-1:-1:-1;515:577:28;;-1:-1:-1;;515:577:28;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;;;;;:34;;:::i;:89::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;1075:2:29;774:79:6;;;1057:21:29;1114:2;1094:18;;;1087:30;1153:33;1133:18;;;1126:61;1204:18;;774:79:6;;;;;;;;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;14:151:29:-;-1:-1:-1;;;;;109:31:29;;99:42;;89:70;;155:1;152;145:12;89:70;14:151;:::o;170:468::-;292:6;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;401:9;395:16;420:51;465:5;420:51;:::i;:::-;540:2;525:18;;519:25;490:5;;-1:-1:-1;553:53:29;519:25;553:53;:::i;:::-;625:7;615:17;;;170:468;;;;;:::o;643:225::-;710:9;;;731:11;;;728:134;;;784:10;779:3;775:20;772:1;765:31;819:4;816:1;809:15;847:4;844:1;837:15;873:355;515:577:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@TOKEN_INVENTORY_2127":{"entryPoint":null,"id":2127,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1649":{"entryPoint":3802,"id":1649,"parameterSlots":2,"returnSlots":0},"@_msgData_2444":{"entryPoint":3124,"id":2444,"parameterSlots":0,"returnSlots":2},"@_msgData_618":{"entryPoint":4012,"id":618,"parameterSlots":0,"returnSlots":2},"@_msgSender_2431":{"entryPoint":2983,"id":2431,"parameterSlots":0,"returnSlots":1},"@_msgSender_570":{"entryPoint":3554,"id":570,"parameterSlots":0,"returnSlots":1},"@_revert_1979":{"entryPoint":null,"id":1979,"parameterSlots":2,"returnSlots":0},"@balanceOf_2187":{"entryPoint":681,"id":2187,"parameterSlots":2,"returnSlots":1},"@constructorInit_200":{"entryPoint":2602,"id":200,"parameterSlots":2,"returnSlots":0},"@deposit_2212":{"entryPoint":2209,"id":2212,"parameterSlots":4,"returnSlots":0},"@enforceIsContractOwner_294":{"entryPoint":2993,"id":294,"parameterSlots":2,"returnSlots":0},"@escrowedNFTs_2134":{"entryPoint":null,"id":2134,"parameterSlots":0,"returnSlots":0},"@forwarderRegistry_481":{"entryPoint":null,"id":481,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1804":{"entryPoint":4319,"id":1804,"parameterSlots":4,"returnSlots":1},"@functionCall_1740":{"entryPoint":4277,"id":1740,"parameterSlots":3,"returnSlots":1},"@isContract_1668":{"entryPoint":null,"id":1668,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_498":{"entryPoint":null,"id":498,"parameterSlots":1,"returnSlots":1},"@layout_306":{"entryPoint":2556,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":2702,"id":448,"parameterSlots":0,"returnSlots":1},"@msgData_2486":{"entryPoint":2144,"id":2486,"parameterSlots":0,"returnSlots":0},"@msgData_673":{"entryPoint":4300,"id":673,"parameterSlots":0,"returnSlots":2},"@msgSender_656":{"entryPoint":4265,"id":656,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_2418":{"entryPoint":1472,"id":2418,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_2329":{"entryPoint":2348,"id":2329,"parameterSlots":6,"returnSlots":1},"@owner_276":{"entryPoint":null,"id":276,"parameterSlots":1,"returnSlots":1},"@owner_63":{"entryPoint":1441,"id":63,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_873":{"entryPoint":742,"id":873,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_943":{"entryPoint":1847,"id":943,"parameterSlots":6,"returnSlots":0},"@recoverETH_807":{"entryPoint":2405,"id":807,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1401":{"entryPoint":3037,"id":1401,"parameterSlots":3,"returnSlots":0},"@sendValue_1702":{"entryPoint":3276,"id":1702,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_402":{"entryPoint":2748,"id":402,"parameterSlots":3,"returnSlots":0},"@supportsInterface_337":{"entryPoint":722,"id":337,"parameterSlots":1,"returnSlots":1},"@supportsInterface_436":{"entryPoint":2887,"id":436,"parameterSlots":2,"returnSlots":1},"@transferOwnership_263":{"entryPoint":3143,"id":263,"parameterSlots":3,"returnSlots":0},"@transferOwnership_81":{"entryPoint":2375,"id":81,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1935":{"entryPoint":4538,"id":1935,"parameterSlots":4,"returnSlots":1},"@withdraw_2309":{"entryPoint":969,"id":2309,"parameterSlots":4,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":4839,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":5174,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4810,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5239,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":5429,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4717,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4914,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":5067,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":5984,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":4761,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1333":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1222":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5677,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6096,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":5958,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5747,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5727,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5861,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155_$1098__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6124,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5534,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5908,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":6018,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":5842,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5633,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6060,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":5652,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5611,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5589,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4696,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18375:29","statements":[{"nodeType":"YulBlock","src":"6:3:29","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:29","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:29"},"nodeType":"YulFunctionCall","src":"125:12:29"},"nodeType":"YulExpressionStatement","src":"125:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:29"},"nodeType":"YulFunctionCall","src":"104:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:29"},"nodeType":"YulFunctionCall","src":"100:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:29"},"nodeType":"YulFunctionCall","src":"89:31:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:29"},"nodeType":"YulFunctionCall","src":"79:42:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:29"},"nodeType":"YulFunctionCall","src":"72:50:29"},"nodeType":"YulIf","src":"69:70:29"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:29","type":""}],"src":"14:131:29"},{"body":{"nodeType":"YulBlock","src":"237:228:29","statements":[{"body":{"nodeType":"YulBlock","src":"283:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"292:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"295:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"285:6:29"},"nodeType":"YulFunctionCall","src":"285:12:29"},"nodeType":"YulExpressionStatement","src":"285:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"258:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"267:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"254:3:29"},"nodeType":"YulFunctionCall","src":"254:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"279:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"250:3:29"},"nodeType":"YulFunctionCall","src":"250:32:29"},"nodeType":"YulIf","src":"247:52:29"},{"nodeType":"YulVariableDeclaration","src":"308:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"334:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"321:12:29"},"nodeType":"YulFunctionCall","src":"321:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"312:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"353:24:29"},"nodeType":"YulFunctionCall","src":"353:31:29"},"nodeType":"YulExpressionStatement","src":"353:31:29"},{"nodeType":"YulAssignment","src":"393:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"403:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"393:6:29"}]},{"nodeType":"YulAssignment","src":"417:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"444:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"455:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"440:3:29"},"nodeType":"YulFunctionCall","src":"440:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"427:12:29"},"nodeType":"YulFunctionCall","src":"427:32:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"417:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"195:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"206:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"218:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"226:6:29","type":""}],"src":"150:315:29"},{"body":{"nodeType":"YulBlock","src":"571:76:29","statements":[{"nodeType":"YulAssignment","src":"581:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:29"},"nodeType":"YulFunctionCall","src":"589:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"581:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"623:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"634:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"616:6:29"},"nodeType":"YulFunctionCall","src":"616:25:29"},"nodeType":"YulExpressionStatement","src":"616:25:29"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"540:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"551:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"562:4:29","type":""}],"src":"470:177:29"},{"body":{"nodeType":"YulBlock","src":"721:217:29","statements":[{"body":{"nodeType":"YulBlock","src":"767:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"776:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"779:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"769:6:29"},"nodeType":"YulFunctionCall","src":"769:12:29"},"nodeType":"YulExpressionStatement","src":"769:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"742:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"751:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"738:3:29"},"nodeType":"YulFunctionCall","src":"738:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"763:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"734:3:29"},"nodeType":"YulFunctionCall","src":"734:32:29"},"nodeType":"YulIf","src":"731:52:29"},{"nodeType":"YulVariableDeclaration","src":"792:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"818:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"805:12:29"},"nodeType":"YulFunctionCall","src":"805:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"796:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"892:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"901:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"904:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"894:6:29"},"nodeType":"YulFunctionCall","src":"894:12:29"},"nodeType":"YulExpressionStatement","src":"894:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"850:5:29"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"861:5:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"872:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"877:10:29","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"868:3:29"},"nodeType":"YulFunctionCall","src":"868:20:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"857:3:29"},"nodeType":"YulFunctionCall","src":"857:32:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"847:2:29"},"nodeType":"YulFunctionCall","src":"847:43:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"840:6:29"},"nodeType":"YulFunctionCall","src":"840:51:29"},"nodeType":"YulIf","src":"837:71:29"},{"nodeType":"YulAssignment","src":"917:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"927:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"917:6:29"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"687:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"698:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"710:6:29","type":""}],"src":"652:286:29"},{"body":{"nodeType":"YulBlock","src":"1038:92:29","statements":[{"nodeType":"YulAssignment","src":"1048:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1060:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1071:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1056:3:29"},"nodeType":"YulFunctionCall","src":"1056:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1048:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1090:9:29"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1115:6:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1108:6:29"},"nodeType":"YulFunctionCall","src":"1108:14:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1101:6:29"},"nodeType":"YulFunctionCall","src":"1101:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1083:6:29"},"nodeType":"YulFunctionCall","src":"1083:41:29"},"nodeType":"YulExpressionStatement","src":"1083:41:29"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1007:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1018:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:29","type":""}],"src":"943:187:29"},{"body":{"nodeType":"YulBlock","src":"1262:102:29","statements":[{"nodeType":"YulAssignment","src":"1272:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1284:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1295:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1280:3:29"},"nodeType":"YulFunctionCall","src":"1280:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1272:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1314:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1329:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1345:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1350:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1341:3:29"},"nodeType":"YulFunctionCall","src":"1341:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"1354:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1337:3:29"},"nodeType":"YulFunctionCall","src":"1337:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1325:3:29"},"nodeType":"YulFunctionCall","src":"1325:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1307:6:29"},"nodeType":"YulFunctionCall","src":"1307:51:29"},"nodeType":"YulExpressionStatement","src":"1307:51:29"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1231:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1242:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1253:4:29","type":""}],"src":"1135:229:29"},{"body":{"nodeType":"YulBlock","src":"1487:102:29","statements":[{"nodeType":"YulAssignment","src":"1497:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1509:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"1520:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1505:3:29"},"nodeType":"YulFunctionCall","src":"1505:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1497:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1539:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1554:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1570:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1575:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1566:3:29"},"nodeType":"YulFunctionCall","src":"1566:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"1579:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1562:3:29"},"nodeType":"YulFunctionCall","src":"1562:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1550:3:29"},"nodeType":"YulFunctionCall","src":"1550:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1532:6:29"},"nodeType":"YulFunctionCall","src":"1532:51:29"},"nodeType":"YulExpressionStatement","src":"1532:51:29"}]},"name":"abi_encode_tuple_t_contract$_IERC1155_$1098__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1456:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1467:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1478:4:29","type":""}],"src":"1369:220:29"},{"body":{"nodeType":"YulBlock","src":"1664:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"1710:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1719:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1712:6:29"},"nodeType":"YulFunctionCall","src":"1712:12:29"},"nodeType":"YulExpressionStatement","src":"1712:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1685:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"1694:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1681:3:29"},"nodeType":"YulFunctionCall","src":"1681:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"1706:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1677:3:29"},"nodeType":"YulFunctionCall","src":"1677:32:29"},"nodeType":"YulIf","src":"1674:52:29"},{"nodeType":"YulVariableDeclaration","src":"1735:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1761:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1748:12:29"},"nodeType":"YulFunctionCall","src":"1748:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1739:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1805:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"1780:24:29"},"nodeType":"YulFunctionCall","src":"1780:31:29"},"nodeType":"YulExpressionStatement","src":"1780:31:29"},{"nodeType":"YulAssignment","src":"1820:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"1830:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1820:6:29"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1630:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1641:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1653:6:29","type":""}],"src":"1594:247:29"},{"body":{"nodeType":"YulBlock","src":"1930:283:29","statements":[{"body":{"nodeType":"YulBlock","src":"1979:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1988:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1991:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1981:6:29"},"nodeType":"YulFunctionCall","src":"1981:12:29"},"nodeType":"YulExpressionStatement","src":"1981:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1958:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"1966:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1954:3:29"},"nodeType":"YulFunctionCall","src":"1954:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"1973:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1950:3:29"},"nodeType":"YulFunctionCall","src":"1950:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1943:6:29"},"nodeType":"YulFunctionCall","src":"1943:35:29"},"nodeType":"YulIf","src":"1940:55:29"},{"nodeType":"YulAssignment","src":"2004:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2027:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2014:12:29"},"nodeType":"YulFunctionCall","src":"2014:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2004:6:29"}]},{"body":{"nodeType":"YulBlock","src":"2077:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2086:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2089:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2079:6:29"},"nodeType":"YulFunctionCall","src":"2079:12:29"},"nodeType":"YulExpressionStatement","src":"2079:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2049:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2065:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2069:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2061:3:29"},"nodeType":"YulFunctionCall","src":"2061:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2073:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2057:3:29"},"nodeType":"YulFunctionCall","src":"2057:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2046:2:29"},"nodeType":"YulFunctionCall","src":"2046:30:29"},"nodeType":"YulIf","src":"2043:50:29"},{"nodeType":"YulAssignment","src":"2102:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2118:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"2126:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2114:3:29"},"nodeType":"YulFunctionCall","src":"2114:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2102:8:29"}]},{"body":{"nodeType":"YulBlock","src":"2191:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2200:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2203:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2193:6:29"},"nodeType":"YulFunctionCall","src":"2193:12:29"},"nodeType":"YulExpressionStatement","src":"2193:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2154:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2166:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2169:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2162:3:29"},"nodeType":"YulFunctionCall","src":"2162:14:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2150:3:29"},"nodeType":"YulFunctionCall","src":"2150:27:29"},{"kind":"number","nodeType":"YulLiteral","src":"2179:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2146:3:29"},"nodeType":"YulFunctionCall","src":"2146:38:29"},{"name":"end","nodeType":"YulIdentifier","src":"2186:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2143:2:29"},"nodeType":"YulFunctionCall","src":"2143:47:29"},"nodeType":"YulIf","src":"2140:67:29"}]},"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1893:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"1901:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1909:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"1919:6:29","type":""}],"src":"1846:367:29"},{"body":{"nodeType":"YulBlock","src":"2442:879:29","statements":[{"body":{"nodeType":"YulBlock","src":"2488:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2497:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2500:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2490:6:29"},"nodeType":"YulFunctionCall","src":"2490:12:29"},"nodeType":"YulExpressionStatement","src":"2490:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2463:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"2472:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2459:3:29"},"nodeType":"YulFunctionCall","src":"2459:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"2484:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2455:3:29"},"nodeType":"YulFunctionCall","src":"2455:32:29"},"nodeType":"YulIf","src":"2452:52:29"},{"nodeType":"YulVariableDeclaration","src":"2513:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2540:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2527:12:29"},"nodeType":"YulFunctionCall","src":"2527:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2517:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2559:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2577:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2581:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2573:3:29"},"nodeType":"YulFunctionCall","src":"2573:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"2585:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2569:3:29"},"nodeType":"YulFunctionCall","src":"2569:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2563:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2614:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2623:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2626:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2616:6:29"},"nodeType":"YulFunctionCall","src":"2616:12:29"},"nodeType":"YulExpressionStatement","src":"2616:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2602:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2610:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2599:2:29"},"nodeType":"YulFunctionCall","src":"2599:14:29"},"nodeType":"YulIf","src":"2596:34:29"},{"nodeType":"YulVariableDeclaration","src":"2639:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2707:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"2718:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2703:3:29"},"nodeType":"YulFunctionCall","src":"2703:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2727:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2665:37:29"},"nodeType":"YulFunctionCall","src":"2665:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2643:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2653:8:29","type":""}]},{"nodeType":"YulAssignment","src":"2744:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"2754:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2744:6:29"}]},{"nodeType":"YulAssignment","src":"2771:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2781:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2771:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"2798:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2831:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"2842:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2827:3:29"},"nodeType":"YulFunctionCall","src":"2827:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2814:12:29"},"nodeType":"YulFunctionCall","src":"2814:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2802:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"2875:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2884:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2887:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2877:6:29"},"nodeType":"YulFunctionCall","src":"2877:12:29"},"nodeType":"YulExpressionStatement","src":"2877:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2861:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"2871:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2858:2:29"},"nodeType":"YulFunctionCall","src":"2858:16:29"},"nodeType":"YulIf","src":"2855:36:29"},{"nodeType":"YulVariableDeclaration","src":"2900:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2968:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2979:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2964:3:29"},"nodeType":"YulFunctionCall","src":"2964:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2990:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"2926:37:29"},"nodeType":"YulFunctionCall","src":"2926:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"2904:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"2914:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3007:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3017:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3007:6:29"}]},{"nodeType":"YulAssignment","src":"3034:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"3044:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3034:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3061:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3094:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3105:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3090:3:29"},"nodeType":"YulFunctionCall","src":"3090:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3077:12:29"},"nodeType":"YulFunctionCall","src":"3077:32:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"3065:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3138:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3147:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3150:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3140:6:29"},"nodeType":"YulFunctionCall","src":"3140:12:29"},"nodeType":"YulExpressionStatement","src":"3140:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"3124:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3134:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3121:2:29"},"nodeType":"YulFunctionCall","src":"3121:16:29"},"nodeType":"YulIf","src":"3118:36:29"},{"nodeType":"YulVariableDeclaration","src":"3163:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"3242:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:29"},"nodeType":"YulFunctionCall","src":"3227:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3253:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3189:37:29"},"nodeType":"YulFunctionCall","src":"3189:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"3167:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"3177:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3270:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"3280:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3270:6:29"}]},{"nodeType":"YulAssignment","src":"3297:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"3307:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3297:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2368:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2379:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2391:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2399:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2407:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2415:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2423:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2431:6:29","type":""}],"src":"2218:1103:29"},{"body":{"nodeType":"YulBlock","src":"3483:616:29","statements":[{"body":{"nodeType":"YulBlock","src":"3529:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3538:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3541:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3531:6:29"},"nodeType":"YulFunctionCall","src":"3531:12:29"},"nodeType":"YulExpressionStatement","src":"3531:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3504:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"3513:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3500:3:29"},"nodeType":"YulFunctionCall","src":"3500:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"3525:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3496:3:29"},"nodeType":"YulFunctionCall","src":"3496:32:29"},"nodeType":"YulIf","src":"3493:52:29"},{"nodeType":"YulVariableDeclaration","src":"3554:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3581:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3568:12:29"},"nodeType":"YulFunctionCall","src":"3568:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3558:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3600:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3618:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3622:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3614:3:29"},"nodeType":"YulFunctionCall","src":"3614:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"3626:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3610:3:29"},"nodeType":"YulFunctionCall","src":"3610:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3604:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3655:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3664:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3667:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3657:6:29"},"nodeType":"YulFunctionCall","src":"3657:12:29"},"nodeType":"YulExpressionStatement","src":"3657:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3643:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3651:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3640:2:29"},"nodeType":"YulFunctionCall","src":"3640:14:29"},"nodeType":"YulIf","src":"3637:34:29"},{"nodeType":"YulVariableDeclaration","src":"3680:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3748:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"3759:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3744:3:29"},"nodeType":"YulFunctionCall","src":"3744:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3768:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3706:37:29"},"nodeType":"YulFunctionCall","src":"3706:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"3684:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"3694:8:29","type":""}]},{"nodeType":"YulAssignment","src":"3785:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"3795:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3785:6:29"}]},{"nodeType":"YulAssignment","src":"3812:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3822:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3812:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"3839:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3872:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"3883:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3868:3:29"},"nodeType":"YulFunctionCall","src":"3868:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3855:12:29"},"nodeType":"YulFunctionCall","src":"3855:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3843:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"3916:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3925:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3928:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3918:6:29"},"nodeType":"YulFunctionCall","src":"3918:12:29"},"nodeType":"YulExpressionStatement","src":"3918:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3902:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"3912:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3899:2:29"},"nodeType":"YulFunctionCall","src":"3899:16:29"},"nodeType":"YulIf","src":"3896:36:29"},{"nodeType":"YulVariableDeclaration","src":"3941:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4009:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4020:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4005:3:29"},"nodeType":"YulFunctionCall","src":"4005:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4031:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"3967:37:29"},"nodeType":"YulFunctionCall","src":"3967:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"3945:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"3955:8:29","type":""}]},{"nodeType":"YulAssignment","src":"4048:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"4058:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4048:6:29"}]},{"nodeType":"YulAssignment","src":"4075:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"4085:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4075:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3425:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3436:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3448:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3456:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3464:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3472:6:29","type":""}],"src":"3326:773:29"},{"body":{"nodeType":"YulBlock","src":"4205:102:29","statements":[{"nodeType":"YulAssignment","src":"4215:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4227:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"4238:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4223:3:29"},"nodeType":"YulFunctionCall","src":"4223:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4215:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4257:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4272:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4288:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4293:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4284:3:29"},"nodeType":"YulFunctionCall","src":"4284:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4280:3:29"},"nodeType":"YulFunctionCall","src":"4280:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4268:3:29"},"nodeType":"YulFunctionCall","src":"4268:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4250:6:29"},"nodeType":"YulFunctionCall","src":"4250:51:29"},"nodeType":"YulExpressionStatement","src":"4250:51:29"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4174:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4185:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4196:4:29","type":""}],"src":"4104:203:29"},{"body":{"nodeType":"YulBlock","src":"4384:275:29","statements":[{"body":{"nodeType":"YulBlock","src":"4433:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4442:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4445:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4435:6:29"},"nodeType":"YulFunctionCall","src":"4435:12:29"},"nodeType":"YulExpressionStatement","src":"4435:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4412:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4420:4:29","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4408:3:29"},"nodeType":"YulFunctionCall","src":"4408:17:29"},{"name":"end","nodeType":"YulIdentifier","src":"4427:3:29"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4404:3:29"},"nodeType":"YulFunctionCall","src":"4404:27:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4397:6:29"},"nodeType":"YulFunctionCall","src":"4397:35:29"},"nodeType":"YulIf","src":"4394:55:29"},{"nodeType":"YulAssignment","src":"4458:30:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4481:6:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4468:12:29"},"nodeType":"YulFunctionCall","src":"4468:20:29"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4458:6:29"}]},{"body":{"nodeType":"YulBlock","src":"4531:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4540:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4543:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4533:6:29"},"nodeType":"YulFunctionCall","src":"4533:12:29"},"nodeType":"YulExpressionStatement","src":"4533:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4503:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4519:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"4523:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4515:3:29"},"nodeType":"YulFunctionCall","src":"4515:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"4527:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4511:3:29"},"nodeType":"YulFunctionCall","src":"4511:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4500:2:29"},"nodeType":"YulFunctionCall","src":"4500:30:29"},"nodeType":"YulIf","src":"4497:50:29"},{"nodeType":"YulAssignment","src":"4556:29:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4572:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"4580:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4568:3:29"},"nodeType":"YulFunctionCall","src":"4568:17:29"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"4556:8:29"}]},{"body":{"nodeType":"YulBlock","src":"4637:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4646:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4649:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4639:6:29"},"nodeType":"YulFunctionCall","src":"4639:12:29"},"nodeType":"YulExpressionStatement","src":"4639:12:29"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4608:6:29"},{"name":"length","nodeType":"YulIdentifier","src":"4616:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4604:3:29"},"nodeType":"YulFunctionCall","src":"4604:19:29"},{"kind":"number","nodeType":"YulLiteral","src":"4625:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4600:3:29"},"nodeType":"YulFunctionCall","src":"4600:30:29"},{"name":"end","nodeType":"YulIdentifier","src":"4632:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4597:2:29"},"nodeType":"YulFunctionCall","src":"4597:39:29"},"nodeType":"YulIf","src":"4594:59:29"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4347:6:29","type":""},{"name":"end","nodeType":"YulTypedName","src":"4355:3:29","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"4363:8:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"4373:6:29","type":""}],"src":"4312:347:29"},{"body":{"nodeType":"YulBlock","src":"4891:1111:29","statements":[{"body":{"nodeType":"YulBlock","src":"4938:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4947:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4950:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4940:6:29"},"nodeType":"YulFunctionCall","src":"4940:12:29"},"nodeType":"YulExpressionStatement","src":"4940:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4912:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"4921:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4908:3:29"},"nodeType":"YulFunctionCall","src":"4908:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"4933:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4904:3:29"},"nodeType":"YulFunctionCall","src":"4904:33:29"},"nodeType":"YulIf","src":"4901:53:29"},{"nodeType":"YulVariableDeclaration","src":"4963:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4989:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4976:12:29"},"nodeType":"YulFunctionCall","src":"4976:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4967:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5033:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5008:24:29"},"nodeType":"YulFunctionCall","src":"5008:31:29"},"nodeType":"YulExpressionStatement","src":"5008:31:29"},{"nodeType":"YulAssignment","src":"5048:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"5058:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5048:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5072:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5104:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5115:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5100:3:29"},"nodeType":"YulFunctionCall","src":"5100:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5087:12:29"},"nodeType":"YulFunctionCall","src":"5087:32:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5076:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5153:7:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5128:24:29"},"nodeType":"YulFunctionCall","src":"5128:33:29"},"nodeType":"YulExpressionStatement","src":"5128:33:29"},{"nodeType":"YulAssignment","src":"5170:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5180:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5170:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5196:46:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5227:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5238:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5223:3:29"},"nodeType":"YulFunctionCall","src":"5223:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5210:12:29"},"nodeType":"YulFunctionCall","src":"5210:32:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5200:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5251:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5269:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"5273:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5265:3:29"},"nodeType":"YulFunctionCall","src":"5265:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"5277:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5261:3:29"},"nodeType":"YulFunctionCall","src":"5261:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5255:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5306:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5315:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5318:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5308:6:29"},"nodeType":"YulFunctionCall","src":"5308:12:29"},"nodeType":"YulExpressionStatement","src":"5308:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5294:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5302:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5291:2:29"},"nodeType":"YulFunctionCall","src":"5291:14:29"},"nodeType":"YulIf","src":"5288:34:29"},{"nodeType":"YulVariableDeclaration","src":"5331:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5399:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5395:3:29"},"nodeType":"YulFunctionCall","src":"5395:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5419:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"5357:37:29"},"nodeType":"YulFunctionCall","src":"5357:70:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"5335:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"5345:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5436:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"5446:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5436:6:29"}]},{"nodeType":"YulAssignment","src":"5463:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"5473:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5463:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5490:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5523:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5534:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5519:3:29"},"nodeType":"YulFunctionCall","src":"5519:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5506:12:29"},"nodeType":"YulFunctionCall","src":"5506:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"5494:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5567:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5576:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5579:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5569:6:29"},"nodeType":"YulFunctionCall","src":"5569:12:29"},"nodeType":"YulExpressionStatement","src":"5569:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"5553:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5563:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5550:2:29"},"nodeType":"YulFunctionCall","src":"5550:16:29"},"nodeType":"YulIf","src":"5547:36:29"},{"nodeType":"YulVariableDeclaration","src":"5592:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5660:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"5671:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5656:3:29"},"nodeType":"YulFunctionCall","src":"5656:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5682:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"5618:37:29"},"nodeType":"YulFunctionCall","src":"5618:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"5596:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"5606:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5699:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"5709:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5699:6:29"}]},{"nodeType":"YulAssignment","src":"5726:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"5736:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5726:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"5753:49:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5786:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"5797:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5782:3:29"},"nodeType":"YulFunctionCall","src":"5782:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5769:12:29"},"nodeType":"YulFunctionCall","src":"5769:33:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"5757:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"5831:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5840:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5843:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5833:6:29"},"nodeType":"YulFunctionCall","src":"5833:12:29"},"nodeType":"YulExpressionStatement","src":"5833:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"5817:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"5827:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5814:2:29"},"nodeType":"YulFunctionCall","src":"5814:16:29"},"nodeType":"YulIf","src":"5811:36:29"},{"nodeType":"YulVariableDeclaration","src":"5856:86:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5912:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"5923:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5908:3:29"},"nodeType":"YulFunctionCall","src":"5908:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5934:7:29"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"5882:25:29"},"nodeType":"YulFunctionCall","src":"5882:60:29"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"5860:8:29","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"5870:8:29","type":""}]},{"nodeType":"YulAssignment","src":"5951:18:29","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"5961:8:29"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"5951:6:29"}]},{"nodeType":"YulAssignment","src":"5978:18:29","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"5988:8:29"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"5978:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4801:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4812:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4824:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4832:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4840:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4848:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4856:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4864:6:29","type":""},{"name":"value6","nodeType":"YulTypedName","src":"4872:6:29","type":""},{"name":"value7","nodeType":"YulTypedName","src":"4880:6:29","type":""}],"src":"4664:1338:29"},{"body":{"nodeType":"YulBlock","src":"6106:103:29","statements":[{"nodeType":"YulAssignment","src":"6116:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6128:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6139:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6124:3:29"},"nodeType":"YulFunctionCall","src":"6124:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6116:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6158:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6173:6:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6185:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6190:10:29","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6181:3:29"},"nodeType":"YulFunctionCall","src":"6181:20:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6169:3:29"},"nodeType":"YulFunctionCall","src":"6169:33:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6151:6:29"},"nodeType":"YulFunctionCall","src":"6151:52:29"},"nodeType":"YulExpressionStatement","src":"6151:52:29"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6075:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6086:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6097:4:29","type":""}],"src":"6007:202:29"},{"body":{"nodeType":"YulBlock","src":"6439:879:29","statements":[{"body":{"nodeType":"YulBlock","src":"6485:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6494:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6497:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6487:6:29"},"nodeType":"YulFunctionCall","src":"6487:12:29"},"nodeType":"YulExpressionStatement","src":"6487:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6460:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"6469:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6456:3:29"},"nodeType":"YulFunctionCall","src":"6456:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"6481:2:29","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6452:3:29"},"nodeType":"YulFunctionCall","src":"6452:32:29"},"nodeType":"YulIf","src":"6449:52:29"},{"nodeType":"YulVariableDeclaration","src":"6510:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6537:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6524:12:29"},"nodeType":"YulFunctionCall","src":"6524:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6514:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6556:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6574:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"6578:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6570:3:29"},"nodeType":"YulFunctionCall","src":"6570:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"6582:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6566:3:29"},"nodeType":"YulFunctionCall","src":"6566:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6560:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6611:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6620:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6623:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6613:6:29"},"nodeType":"YulFunctionCall","src":"6613:12:29"},"nodeType":"YulExpressionStatement","src":"6613:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6599:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"6607:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6596:2:29"},"nodeType":"YulFunctionCall","src":"6596:14:29"},"nodeType":"YulIf","src":"6593:34:29"},{"nodeType":"YulVariableDeclaration","src":"6636:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6704:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"6715:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6700:3:29"},"nodeType":"YulFunctionCall","src":"6700:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6724:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6662:37:29"},"nodeType":"YulFunctionCall","src":"6662:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"6640:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"6650:8:29","type":""}]},{"nodeType":"YulAssignment","src":"6741:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"6751:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6741:6:29"}]},{"nodeType":"YulAssignment","src":"6768:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"6778:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6768:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"6795:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6828:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"6839:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6824:3:29"},"nodeType":"YulFunctionCall","src":"6824:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6811:12:29"},"nodeType":"YulFunctionCall","src":"6811:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"6799:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"6872:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6881:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6884:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6874:6:29"},"nodeType":"YulFunctionCall","src":"6874:12:29"},"nodeType":"YulExpressionStatement","src":"6874:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"6858:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"6868:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6855:2:29"},"nodeType":"YulFunctionCall","src":"6855:16:29"},"nodeType":"YulIf","src":"6852:36:29"},{"nodeType":"YulVariableDeclaration","src":"6897:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6965:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"6976:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6961:3:29"},"nodeType":"YulFunctionCall","src":"6961:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6987:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"6923:37:29"},"nodeType":"YulFunctionCall","src":"6923:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"6901:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"6911:8:29","type":""}]},{"nodeType":"YulAssignment","src":"7004:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"7014:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7004:6:29"}]},{"nodeType":"YulAssignment","src":"7031:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"7041:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7031:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7058:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7091:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7102:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7087:3:29"},"nodeType":"YulFunctionCall","src":"7087:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7074:12:29"},"nodeType":"YulFunctionCall","src":"7074:32:29"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"7062:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7135:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7144:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7147:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7137:6:29"},"nodeType":"YulFunctionCall","src":"7137:12:29"},"nodeType":"YulExpressionStatement","src":"7137:12:29"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"7121:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"7131:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7118:2:29"},"nodeType":"YulFunctionCall","src":"7118:16:29"},"nodeType":"YulIf","src":"7115:36:29"},{"nodeType":"YulVariableDeclaration","src":"7160:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7228:9:29"},{"name":"offset_2","nodeType":"YulIdentifier","src":"7239:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7224:3:29"},"nodeType":"YulFunctionCall","src":"7224:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7250:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"7186:37:29"},"nodeType":"YulFunctionCall","src":"7186:72:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"7164:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"7174:8:29","type":""}]},{"nodeType":"YulAssignment","src":"7267:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"7277:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7267:6:29"}]},{"nodeType":"YulAssignment","src":"7294:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"7304:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7294:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6365:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6376:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6388:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6396:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6404:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6412:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6420:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6428:6:29","type":""}],"src":"6214:1104:29"},{"body":{"nodeType":"YulBlock","src":"7480:666:29","statements":[{"body":{"nodeType":"YulBlock","src":"7527:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7536:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7539:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7529:6:29"},"nodeType":"YulFunctionCall","src":"7529:12:29"},"nodeType":"YulExpressionStatement","src":"7529:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7501:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"7510:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7497:3:29"},"nodeType":"YulFunctionCall","src":"7497:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"7522:3:29","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7493:3:29"},"nodeType":"YulFunctionCall","src":"7493:33:29"},"nodeType":"YulIf","src":"7490:53:29"},{"nodeType":"YulVariableDeclaration","src":"7552:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7578:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7565:12:29"},"nodeType":"YulFunctionCall","src":"7565:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7556:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7622:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7597:24:29"},"nodeType":"YulFunctionCall","src":"7597:31:29"},"nodeType":"YulExpressionStatement","src":"7597:31:29"},{"nodeType":"YulAssignment","src":"7637:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"7647:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7637:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7661:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7693:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7704:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7689:3:29"},"nodeType":"YulFunctionCall","src":"7689:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7676:12:29"},"nodeType":"YulFunctionCall","src":"7676:32:29"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"7665:7:29","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"7742:7:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"7717:24:29"},"nodeType":"YulFunctionCall","src":"7717:33:29"},"nodeType":"YulExpressionStatement","src":"7717:33:29"},{"nodeType":"YulAssignment","src":"7759:17:29","value":{"name":"value_1","nodeType":"YulIdentifier","src":"7769:7:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7759:6:29"}]},{"nodeType":"YulAssignment","src":"7785:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7812:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7823:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7808:3:29"},"nodeType":"YulFunctionCall","src":"7808:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7795:12:29"},"nodeType":"YulFunctionCall","src":"7795:32:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7785:6:29"}]},{"nodeType":"YulAssignment","src":"7836:42:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7863:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7874:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7859:3:29"},"nodeType":"YulFunctionCall","src":"7859:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7846:12:29"},"nodeType":"YulFunctionCall","src":"7846:32:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7836:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"7887:47:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7918:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"7929:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7914:3:29"},"nodeType":"YulFunctionCall","src":"7914:19:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7901:12:29"},"nodeType":"YulFunctionCall","src":"7901:33:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7891:6:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"7977:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7986:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7989:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7979:6:29"},"nodeType":"YulFunctionCall","src":"7979:12:29"},"nodeType":"YulExpressionStatement","src":"7979:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7949:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7965:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"7969:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7961:3:29"},"nodeType":"YulFunctionCall","src":"7961:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"7973:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7957:3:29"},"nodeType":"YulFunctionCall","src":"7957:18:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7946:2:29"},"nodeType":"YulFunctionCall","src":"7946:30:29"},"nodeType":"YulIf","src":"7943:50:29"},{"nodeType":"YulVariableDeclaration","src":"8002:84:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8058:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"8069:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8054:3:29"},"nodeType":"YulFunctionCall","src":"8054:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8078:7:29"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"8028:25:29"},"nodeType":"YulFunctionCall","src":"8028:58:29"},"variables":[{"name":"value4_1","nodeType":"YulTypedName","src":"8006:8:29","type":""},{"name":"value5_1","nodeType":"YulTypedName","src":"8016:8:29","type":""}]},{"nodeType":"YulAssignment","src":"8095:18:29","value":{"name":"value4_1","nodeType":"YulIdentifier","src":"8105:8:29"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"8095:6:29"}]},{"nodeType":"YulAssignment","src":"8122:18:29","value":{"name":"value5_1","nodeType":"YulIdentifier","src":"8132:8:29"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"8122:6:29"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7406:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7417:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7429:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7437:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7445:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7453:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7461:6:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7469:6:29","type":""}],"src":"7323:823:29"},{"body":{"nodeType":"YulBlock","src":"8316:616:29","statements":[{"body":{"nodeType":"YulBlock","src":"8362:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8371:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8374:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8364:6:29"},"nodeType":"YulFunctionCall","src":"8364:12:29"},"nodeType":"YulExpressionStatement","src":"8364:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8337:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"8346:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8333:3:29"},"nodeType":"YulFunctionCall","src":"8333:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"8358:2:29","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8329:3:29"},"nodeType":"YulFunctionCall","src":"8329:32:29"},"nodeType":"YulIf","src":"8326:52:29"},{"nodeType":"YulVariableDeclaration","src":"8387:37:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8414:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8401:12:29"},"nodeType":"YulFunctionCall","src":"8401:23:29"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8391:6:29","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8433:28:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8451:2:29","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"8455:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8447:3:29"},"nodeType":"YulFunctionCall","src":"8447:10:29"},{"kind":"number","nodeType":"YulLiteral","src":"8459:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8443:3:29"},"nodeType":"YulFunctionCall","src":"8443:18:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8437:2:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8488:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8497:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8500:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8490:6:29"},"nodeType":"YulFunctionCall","src":"8490:12:29"},"nodeType":"YulExpressionStatement","src":"8490:12:29"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8476:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8484:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8473:2:29"},"nodeType":"YulFunctionCall","src":"8473:14:29"},"nodeType":"YulIf","src":"8470:34:29"},{"nodeType":"YulVariableDeclaration","src":"8513:96:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8581:9:29"},{"name":"offset","nodeType":"YulIdentifier","src":"8592:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8577:3:29"},"nodeType":"YulFunctionCall","src":"8577:22:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8601:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8539:37:29"},"nodeType":"YulFunctionCall","src":"8539:70:29"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"8517:8:29","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"8527:8:29","type":""}]},{"nodeType":"YulAssignment","src":"8618:18:29","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"8628:8:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8618:6:29"}]},{"nodeType":"YulAssignment","src":"8645:18:29","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"8655:8:29"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8645:6:29"}]},{"nodeType":"YulVariableDeclaration","src":"8672:48:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8705:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"8716:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8701:3:29"},"nodeType":"YulFunctionCall","src":"8701:18:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8688:12:29"},"nodeType":"YulFunctionCall","src":"8688:32:29"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"8676:8:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"8749:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8758:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8761:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8751:6:29"},"nodeType":"YulFunctionCall","src":"8751:12:29"},"nodeType":"YulExpressionStatement","src":"8751:12:29"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"8735:8:29"},{"name":"_1","nodeType":"YulIdentifier","src":"8745:2:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8732:2:29"},"nodeType":"YulFunctionCall","src":"8732:16:29"},"nodeType":"YulIf","src":"8729:36:29"},{"nodeType":"YulVariableDeclaration","src":"8774:98:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8842:9:29"},{"name":"offset_1","nodeType":"YulIdentifier","src":"8853:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8838:3:29"},"nodeType":"YulFunctionCall","src":"8838:24:29"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8864:7:29"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nodeType":"YulIdentifier","src":"8800:37:29"},"nodeType":"YulFunctionCall","src":"8800:72:29"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"8778:8:29","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"8788:8:29","type":""}]},{"nodeType":"YulAssignment","src":"8881:18:29","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"8891:8:29"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8881:6:29"}]},{"nodeType":"YulAssignment","src":"8908:18:29","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"8918:8:29"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8908:6:29"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8258:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8269:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8281:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8289:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8297:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8305:6:29","type":""}],"src":"8151:781:29"},{"body":{"nodeType":"YulBlock","src":"9111:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9128:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9139:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9121:6:29"},"nodeType":"YulFunctionCall","src":"9121:21:29"},"nodeType":"YulExpressionStatement","src":"9121:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9162:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9173:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9158:3:29"},"nodeType":"YulFunctionCall","src":"9158:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"9178:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9151:6:29"},"nodeType":"YulFunctionCall","src":"9151:30:29"},"nodeType":"YulExpressionStatement","src":"9151:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9201:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9212:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9197:3:29"},"nodeType":"YulFunctionCall","src":"9197:18:29"},{"hexValue":"5265636f766572793a20696e636f6e73697374656e7420617272617973","kind":"string","nodeType":"YulLiteral","src":"9217:31:29","type":"","value":"Recovery: inconsistent arrays"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9190:6:29"},"nodeType":"YulFunctionCall","src":"9190:59:29"},"nodeType":"YulExpressionStatement","src":"9190:59:29"},{"nodeType":"YulAssignment","src":"9258:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9270:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9281:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9266:3:29"},"nodeType":"YulFunctionCall","src":"9266:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9258:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9088:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9102:4:29","type":""}],"src":"8937:353:29"},{"body":{"nodeType":"YulBlock","src":"9327:95:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9344:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9351:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9356:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9347:3:29"},"nodeType":"YulFunctionCall","src":"9347:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9337:6:29"},"nodeType":"YulFunctionCall","src":"9337:31:29"},"nodeType":"YulExpressionStatement","src":"9337:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9384:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9387:4:29","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9377:6:29"},"nodeType":"YulFunctionCall","src":"9377:15:29"},"nodeType":"YulExpressionStatement","src":"9377:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9408:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9411:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9401:6:29"},"nodeType":"YulFunctionCall","src":"9401:15:29"},"nodeType":"YulExpressionStatement","src":"9401:15:29"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9295:127:29"},{"body":{"nodeType":"YulBlock","src":"9512:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"9558:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9567:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9570:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9560:6:29"},"nodeType":"YulFunctionCall","src":"9560:12:29"},"nodeType":"YulExpressionStatement","src":"9560:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9533:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"9542:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9529:3:29"},"nodeType":"YulFunctionCall","src":"9529:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"9554:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9525:3:29"},"nodeType":"YulFunctionCall","src":"9525:32:29"},"nodeType":"YulIf","src":"9522:52:29"},{"nodeType":"YulVariableDeclaration","src":"9583:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9609:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9596:12:29"},"nodeType":"YulFunctionCall","src":"9596:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"9587:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9653:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"9628:24:29"},"nodeType":"YulFunctionCall","src":"9628:31:29"},"nodeType":"YulExpressionStatement","src":"9628:31:29"},{"nodeType":"YulAssignment","src":"9668:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"9678:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9668:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1333","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9478:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9489:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9501:6:29","type":""}],"src":"9427:262:29"},{"body":{"nodeType":"YulBlock","src":"9823:119:29","statements":[{"nodeType":"YulAssignment","src":"9833:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9845:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9856:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9841:3:29"},"nodeType":"YulFunctionCall","src":"9841:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9833:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9875:9:29"},{"name":"value0","nodeType":"YulIdentifier","src":"9886:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9868:6:29"},"nodeType":"YulFunctionCall","src":"9868:25:29"},"nodeType":"YulExpressionStatement","src":"9868:25:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9913:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"9924:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9909:3:29"},"nodeType":"YulFunctionCall","src":"9909:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"9929:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9902:6:29"},"nodeType":"YulFunctionCall","src":"9902:34:29"},"nodeType":"YulExpressionStatement","src":"9902:34:29"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9784:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9795:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9803:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9814:4:29","type":""}],"src":"9694:248:29"},{"body":{"nodeType":"YulBlock","src":"9979:95:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9996:1:29","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10003:3:29","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10008:10:29","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9999:3:29"},"nodeType":"YulFunctionCall","src":"9999:20:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9989:6:29"},"nodeType":"YulFunctionCall","src":"9989:31:29"},"nodeType":"YulExpressionStatement","src":"9989:31:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10036:1:29","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10039:4:29","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10029:6:29"},"nodeType":"YulFunctionCall","src":"10029:15:29"},"nodeType":"YulExpressionStatement","src":"10029:15:29"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10060:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10063:4:29","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10053:6:29"},"nodeType":"YulFunctionCall","src":"10053:15:29"},"nodeType":"YulExpressionStatement","src":"10053:15:29"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"9947:127:29"},{"body":{"nodeType":"YulBlock","src":"10128:79:29","statements":[{"nodeType":"YulAssignment","src":"10138:17:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10150:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"10153:1:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10146:3:29"},"nodeType":"YulFunctionCall","src":"10146:9:29"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"10138:4:29"}]},{"body":{"nodeType":"YulBlock","src":"10179:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10181:16:29"},"nodeType":"YulFunctionCall","src":"10181:18:29"},"nodeType":"YulExpressionStatement","src":"10181:18:29"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"10170:4:29"},{"name":"x","nodeType":"YulIdentifier","src":"10176:1:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10167:2:29"},"nodeType":"YulFunctionCall","src":"10167:11:29"},"nodeType":"YulIf","src":"10164:37:29"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10110:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"10113:1:29","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"10119:4:29","type":""}],"src":"10079:128:29"},{"body":{"nodeType":"YulBlock","src":"10259:88:29","statements":[{"body":{"nodeType":"YulBlock","src":"10290:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10292:16:29"},"nodeType":"YulFunctionCall","src":"10292:18:29"},"nodeType":"YulExpressionStatement","src":"10292:18:29"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10275:5:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10286:1:29","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10282:3:29"},"nodeType":"YulFunctionCall","src":"10282:6:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10272:2:29"},"nodeType":"YulFunctionCall","src":"10272:17:29"},"nodeType":"YulIf","src":"10269:43:29"},{"nodeType":"YulAssignment","src":"10321:20:29","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10332:5:29"},{"kind":"number","nodeType":"YulLiteral","src":"10339:1:29","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10328:3:29"},"nodeType":"YulFunctionCall","src":"10328:13:29"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10321:3:29"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10241:5:29","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10251:3:29","type":""}],"src":"10212:135:29"},{"body":{"nodeType":"YulBlock","src":"10430:233:29","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10447:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"10452:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10440:6:29"},"nodeType":"YulFunctionCall","src":"10440:19:29"},"nodeType":"YulExpressionStatement","src":"10440:19:29"},{"body":{"nodeType":"YulBlock","src":"10503:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10512:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10515:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10505:6:29"},"nodeType":"YulFunctionCall","src":"10505:12:29"},"nodeType":"YulExpressionStatement","src":"10505:12:29"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10474:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10490:3:29","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"10495:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10486:3:29"},"nodeType":"YulFunctionCall","src":"10486:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"10499:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10482:3:29"},"nodeType":"YulFunctionCall","src":"10482:19:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10471:2:29"},"nodeType":"YulFunctionCall","src":"10471:31:29"},"nodeType":"YulIf","src":"10468:51:29"},{"nodeType":"YulVariableDeclaration","src":"10528:30:29","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10548:1:29","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"10551:6:29"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10544:3:29"},"nodeType":"YulFunctionCall","src":"10544:14:29"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"10532:8:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10584:3:29"},{"kind":"number","nodeType":"YulLiteral","src":"10589:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10580:3:29"},"nodeType":"YulFunctionCall","src":"10580:14:29"},{"name":"start","nodeType":"YulIdentifier","src":"10596:5:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"10603:8:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"10567:12:29"},"nodeType":"YulFunctionCall","src":"10567:45:29"},"nodeType":"YulExpressionStatement","src":"10567:45:29"},{"nodeType":"YulAssignment","src":"10621:36:29","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10636:3:29"},{"name":"length_1","nodeType":"YulIdentifier","src":"10641:8:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10632:3:29"},"nodeType":"YulFunctionCall","src":"10632:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"10652:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10628:3:29"},"nodeType":"YulFunctionCall","src":"10628:29:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10621:3:29"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"10399:5:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"10406:6:29","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10414:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10422:3:29","type":""}],"src":"10352:311:29"},{"body":{"nodeType":"YulBlock","src":"10829:127:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10846:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10857:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10839:6:29"},"nodeType":"YulFunctionCall","src":"10839:21:29"},"nodeType":"YulExpressionStatement","src":"10839:21:29"},{"nodeType":"YulAssignment","src":"10869:81:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10915:6:29"},{"name":"value1","nodeType":"YulIdentifier","src":"10923:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10935:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"10946:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10931:3:29"},"nodeType":"YulFunctionCall","src":"10931:18:29"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"10877:37:29"},"nodeType":"YulFunctionCall","src":"10877:73:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10869:4:29"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10790:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10801:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10809:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10820:4:29","type":""}],"src":"10668:288:29"},{"body":{"nodeType":"YulBlock","src":"11366:538:29","statements":[{"nodeType":"YulVariableDeclaration","src":"11376:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11394:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11399:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11390:3:29"},"nodeType":"YulFunctionCall","src":"11390:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"11403:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11386:3:29"},"nodeType":"YulFunctionCall","src":"11386:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11380:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11421:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11436:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"11444:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11432:3:29"},"nodeType":"YulFunctionCall","src":"11432:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11414:6:29"},"nodeType":"YulFunctionCall","src":"11414:34:29"},"nodeType":"YulExpressionStatement","src":"11414:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11468:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11479:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11464:3:29"},"nodeType":"YulFunctionCall","src":"11464:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11488:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"11496:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11484:3:29"},"nodeType":"YulFunctionCall","src":"11484:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11457:6:29"},"nodeType":"YulFunctionCall","src":"11457:43:29"},"nodeType":"YulExpressionStatement","src":"11457:43:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11520:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11531:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11516:3:29"},"nodeType":"YulFunctionCall","src":"11516:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"11536:3:29","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11509:6:29"},"nodeType":"YulFunctionCall","src":"11509:31:29"},"nodeType":"YulExpressionStatement","src":"11509:31:29"},{"nodeType":"YulVariableDeclaration","src":"11549:88:29","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11601:6:29"},{"name":"value3","nodeType":"YulIdentifier","src":"11609:6:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11621:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11632:3:29","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11617:3:29"},"nodeType":"YulFunctionCall","src":"11617:19:29"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"11563:37:29"},"nodeType":"YulFunctionCall","src":"11563:74:29"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"11553:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11657:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11668:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11653:3:29"},"nodeType":"YulFunctionCall","src":"11653:18:29"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11677:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11685:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11673:3:29"},"nodeType":"YulFunctionCall","src":"11673:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11646:6:29"},"nodeType":"YulFunctionCall","src":"11646:50:29"},"nodeType":"YulExpressionStatement","src":"11646:50:29"},{"nodeType":"YulVariableDeclaration","src":"11705:75:29","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"11757:6:29"},{"name":"value5","nodeType":"YulIdentifier","src":"11765:6:29"},{"name":"tail_1","nodeType":"YulIdentifier","src":"11773:6:29"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"11719:37:29"},"nodeType":"YulFunctionCall","src":"11719:61:29"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"11709:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11800:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"11811:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11796:3:29"},"nodeType":"YulFunctionCall","src":"11796:19:29"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11821:6:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"11829:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11817:3:29"},"nodeType":"YulFunctionCall","src":"11817:22:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11789:6:29"},"nodeType":"YulFunctionCall","src":"11789:51:29"},"nodeType":"YulExpressionStatement","src":"11789:51:29"},{"expression":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11856:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"11864:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11849:6:29"},"nodeType":"YulFunctionCall","src":"11849:17:29"},"nodeType":"YulExpressionStatement","src":"11849:17:29"},{"nodeType":"YulAssignment","src":"11875:23:29","value":{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"11887:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"11895:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11883:3:29"},"nodeType":"YulFunctionCall","src":"11883:15:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11875:4:29"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11295:9:29","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11306:6:29","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11314:6:29","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11322:6:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11330:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11338:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11346:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11357:4:29","type":""}],"src":"10961:943:29"},{"body":{"nodeType":"YulBlock","src":"11957:77:29","statements":[{"nodeType":"YulAssignment","src":"11967:16:29","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11978:1:29"},{"name":"y","nodeType":"YulIdentifier","src":"11981:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11974:3:29"},"nodeType":"YulFunctionCall","src":"11974:9:29"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11967:3:29"}]},{"body":{"nodeType":"YulBlock","src":"12006:22:29","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12008:16:29"},"nodeType":"YulFunctionCall","src":"12008:18:29"},"nodeType":"YulExpressionStatement","src":"12008:18:29"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11998:1:29"},{"name":"sum","nodeType":"YulIdentifier","src":"12001:3:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11995:2:29"},"nodeType":"YulFunctionCall","src":"11995:10:29"},"nodeType":"YulIf","src":"11992:36:29"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11940:1:29","type":""},{"name":"y","nodeType":"YulTypedName","src":"11943:1:29","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11949:3:29","type":""}],"src":"11909:125:29"},{"body":{"nodeType":"YulBlock","src":"12125:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"12171:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12180:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12183:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12173:6:29"},"nodeType":"YulFunctionCall","src":"12173:12:29"},"nodeType":"YulExpressionStatement","src":"12173:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12146:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"12155:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12142:3:29"},"nodeType":"YulFunctionCall","src":"12142:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"12167:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12138:3:29"},"nodeType":"YulFunctionCall","src":"12138:32:29"},"nodeType":"YulIf","src":"12135:52:29"},{"nodeType":"YulVariableDeclaration","src":"12196:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12222:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12209:12:29"},"nodeType":"YulFunctionCall","src":"12209:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12200:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12266:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"12241:24:29"},"nodeType":"YulFunctionCall","src":"12241:31:29"},"nodeType":"YulExpressionStatement","src":"12241:31:29"},{"nodeType":"YulAssignment","src":"12281:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"12291:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12281:6:29"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1222","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12091:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12102:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12114:6:29","type":""}],"src":"12039:263:29"},{"body":{"nodeType":"YulBlock","src":"12464:218:29","statements":[{"nodeType":"YulAssignment","src":"12474:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12486:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12497:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12482:3:29"},"nodeType":"YulFunctionCall","src":"12482:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12474:4:29"}]},{"nodeType":"YulVariableDeclaration","src":"12509:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12527:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12532:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12523:3:29"},"nodeType":"YulFunctionCall","src":"12523:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"12536:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12519:3:29"},"nodeType":"YulFunctionCall","src":"12519:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12513:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12554:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12569:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12577:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12565:3:29"},"nodeType":"YulFunctionCall","src":"12565:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12547:6:29"},"nodeType":"YulFunctionCall","src":"12547:34:29"},"nodeType":"YulExpressionStatement","src":"12547:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12601:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12612:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12597:3:29"},"nodeType":"YulFunctionCall","src":"12597:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12621:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"12629:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12617:3:29"},"nodeType":"YulFunctionCall","src":"12617:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12590:6:29"},"nodeType":"YulFunctionCall","src":"12590:43:29"},"nodeType":"YulExpressionStatement","src":"12590:43:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12653:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12664:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12649:3:29"},"nodeType":"YulFunctionCall","src":"12649:18:29"},{"name":"value2","nodeType":"YulIdentifier","src":"12669:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12642:6:29"},"nodeType":"YulFunctionCall","src":"12642:34:29"},"nodeType":"YulExpressionStatement","src":"12642:34:29"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12417:9:29","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12428:6:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12436:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12444:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12455:4:29","type":""}],"src":"12307:375:29"},{"body":{"nodeType":"YulBlock","src":"12816:259:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12833:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12844:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12826:6:29"},"nodeType":"YulFunctionCall","src":"12826:21:29"},"nodeType":"YulExpressionStatement","src":"12826:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12867:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12878:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12863:3:29"},"nodeType":"YulFunctionCall","src":"12863:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"12883:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12856:6:29"},"nodeType":"YulFunctionCall","src":"12856:34:29"},"nodeType":"YulExpressionStatement","src":"12856:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12916:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"12927:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12912:3:29"},"nodeType":"YulFunctionCall","src":"12912:18:29"},{"name":"value0","nodeType":"YulIdentifier","src":"12932:6:29"},{"name":"value1","nodeType":"YulIdentifier","src":"12940:6:29"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"12899:12:29"},"nodeType":"YulFunctionCall","src":"12899:48:29"},"nodeType":"YulExpressionStatement","src":"12899:48:29"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12971:9:29"},{"name":"value1","nodeType":"YulIdentifier","src":"12982:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12967:3:29"},"nodeType":"YulFunctionCall","src":"12967:22:29"},{"kind":"number","nodeType":"YulLiteral","src":"12991:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12963:3:29"},"nodeType":"YulFunctionCall","src":"12963:31:29"},{"kind":"number","nodeType":"YulLiteral","src":"12996:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12956:6:29"},"nodeType":"YulFunctionCall","src":"12956:42:29"},"nodeType":"YulExpressionStatement","src":"12956:42:29"},{"nodeType":"YulAssignment","src":"13007:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13023:9:29"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13042:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"13050:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13038:3:29"},"nodeType":"YulFunctionCall","src":"13038:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13059:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13055:3:29"},"nodeType":"YulFunctionCall","src":"13055:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13034:3:29"},"nodeType":"YulFunctionCall","src":"13034:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13019:3:29"},"nodeType":"YulFunctionCall","src":"13019:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"13066:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13015:3:29"},"nodeType":"YulFunctionCall","src":"13015:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13007:4:29"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12777:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12788:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12796:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12807:4:29","type":""}],"src":"12687:388:29"},{"body":{"nodeType":"YulBlock","src":"13158:177:29","statements":[{"body":{"nodeType":"YulBlock","src":"13204:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13213:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13216:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13206:6:29"},"nodeType":"YulFunctionCall","src":"13206:12:29"},"nodeType":"YulExpressionStatement","src":"13206:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13179:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"13188:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13175:3:29"},"nodeType":"YulFunctionCall","src":"13175:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"13200:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13171:3:29"},"nodeType":"YulFunctionCall","src":"13171:32:29"},"nodeType":"YulIf","src":"13168:52:29"},{"nodeType":"YulVariableDeclaration","src":"13229:36:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13255:9:29"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13242:12:29"},"nodeType":"YulFunctionCall","src":"13242:23:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"13233:5:29","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13299:5:29"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"13274:24:29"},"nodeType":"YulFunctionCall","src":"13274:31:29"},"nodeType":"YulExpressionStatement","src":"13274:31:29"},{"nodeType":"YulAssignment","src":"13314:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"13324:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13314:6:29"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13124:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13135:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13147:6:29","type":""}],"src":"13080:255:29"},{"body":{"nodeType":"YulBlock","src":"13514:181:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13531:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13542:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13524:6:29"},"nodeType":"YulFunctionCall","src":"13524:21:29"},"nodeType":"YulExpressionStatement","src":"13524:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13565:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13576:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13561:3:29"},"nodeType":"YulFunctionCall","src":"13561:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"13581:2:29","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13554:6:29"},"nodeType":"YulFunctionCall","src":"13554:30:29"},"nodeType":"YulExpressionStatement","src":"13554:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13604:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13615:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13600:3:29"},"nodeType":"YulFunctionCall","src":"13600:18:29"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"13620:33:29","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13593:6:29"},"nodeType":"YulFunctionCall","src":"13593:61:29"},"nodeType":"YulExpressionStatement","src":"13593:61:29"},{"nodeType":"YulAssignment","src":"13663:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13675:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13686:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13671:3:29"},"nodeType":"YulFunctionCall","src":"13671:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13663:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13491:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13505:4:29","type":""}],"src":"13340:355:29"},{"body":{"nodeType":"YulBlock","src":"13874:174:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13891:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13902:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13884:6:29"},"nodeType":"YulFunctionCall","src":"13884:21:29"},"nodeType":"YulExpressionStatement","src":"13884:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13925:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13936:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13921:3:29"},"nodeType":"YulFunctionCall","src":"13921:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"13941:2:29","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13914:6:29"},"nodeType":"YulFunctionCall","src":"13914:30:29"},"nodeType":"YulExpressionStatement","src":"13914:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13964:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"13975:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13960:3:29"},"nodeType":"YulFunctionCall","src":"13960:18:29"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"13980:26:29","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13953:6:29"},"nodeType":"YulFunctionCall","src":"13953:54:29"},"nodeType":"YulExpressionStatement","src":"13953:54:29"},{"nodeType":"YulAssignment","src":"14016:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14028:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14039:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14024:3:29"},"nodeType":"YulFunctionCall","src":"14024:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14016:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13851:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13865:4:29","type":""}],"src":"13700:348:29"},{"body":{"nodeType":"YulBlock","src":"14182:145:29","statements":[{"nodeType":"YulAssignment","src":"14192:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14204:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14215:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14200:3:29"},"nodeType":"YulFunctionCall","src":"14200:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14192:4:29"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14234:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14249:6:29"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14265:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14270:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14261:3:29"},"nodeType":"YulFunctionCall","src":"14261:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"14274:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14257:3:29"},"nodeType":"YulFunctionCall","src":"14257:19:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14245:3:29"},"nodeType":"YulFunctionCall","src":"14245:32:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14227:6:29"},"nodeType":"YulFunctionCall","src":"14227:51:29"},"nodeType":"YulExpressionStatement","src":"14227:51:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14298:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14309:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14294:3:29"},"nodeType":"YulFunctionCall","src":"14294:18:29"},{"name":"value1","nodeType":"YulIdentifier","src":"14314:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14287:6:29"},"nodeType":"YulFunctionCall","src":"14287:34:29"},"nodeType":"YulExpressionStatement","src":"14287:34:29"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14143:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14154:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14162:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14173:4:29","type":""}],"src":"14053:274:29"},{"body":{"nodeType":"YulBlock","src":"14506:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14523:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14534:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14516:6:29"},"nodeType":"YulFunctionCall","src":"14516:21:29"},"nodeType":"YulExpressionStatement","src":"14516:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14557:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14568:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14553:3:29"},"nodeType":"YulFunctionCall","src":"14553:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"14573:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14546:6:29"},"nodeType":"YulFunctionCall","src":"14546:30:29"},"nodeType":"YulExpressionStatement","src":"14546:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14596:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14607:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14592:3:29"},"nodeType":"YulFunctionCall","src":"14592:18:29"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"14612:31:29","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14585:6:29"},"nodeType":"YulFunctionCall","src":"14585:59:29"},"nodeType":"YulExpressionStatement","src":"14585:59:29"},{"nodeType":"YulAssignment","src":"14653:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14665:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"14676:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14661:3:29"},"nodeType":"YulFunctionCall","src":"14661:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14653:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14483:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14497:4:29","type":""}],"src":"14332:353:29"},{"body":{"nodeType":"YulBlock","src":"14881:14:29","statements":[{"nodeType":"YulAssignment","src":"14883:10:29","value":{"name":"pos","nodeType":"YulIdentifier","src":"14890:3:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14883:3:29"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14865:3:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14873:3:29","type":""}],"src":"14690:205:29"},{"body":{"nodeType":"YulBlock","src":"15074:248:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15091:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15102:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15084:6:29"},"nodeType":"YulFunctionCall","src":"15084:21:29"},"nodeType":"YulExpressionStatement","src":"15084:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15125:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15136:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15121:3:29"},"nodeType":"YulFunctionCall","src":"15121:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"15141:2:29","type":"","value":"58"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15114:6:29"},"nodeType":"YulFunctionCall","src":"15114:30:29"},"nodeType":"YulExpressionStatement","src":"15114:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15164:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15175:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15160:3:29"},"nodeType":"YulFunctionCall","src":"15160:18:29"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nodeType":"YulLiteral","src":"15180:34:29","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15153:6:29"},"nodeType":"YulFunctionCall","src":"15153:62:29"},"nodeType":"YulExpressionStatement","src":"15153:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15235:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15246:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15231:3:29"},"nodeType":"YulFunctionCall","src":"15231:18:29"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nodeType":"YulLiteral","src":"15251:28:29","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15224:6:29"},"nodeType":"YulFunctionCall","src":"15224:56:29"},"nodeType":"YulExpressionStatement","src":"15224:56:29"},{"nodeType":"YulAssignment","src":"15289:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15301:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15312:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15297:3:29"},"nodeType":"YulFunctionCall","src":"15297:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15289:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15051:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15065:4:29","type":""}],"src":"14900:422:29"},{"body":{"nodeType":"YulBlock","src":"15456:175:29","statements":[{"nodeType":"YulAssignment","src":"15466:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15478:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15489:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15474:3:29"},"nodeType":"YulFunctionCall","src":"15474:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15466:4:29"}]},{"nodeType":"YulVariableDeclaration","src":"15501:29:29","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15519:3:29","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15524:1:29","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15515:3:29"},"nodeType":"YulFunctionCall","src":"15515:11:29"},{"kind":"number","nodeType":"YulLiteral","src":"15528:1:29","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15511:3:29"},"nodeType":"YulFunctionCall","src":"15511:19:29"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15505:2:29","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15546:9:29"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15561:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"15569:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15557:3:29"},"nodeType":"YulFunctionCall","src":"15557:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15539:6:29"},"nodeType":"YulFunctionCall","src":"15539:34:29"},"nodeType":"YulExpressionStatement","src":"15539:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15593:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"15604:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15589:3:29"},"nodeType":"YulFunctionCall","src":"15589:18:29"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15613:6:29"},{"name":"_1","nodeType":"YulIdentifier","src":"15621:2:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15609:3:29"},"nodeType":"YulFunctionCall","src":"15609:15:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15582:6:29"},"nodeType":"YulFunctionCall","src":"15582:43:29"},"nodeType":"YulExpressionStatement","src":"15582:43:29"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15417:9:29","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15428:6:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15436:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15447:4:29","type":""}],"src":"15327:304:29"},{"body":{"nodeType":"YulBlock","src":"15714:199:29","statements":[{"body":{"nodeType":"YulBlock","src":"15760:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15769:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15772:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15762:6:29"},"nodeType":"YulFunctionCall","src":"15762:12:29"},"nodeType":"YulExpressionStatement","src":"15762:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15735:7:29"},{"name":"headStart","nodeType":"YulIdentifier","src":"15744:9:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15731:3:29"},"nodeType":"YulFunctionCall","src":"15731:23:29"},{"kind":"number","nodeType":"YulLiteral","src":"15756:2:29","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15727:3:29"},"nodeType":"YulFunctionCall","src":"15727:32:29"},"nodeType":"YulIf","src":"15724:52:29"},{"nodeType":"YulVariableDeclaration","src":"15785:29:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15804:9:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15798:5:29"},"nodeType":"YulFunctionCall","src":"15798:16:29"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15789:5:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"15867:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15876:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15879:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15869:6:29"},"nodeType":"YulFunctionCall","src":"15869:12:29"},"nodeType":"YulExpressionStatement","src":"15869:12:29"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15836:5:29"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15857:5:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15850:6:29"},"nodeType":"YulFunctionCall","src":"15850:13:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15843:6:29"},"nodeType":"YulFunctionCall","src":"15843:21:29"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15833:2:29"},"nodeType":"YulFunctionCall","src":"15833:32:29"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15826:6:29"},"nodeType":"YulFunctionCall","src":"15826:40:29"},"nodeType":"YulIf","src":"15823:60:29"},{"nodeType":"YulAssignment","src":"15892:15:29","value":{"name":"value","nodeType":"YulIdentifier","src":"15902:5:29"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15892:6:29"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15680:9:29","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15691:7:29","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15703:6:29","type":""}],"src":"15636:277:29"},{"body":{"nodeType":"YulBlock","src":"16092:232:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16109:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16120:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16102:6:29"},"nodeType":"YulFunctionCall","src":"16102:21:29"},"nodeType":"YulExpressionStatement","src":"16102:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16143:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16154:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16139:3:29"},"nodeType":"YulFunctionCall","src":"16139:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"16159:2:29","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16132:6:29"},"nodeType":"YulFunctionCall","src":"16132:30:29"},"nodeType":"YulExpressionStatement","src":"16132:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16182:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16193:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16178:3:29"},"nodeType":"YulFunctionCall","src":"16178:18:29"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"16198:34:29","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16171:6:29"},"nodeType":"YulFunctionCall","src":"16171:62:29"},"nodeType":"YulExpressionStatement","src":"16171:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16253:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16264:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16249:3:29"},"nodeType":"YulFunctionCall","src":"16249:18:29"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"16269:12:29","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16242:6:29"},"nodeType":"YulFunctionCall","src":"16242:40:29"},"nodeType":"YulExpressionStatement","src":"16242:40:29"},{"nodeType":"YulAssignment","src":"16291:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16303:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16314:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16299:3:29"},"nodeType":"YulFunctionCall","src":"16299:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16291:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16069:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16083:4:29","type":""}],"src":"15918:406:29"},{"body":{"nodeType":"YulBlock","src":"16459:201:29","statements":[{"body":{"nodeType":"YulBlock","src":"16497:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16506:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16509:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16499:6:29"},"nodeType":"YulFunctionCall","src":"16499:12:29"},"nodeType":"YulExpressionStatement","src":"16499:12:29"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"16475:10:29"},{"name":"endIndex","nodeType":"YulIdentifier","src":"16487:8:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16472:2:29"},"nodeType":"YulFunctionCall","src":"16472:24:29"},"nodeType":"YulIf","src":"16469:44:29"},{"body":{"nodeType":"YulBlock","src":"16546:16:29","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16555:1:29","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16558:1:29","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16548:6:29"},"nodeType":"YulFunctionCall","src":"16548:12:29"},"nodeType":"YulExpressionStatement","src":"16548:12:29"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"16528:8:29"},{"name":"length","nodeType":"YulIdentifier","src":"16538:6:29"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16525:2:29"},"nodeType":"YulFunctionCall","src":"16525:20:29"},"nodeType":"YulIf","src":"16522:40:29"},{"nodeType":"YulAssignment","src":"16571:36:29","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16588:6:29"},{"name":"startIndex","nodeType":"YulIdentifier","src":"16596:10:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16584:3:29"},"nodeType":"YulFunctionCall","src":"16584:23:29"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"16571:9:29"}]},{"nodeType":"YulAssignment","src":"16616:38:29","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"16633:8:29"},{"name":"startIndex","nodeType":"YulIdentifier","src":"16643:10:29"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16629:3:29"},"nodeType":"YulFunctionCall","src":"16629:25:29"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"16616:9:29"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16393:6:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"16401:6:29","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"16409:10:29","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"16421:8:29","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"16434:9:29","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"16445:9:29","type":""}],"src":"16329:331:29"},{"body":{"nodeType":"YulBlock","src":"16839:228:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16856:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16867:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16849:6:29"},"nodeType":"YulFunctionCall","src":"16849:21:29"},"nodeType":"YulExpressionStatement","src":"16849:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16890:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16901:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16886:3:29"},"nodeType":"YulFunctionCall","src":"16886:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"16906:2:29","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16879:6:29"},"nodeType":"YulFunctionCall","src":"16879:30:29"},"nodeType":"YulExpressionStatement","src":"16879:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16929:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"16940:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16925:3:29"},"nodeType":"YulFunctionCall","src":"16925:18:29"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"16945:34:29","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16918:6:29"},"nodeType":"YulFunctionCall","src":"16918:62:29"},"nodeType":"YulExpressionStatement","src":"16918:62:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17000:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17011:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16996:3:29"},"nodeType":"YulFunctionCall","src":"16996:18:29"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"17016:8:29","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16989:6:29"},"nodeType":"YulFunctionCall","src":"16989:36:29"},"nodeType":"YulExpressionStatement","src":"16989:36:29"},{"nodeType":"YulAssignment","src":"17034:27:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17046:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17057:3:29","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17042:3:29"},"nodeType":"YulFunctionCall","src":"17042:19:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17034:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16816:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16830:4:29","type":""}],"src":"16665:402:29"},{"body":{"nodeType":"YulBlock","src":"17138:184:29","statements":[{"nodeType":"YulVariableDeclaration","src":"17148:10:29","value":{"kind":"number","nodeType":"YulLiteral","src":"17157:1:29","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"17152:1:29","type":""}]},{"body":{"nodeType":"YulBlock","src":"17217:63:29","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17242:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"17247:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17238:3:29"},"nodeType":"YulFunctionCall","src":"17238:11:29"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17261:3:29"},{"name":"i","nodeType":"YulIdentifier","src":"17266:1:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17257:3:29"},"nodeType":"YulFunctionCall","src":"17257:11:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17251:5:29"},"nodeType":"YulFunctionCall","src":"17251:18:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17231:6:29"},"nodeType":"YulFunctionCall","src":"17231:39:29"},"nodeType":"YulExpressionStatement","src":"17231:39:29"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17178:1:29"},{"name":"length","nodeType":"YulIdentifier","src":"17181:6:29"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"17175:2:29"},"nodeType":"YulFunctionCall","src":"17175:13:29"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"17189:19:29","statements":[{"nodeType":"YulAssignment","src":"17191:15:29","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"17200:1:29"},{"kind":"number","nodeType":"YulLiteral","src":"17203:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17196:3:29"},"nodeType":"YulFunctionCall","src":"17196:10:29"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"17191:1:29"}]}]},"pre":{"nodeType":"YulBlock","src":"17171:3:29","statements":[]},"src":"17167:113:29"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17300:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"17305:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17296:3:29"},"nodeType":"YulFunctionCall","src":"17296:16:29"},{"kind":"number","nodeType":"YulLiteral","src":"17314:1:29","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17289:6:29"},"nodeType":"YulFunctionCall","src":"17289:27:29"},"nodeType":"YulExpressionStatement","src":"17289:27:29"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"17116:3:29","type":""},{"name":"dst","nodeType":"YulTypedName","src":"17121:3:29","type":""},{"name":"length","nodeType":"YulTypedName","src":"17126:6:29","type":""}],"src":"17072:250:29"},{"body":{"nodeType":"YulBlock","src":"17464:150:29","statements":[{"nodeType":"YulVariableDeclaration","src":"17474:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17494:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17488:5:29"},"nodeType":"YulFunctionCall","src":"17488:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17478:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17549:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"17557:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17545:3:29"},"nodeType":"YulFunctionCall","src":"17545:17:29"},{"name":"pos","nodeType":"YulIdentifier","src":"17564:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"17569:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17510:34:29"},"nodeType":"YulFunctionCall","src":"17510:66:29"},"nodeType":"YulExpressionStatement","src":"17510:66:29"},{"nodeType":"YulAssignment","src":"17585:23:29","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17596:3:29"},{"name":"length","nodeType":"YulIdentifier","src":"17601:6:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17592:3:29"},"nodeType":"YulFunctionCall","src":"17592:16:29"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17585:3:29"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17440:3:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17445:6:29","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17456:3:29","type":""}],"src":"17327:287:29"},{"body":{"nodeType":"YulBlock","src":"17793:179:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17810:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17821:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17803:6:29"},"nodeType":"YulFunctionCall","src":"17803:21:29"},"nodeType":"YulExpressionStatement","src":"17803:21:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17844:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17855:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17840:3:29"},"nodeType":"YulFunctionCall","src":"17840:18:29"},{"kind":"number","nodeType":"YulLiteral","src":"17860:2:29","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17833:6:29"},"nodeType":"YulFunctionCall","src":"17833:30:29"},"nodeType":"YulExpressionStatement","src":"17833:30:29"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17883:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17894:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17879:3:29"},"nodeType":"YulFunctionCall","src":"17879:18:29"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"17899:31:29","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17872:6:29"},"nodeType":"YulFunctionCall","src":"17872:59:29"},"nodeType":"YulExpressionStatement","src":"17872:59:29"},{"nodeType":"YulAssignment","src":"17940:26:29","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17952:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"17963:2:29","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17948:3:29"},"nodeType":"YulFunctionCall","src":"17948:18:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17940:4:29"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17770:9:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17784:4:29","type":""}],"src":"17619:353:29"},{"body":{"nodeType":"YulBlock","src":"18098:275:29","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18115:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18126:2:29","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18108:6:29"},"nodeType":"YulFunctionCall","src":"18108:21:29"},"nodeType":"YulExpressionStatement","src":"18108:21:29"},{"nodeType":"YulVariableDeclaration","src":"18138:27:29","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18158:6:29"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18152:5:29"},"nodeType":"YulFunctionCall","src":"18152:13:29"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18142:6:29","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18185:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18196:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18181:3:29"},"nodeType":"YulFunctionCall","src":"18181:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"18201:6:29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18174:6:29"},"nodeType":"YulFunctionCall","src":"18174:34:29"},"nodeType":"YulExpressionStatement","src":"18174:34:29"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18256:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18264:2:29","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18252:3:29"},"nodeType":"YulFunctionCall","src":"18252:15:29"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18273:9:29"},{"kind":"number","nodeType":"YulLiteral","src":"18284:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18269:3:29"},"nodeType":"YulFunctionCall","src":"18269:18:29"},{"name":"length","nodeType":"YulIdentifier","src":"18289:6:29"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"18217:34:29"},"nodeType":"YulFunctionCall","src":"18217:79:29"},"nodeType":"YulExpressionStatement","src":"18217:79:29"},{"nodeType":"YulAssignment","src":"18305:62:29","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18321:9:29"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18340:6:29"},{"kind":"number","nodeType":"YulLiteral","src":"18348:2:29","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18336:3:29"},"nodeType":"YulFunctionCall","src":"18336:15:29"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18357:2:29","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18353:3:29"},"nodeType":"YulFunctionCall","src":"18353:7:29"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18332:3:29"},"nodeType":"YulFunctionCall","src":"18332:29:29"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18317:3:29"},"nodeType":"YulFunctionCall","src":"18317:45:29"},{"kind":"number","nodeType":"YulLiteral","src":"18364:2:29","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18313:3:29"},"nodeType":"YulFunctionCall","src":"18313:54:29"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18305:4:29"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18067:9:29","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18078:6:29","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18089:4:29","type":""}],"src":"17977:396:29"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155_$1098__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1333_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let offset := calldataload(add(headStart, 64))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1222_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1333(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value2, value3, add(headStart, 160))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_calldata(value4, value5, tail_1)\n        mstore(add(headStart, 128), sub(tail_2, headStart))\n        mstore(tail_2, 0)\n        tail := add(tail_2, 32)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1222(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}","id":29,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"509":[{"length":32,"start":287},{"length":32,"start":398},{"length":32,"start":3603},{"length":32,"start":3665},{"length":32,"start":4054},{"length":32,"start":4095}],"2127":[{"length":32,"start":348},{"length":32,"start":1321},{"length":32,"start":1485},{"length":32,"start":2211}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c8062fdd58e146100d457806301ffc9a7146100fa5780632b4c9f161461011d5780634dfde97a14610157578063572b6c051461017e57806373c8a958146101be57806381c197ed146101d35780638da5cb5b146101e6578063bc197c81146101ee578063c3666c361461021a578063c4c2bfdc1461022d578063f223885a14610235578063f23a6e6114610248578063f2fde38b1461025b578063f7ba94bd1461026e578063f997659a14610281575b600080fd5b6100e76100e236600461126d565b6102a9565b6040519081526020015b60405180910390f35b61010d610108366004611299565b6102d2565b60405190151581526020016100f1565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016100f1565b61013f7f000000000000000000000000000000000000000000000000000000000000000081565b61010d61018c3660046112ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6101d16101cc366004611332565b6102e6565b005b6101d16101e13660046113cb565b6103c9565b61013f6105a1565b6102016101fc366004611477565b6105c0565b6040516001600160e01b031990911681526020016100f1565b6101d1610228366004611332565b610737565b6101d1610860565b6101d16102433660046113cb565b6108a1565b610201610256366004611535565b61092c565b6101d16102693660046112ca565b610947565b6101d161027c3660046113cb565b610965565b6100e761028f36600461126d565b600060208181529281526040808220909352908152205481565b6001600160a01b0382166000908152602081815260408083208484529091529020545b92915050565b60006102cc826102e0610a8e565b90610b47565b6102ff6102f1610ba7565b6102f96109fc565b90610bb1565b84838114801561030e57508082145b6103335760405162461bcd60e51b815260040161032a9061159e565b60405180910390fd5b60005b8181146103bf576103b7888883818110610352576103526115d5565b905060200201602081019061036791906112ca565b858584818110610379576103796115d5565b90506020020135888885818110610392576103926115d5565b90506020020160208101906103a791906112ca565b6001600160a01b03169190610bdd565b600101610336565b5050505050505050565b8281146103e9576040516335e83ac360e01b815260040160405180910390fd5b60006103f3610ba7565b905060005b848110156104ce576000868683818110610414576104146115d5565b9050602002013590506000858584818110610431576104316115d5565b6001600160a01b03871660009081526020818152604080832088845282529091205491029290920135925050818110156104885760405163cf47918160e01b8152600481018490526024810182905260440161032a565b6104928282611601565b6001600160a01b0386166000908152602081815260408083209683529590529390932092909255508190506104c681611614565b9150506103f8565b50806001600160a01b03167f651c6d84833866465bf050fea9fb84dc59faf4fc13d4607553b539e31e53ff02868660405161050a92919061165f565b60405180910390a2604051631759616b60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632eb2c2d69061056890309085908a908a908a908a90600401611673565b600060405180830381600087803b15801561058257600080fd5b505af1158015610596573d6000803e3d6000fd5b505050505050505050565b60006105bb6105ae6109fc565b546001600160a01b031690565b905090565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461060b57604051636524d08b60e01b815260040160405180910390fd5b60005b868110156106de57600088888381811061062a5761062a6115d5565b9050602002013590506000878784818110610647576106476115d5565b6001600160a01b038e1660009081526020818152604080832088845282529091205461067a9491909202013591506116d2565b905060018111156106a85760405163f4dcf56b60e01b8152600481018390526024810182905260440161032a565b6001600160a01b038b166000908152602081815260408083209483529390529190912055806106d681611614565b91505061060e565b50876001600160a01b03167fd4960fb57883d065fb41b7f993f9be3105af91fe2b595a398457e1ff226cdc50888860405161071a92919061165f565b60405180910390a25063bc197c8160e01b98975050505050505050565b6107426102f1610ba7565b84838114801561075157508082145b61076d5760405162461bcd60e51b815260040161032a9061159e565b60005b8181146103bf57858582818110610789576107896115d5565b905060200201602081019061079e91906112ca565b6001600160a01b03166323b872dd308a8a858181106107bf576107bf6115d5565b90506020020160208101906107d491906112ca565b8787868181106107e6576107e66115d5565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b50505050806001019050610770565b7f0b76c48be4e2908f4c9d4eabaf7538e91577fd9ae26db46693fa8d861c6a42fb610889610c34565b6040516108979291906116e5565b60405180910390a1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632eb2c2d66108d8610ba7565b30878787876040518763ffffffff1660e01b81526004016108fe96959493929190611673565b600060405180830381600087803b15801561091857600080fd5b505af11580156103bf573d6000803e3d6000fd5b600060405163036a2f6360e31b815260040160405180910390fd5b610962610952610ba7565b8261095b6109fc565b9190610c47565b50565b6109706102f1610ba7565b828181146109905760405162461bcd60e51b815260040161032a9061159e565b60005b8181146109f4576109ec8484838181106109af576109af6115d5565b905060200201358787848181106109c8576109c86115d5565b90506020020160208101906109dd91906112ca565b6001600160a01b031690610ccc565b600101610993565b505050505050565b6000806102cc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611601565b6001600160a01b03811615610a6e5781546001600160a01b0319166001600160a01b0382169081178355604051600090600080516020611820833981519152908290a35b610a8a6307f5828d60e41b6001610a83610a8e565b9190610abc565b5050565b6000806102cc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611601565b600160e01b6001600160e01b0319831601610b195760405162461bcd60e51b815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640161032a565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6000600160e01b6001600160e01b0319831601610b66575060006102cc565b63fe00365960e01b6001600160e01b0319831601610b86575060016102cc565b506001600160e01b0319166000908152602091909152604090205460ff1690565b60006105bb610de2565b81546001600160a01b03828116911614610a8a5760405162461bcd60e51b815260040161032a90611714565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c2f908490610eda565b505050565b366000610c3f610fac565b915091509091565b82546001600160a01b039081169083168114610c755760405162461bcd60e51b815260040161032a90611714565b816001600160a01b0316816001600160a01b031614610cc65783546001600160a01b0319166001600160a01b0383811691821786556040519083169060008051602061182083398151915290600090a35b50505050565b80471015610d1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161032a565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610d69576040519150601f19603f3d011682016040523d82523d6000602084013e610d6e565b606091505b5050905080610c2f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c20726044820152791958da5c1a595b9d081b585e481a185d99481c995d995c9d195960321b606482015260840161032a565b600033321480610df25750601836105b15610dfc57503390565b6000610e066110a9565b9050336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ec95750604051634494d46560e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90610e889084903390600401611746565b602060405180830381865afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec99190611760565b15610ed357919050565b3391505090565b6000610f2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110b59092919063ffffffff16565b805190915015610c2f5780806020019051810190610f4d9190611760565b610c2f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161032a565b36600033321480610fbd5750601836105b15610fcb5750600091369150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061109357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638929a8ca6110346110a9565b336040518363ffffffff1660e01b8152600401611052929190611746565b602060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190611760565b156110a057610c3f6110cc565b50600091369150565b60131936013560601c90565b60606110c484846000856110df565b949350505050565b366000610c3f6013198301828481611782565b6060824710156111405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161032a565b600080866001600160a01b0316858760405161115c91906117d0565b60006040518083038185875af1925050503d8060008114611199576040519150601f19603f3d011682016040523d82523d6000602084013e61119e565b606091505b50915091506111af878383876111ba565b979650505050505050565b60608315611229578251600003611222576001600160a01b0385163b6112225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032a565b50816110c4565b6110c4838381511561123e5781518083602001fd5b8060405162461bcd60e51b815260040161032a91906117ec565b6001600160a01b038116811461096257600080fd5b6000806040838503121561128057600080fd5b823561128b81611258565b946020939093013593505050565b6000602082840312156112ab57600080fd5b81356001600160e01b0319811681146112c357600080fd5b9392505050565b6000602082840312156112dc57600080fd5b81356112c381611258565b60008083601f8401126112f957600080fd5b5081356001600160401b0381111561131057600080fd5b6020830191508360208260051b850101111561132b57600080fd5b9250929050565b6000806000806000806060878903121561134b57600080fd5b86356001600160401b038082111561136257600080fd5b61136e8a838b016112e7565b9098509650602089013591508082111561138757600080fd5b6113938a838b016112e7565b909650945060408901359150808211156113ac57600080fd5b506113b989828a016112e7565b979a9699509497509295939492505050565b600080600080604085870312156113e157600080fd5b84356001600160401b03808211156113f857600080fd5b611404888389016112e7565b9096509450602087013591508082111561141d57600080fd5b5061142a878288016112e7565b95989497509550505050565b60008083601f84011261144857600080fd5b5081356001600160401b0381111561145f57600080fd5b60208301915083602082850101111561132b57600080fd5b60008060008060008060008060a0898b03121561149357600080fd5b883561149e81611258565b975060208901356114ae81611258565b965060408901356001600160401b03808211156114ca57600080fd5b6114d68c838d016112e7565b909850965060608b01359150808211156114ef57600080fd5b6114fb8c838d016112e7565b909650945060808b013591508082111561151457600080fd5b506115218b828c01611436565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561154e57600080fd5b863561155981611258565b9550602087013561156981611258565b9450604087013593506060870135925060808701356001600160401b0381111561159257600080fd5b6113b989828a01611436565b6020808252601d908201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156102cc576102cc6115eb565b600060018201611626576116266115eb565b5060010190565b81835260006001600160fb1b0383111561164657600080fd5b8260051b80836020870137939093016020019392505050565b6020815260006110c460208301848661162d565b6001600160a01b0387811682528616602082015260a0604082018190526000906116a0908301868861162d565b82810360608401526116b381858761162d565b8381036080909401939093525050600081526020019695505050505050565b808201808211156102cc576102cc6115eb565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208082526018908201527727bbb732b939b434b81d103737ba103a34329037bbb732b960411b604082015260600190565b6001600160a01b0392831681529116602082015260400190565b60006020828403121561177257600080fd5b815180151581146112c357600080fd5b6000808585111561179257600080fd5b8386111561179f57600080fd5b5050820193919092039150565b60005b838110156117c75781810151838201526020016117af565b50506000910152565b600082516117e28184602087016117ac565b9190910192915050565b602081526000825180602084015261180b8160408501602087016117ac565b601f01601f1916919091016040019291505056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a264697066735822122034cc647a760667a019f7c66ceb962c1f9742bcc46f044a8d47ae590fc3f8d28864736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xFDD58E EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0x4DFDE97A EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x81C197ED EQ PUSH2 0x1D3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x21A JUMPI DUP1 PUSH4 0xC4C2BFDC EQ PUSH2 0x22D JUMPI DUP1 PUSH4 0xF223885A EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x25B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0xF997659A EQ PUSH2 0x281 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0x126D JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x1299 JUMP JUMPDEST PUSH2 0x2D2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x13F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x18C CALLDATASIZE PUSH1 0x4 PUSH2 0x12CA JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x1CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1332 JUMP JUMPDEST PUSH2 0x2E6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D1 PUSH2 0x1E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0x13F PUSH2 0x5A1 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x1477 JUMP JUMPDEST PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF1 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x228 CALLDATASIZE PUSH1 0x4 PUSH2 0x1332 JUMP JUMPDEST PUSH2 0x737 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x860 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x243 CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x201 PUSH2 0x256 CALLDATASIZE PUSH1 0x4 PUSH2 0x1535 JUMP JUMPDEST PUSH2 0x92C JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x269 CALLDATASIZE PUSH1 0x4 PUSH2 0x12CA JUMP JUMPDEST PUSH2 0x947 JUMP JUMPDEST PUSH2 0x1D1 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x13CB JUMP JUMPDEST PUSH2 0x965 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x28F CALLDATASIZE PUSH1 0x4 PUSH2 0x126D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC DUP3 PUSH2 0x2E0 PUSH2 0xA8E JUMP JUMPDEST SWAP1 PUSH2 0xB47 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x2F1 PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x2F9 PUSH2 0x9FC JUMP JUMPDEST SWAP1 PUSH2 0xBB1 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x30E JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x333 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x159E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3BF JUMPI PUSH2 0x3B7 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x352 JUMPI PUSH2 0x352 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x367 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x379 JUMPI PUSH2 0x379 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x392 JUMPI PUSH2 0x392 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3A7 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x336 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x3E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E83AC3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F3 PUSH2 0xBA7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x414 JUMPI PUSH2 0x414 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x431 JUMPI PUSH2 0x431 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD SWAP3 POP POP DUP2 DUP2 LT ISZERO PUSH2 0x488 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCF479181 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x32A JUMP JUMPDEST PUSH2 0x492 DUP3 DUP3 PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP7 DUP4 MSTORE SWAP6 SWAP1 MSTORE SWAP4 SWAP1 SWAP4 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP DUP2 SWAP1 POP PUSH2 0x4C6 DUP2 PUSH2 0x1614 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F8 JUMP JUMPDEST POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x651C6D84833866465BF050FEA9FB84DC59FAF4FC13D4607553B539E31E53FF02 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH2 0x50A SWAP3 SWAP2 SWAP1 PUSH2 0x165F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x40 MLOAD PUSH4 0x1759616B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x2EB2C2D6 SWAP1 PUSH2 0x568 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x596 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB PUSH2 0x5AE PUSH2 0x9FC JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x60B JUMPI PUSH1 0x40 MLOAD PUSH4 0x6524D08B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x6DE JUMPI PUSH1 0x0 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x62A JUMPI PUSH2 0x62A PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x647 JUMPI PUSH2 0x647 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP15 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH2 0x67A SWAP5 SWAP2 SWAP1 SWAP3 MUL ADD CALLDATALOAD SWAP2 POP PUSH2 0x16D2 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF4DCF56B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SSTORE DUP1 PUSH2 0x6D6 DUP2 PUSH2 0x1614 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x60E JUMP JUMPDEST POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xD4960FB57883D065FB41B7F993F9BE3105AF91FE2B595A398457E1FF226CDC50 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x71A SWAP3 SWAP2 SWAP1 PUSH2 0x165F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x742 PUSH2 0x2F1 PUSH2 0xBA7 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x751 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x76D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x159E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3BF JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x789 JUMPI PUSH2 0x789 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x79E SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7D4 SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x770 JUMP JUMPDEST PUSH32 0xB76C48BE4E2908F4C9D4EABAF7538E91577FD9AE26DB46693FA8D861C6A42FB PUSH2 0x889 PUSH2 0xC34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x897 SWAP3 SWAP2 SWAP1 PUSH2 0x16E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2EB2C2D6 PUSH2 0x8D8 PUSH2 0xBA7 JUMP JUMPDEST ADDRESS DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8FE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1673 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH4 0x36A2F63 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x962 PUSH2 0x952 PUSH2 0xBA7 JUMP JUMPDEST DUP3 PUSH2 0x95B PUSH2 0x9FC JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC47 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x970 PUSH2 0x2F1 PUSH2 0xBA7 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x990 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x159E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x9F4 JUMPI PUSH2 0x9EC DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x9AF JUMPI PUSH2 0x9AF PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x9C8 JUMPI PUSH2 0x9C8 PUSH2 0x15D5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DD SWAP2 SWAP1 PUSH2 0x12CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0xCCC JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x993 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xA6E JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1820 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0xA8A PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0xA83 PUSH2 0xA8E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xABC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2CC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1601 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB19 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB66 JUMPI POP PUSH1 0x0 PUSH2 0x2CC JUMP JUMPDEST PUSH4 0xFE003659 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0xB86 JUMPI POP PUSH1 0x1 PUSH2 0x2CC JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BB PUSH2 0xDE2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x1714 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0xC2F SWAP1 DUP5 SWAP1 PUSH2 0xEDA JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0xC3F PUSH2 0xFAC JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC75 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP1 PUSH2 0x1714 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xCC6 JUMPI DUP4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1820 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xD1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD6E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xC2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH26 0x1958DA5C1A595B9D081B585E481A185D99481C995D995C9D1959 PUSH1 0x32 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xDF2 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xDFC JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE06 PUSH2 0x10A9 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0xEC9 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x4494D465 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH2 0xE88 SWAP1 DUP5 SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x1746 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEA5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEC9 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST ISZERO PUSH2 0xED3 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x10B5 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xC2F JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xF4D SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST PUSH2 0xC2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32A JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xFBD JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xFCB JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x1093 JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8929A8CA PUSH2 0x1034 PUSH2 0x10A9 JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1052 SWAP3 SWAP2 SWAP1 PUSH2 0x1746 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1093 SWAP2 SWAP1 PUSH2 0x1760 JUMP JUMPDEST ISZERO PUSH2 0x10A0 JUMPI PUSH2 0xC3F PUSH2 0x10CC JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x10C4 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x10DF JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0xC3F PUSH1 0x13 NOT DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1782 JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x115C SWAP2 SWAP1 PUSH2 0x17D0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1199 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x119E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x11AF DUP8 DUP4 DUP4 DUP8 PUSH2 0x11BA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1229 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1222 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1222 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32A JUMP JUMPDEST POP DUP2 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x10C4 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x123E JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x17EC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x962 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x128B DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12C3 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x132B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x134B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1362 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x136E DUP11 DUP4 DUP12 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1393 DUP11 DUP4 DUP12 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13B9 DUP10 DUP3 DUP11 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x13E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x13F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1404 DUP9 DUP4 DUP10 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x141D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x142A DUP8 DUP3 DUP9 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x145F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x132B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH2 0x149E DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD PUSH2 0x14AE DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x14CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14D6 DUP13 DUP4 DUP14 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x14EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14FB DUP13 DUP4 DUP14 ADD PUSH2 0x12E7 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1514 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1521 DUP12 DUP3 DUP13 ADD PUSH2 0x1436 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x154E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1559 DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x1569 DUP2 PUSH2 0x1258 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13B9 DUP10 DUP3 DUP11 ADD PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2CC JUMPI PUSH2 0x2CC PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x1626 JUMPI PUSH2 0x1626 PUSH2 0x15EB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x1646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x10C4 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x162D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x16A0 SWAP1 DUP4 ADD DUP7 DUP9 PUSH2 0x162D JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x16B3 DUP2 DUP6 DUP8 PUSH2 0x162D JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2CC JUMPI PUSH2 0x2CC PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH24 0x27BBB732B939B434B81D103737BA103A34329037BBB732B9 PUSH1 0x41 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1772 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1792 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x179F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17C7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17AF JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x17E2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x17AC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x180B DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x17AC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID DUP12 0xE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E0A264697066735822122034CC647A760667A019 0xF7 0xC6 PUSH13 0xEB962C1F9742BCC46F044A8D47 0xAE MSIZE 0xF 0xC3 0xF8 0xD2 DUP9 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"515:577:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2861:129:27;;;;;;:::i;:::-;;:::i;:::-;;;616:25:29;;;604:2;589:18;2861:129:27;;;;;;;;541:174:4;;;;;;:::i;:::-;;:::i;:::-;;;1108:14:29;;1101:22;1083:41;;1071:2;1056:18;541:174:4;943:187:29;727:114:7;816:18;727:114;;;-1:-1:-1;;;;;1325:32:29;;;1307:51;;1295:2;1280:18;727:114:7;1135:229:29;1748:41:27;;;;;876:157:7;;;;;;:::i;:::-;1007:18;-1:-1:-1;;;;;986:40:7;;;;;;;876:157;2975:512:14;;;;;;:::i;:::-;;:::i;:::-;;4064:724:27;;;;;;:::i;:::-;;:::i;709:129:1:-;;;:::i;5681:729:27:-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;;6169:33:29;;;6151:52;;6139:2;6124:18;5681:729:27;6007:202:29;4209:541:14;;;;;;:::i;:::-;;:::i;1026:64:28:-;;;:::i;3322:177:27:-;;;;;;:::i;:::-;;:::i;4913:153::-;;;;;;:::i;:::-;;:::i;872:161:1:-;;;;;;:::i;:::-;;:::i;1812:450:14:-;;;;;;:::i;:::-;;:::i;1891:67:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2861:129;-1:-1:-1;;;;;2958:21:27;;2932:7;2958:21;;;;;;;;;;;:25;;;;;;;;;2861:129;;;;;:::o;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;2975:512:14:-;3108:70;3165:12;:10;:12::i;:::-;3108:33;:31;:33::i;:::-;:56;;:70::i;:::-;3205:8;3238:23;;;:51;;;;-1:-1:-1;3265:24:14;;;3238:51;3230:93;;;;-1:-1:-1;;;3230:93:14;;;;;;;:::i;:::-;;;;;;;;;3362:9;3357:114;3378:6;3373:1;:11;3357:114;;3409:47;3432:8;;3441:1;3432:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3445:7;;3453:1;3445:10;;;;;;;:::i;:::-;;;;;;;3409:6;;3416:1;3409:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3409:22:14;;:47;:22;:47::i;:::-;3386:3;;3357:114;;;;3098:389;2975:512;;;;;;:::o;4064:724:27:-;4156:27;;;4152:85;;4206:20;;-1:-1:-1;;;4206:20:27;;;;;;;;;;;4152:85;4246:14;4263:12;:10;:12::i;:::-;4246:29;;4290:9;4285:366;4305:14;;;4285:366;;;4340:10;4353:3;;4357:1;4353:6;;;;;;;:::i;:::-;;;;;;;4340:19;;4373:13;4389:6;;4396:1;4389:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;4436:20:27;;4412:21;4436:20;;;4389:9;4436:20;;;;;;;:24;;;;;;;;;4389:9;;;;;;;;-1:-1:-1;;4478:21:27;;;4474:105;;;4526:38;;-1:-1:-1;;;4526:38:27;;;;;9868:25:29;;;9909:18;;;9902:34;;;9841:18;;4526:38:27;9694:248:29;4474:105:27;4619:21;4635:5;4619:13;:21;:::i;:::-;-1:-1:-1;;;;;4592:20:27;;:12;:20;;;;;;;;;;;:24;;;;;;;;;;:48;;;;-1:-1:-1;4321:3:27;;-1:-1:-1;4321:3:27;;;:::i;:::-;;;;4285:366;;;;4681:6;-1:-1:-1;;;;;4666:27:27;;4689:3;;4666:27;;;;;;;:::i;:::-;;;;;;;;4704:77;;-1:-1:-1;;;4704:77:27;;-1:-1:-1;;;;;4704:15:27;:37;;;;:77;;4750:4;;4757:6;;4765:3;;;;4770:6;;;;4704:77;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4142:646;4064:724;;;;:::o;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;-1:-1:-1;;;;;3352:15:3;;3256:118;790:41:1;783:48;;709:129;:::o;5681:729:27:-;5867:6;5889:10;-1:-1:-1;;;;;5911:15:27;5889:38;;5885:94;;5950:18;;-1:-1:-1;;;5950:18:27;;;;;;;;;;;5885:94;5993:9;5988:307;6008:14;;;5988:307;;;6043:10;6056:3;;6060:1;6056:6;;;;;;;:::i;:::-;;;;;;;6043:19;;6076:18;6122:6;;6129:1;6122:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;6097:18:27;;:12;:18;;;6122:9;6097:18;;;;;;;:22;;;;;;;;;:34;;6122:9;;;;;;;-1:-1:-1;6097:34:27;:::i;:::-;6076:55;;6162:1;6149:10;:14;6145:91;;;6190:31;;-1:-1:-1;;;6190:31:27;;;;;9868:25:29;;;9909:18;;;9902:34;;;9841:18;;6190:31:27;9694:248:29;6145:91:27;-1:-1:-1;;;;;6249:18:27;;:12;:18;;;;;;;;;;;:22;;;;;;;;;;:35;6024:3;;;;:::i;:::-;;;;5988:307;;;;6323:4;-1:-1:-1;;;;;6309:24:27;;6329:3;;6309:24;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;5681:729:27;;;;;;;;;;:::o;4209:541:14:-;4348:70;4405:12;:10;:12::i;4348:70::-;4445:8;4478:26;;;:55;;;;-1:-1:-1;4508:25:14;;;4478:55;4470:97;;;;-1:-1:-1;;;4470:97:14;;;;;;;:::i;:::-;4606:9;4601:133;4622:6;4617:1;:11;4601:133;;4653:9;;4663:1;4653:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4653:25:14;;4687:4;4694:8;;4703:1;4694:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4707:8;;4716:1;4707:11;;;;;;;:::i;:::-;4653:66;;-1:-1:-1;;;;;;4653:66:14;;;;;;;-1:-1:-1;;;;;12565:15:29;;;4653:66:14;;;12547:34:29;12617:15;;;;12597:18;;;12590:43;-1:-1:-1;4707:11:14;;;;;;12649:18:29;;;12642:34;12482:18;;4653:66:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:3;;;;;4601:133;;1026:64:28;1067:16;1072:10;:8;:10::i;:::-;1067:16;;;;;;;:::i;:::-;;;;;;;;1026:64::o;3322:177:27:-;3409:15;-1:-1:-1;;;;;3409:37:27;;3447:12;:10;:12::i;:::-;3469:4;3476:3;;3481:6;;3409:83;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4913:153;5015:6;5040:19;;-1:-1:-1;;;5040:19:27;;;;;;;;;;;872:161:1;951:75;1003:12;:10;:12::i;:::-;1017:8;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;1812:450:14:-;1924:70;1981:12;:10;:12::i;1924:70::-;2021:8;2054:24;;;2046:66;;;;-1:-1:-1;;;2046:66:14;;;;;;;:::i;:::-;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2198:21:14;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;;;;;;;;;;;;1511:46:3;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;13542:2:29;774:79:6;;;13524:21:29;13581:2;13561:18;;;13554:30;13620:33;13600:18;;;13593:61;13671:18;;774:79:6;13340:355:29;774:79:6;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;1267:340::-;1355:14;-1:-1:-1;;;;;;;;;1385:35:6;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;-1:-1:-1;;;;;;;;;1472:40:6;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;;;;;;;1566:34:6;:21;:34;;;;;;;;;;;;;;;1267:340::o;6416:175:27:-;6517:7;6543:41;:39;:41::i;3540:161:3:-;3650:15;;-1:-1:-1;;;;;3639:26:3;;;3650:15;;3639:26;3631:63;;;;-1:-1:-1;;;3631:63:3;;;;;;;:::i;763:205:23:-;902:58;;;-1:-1:-1;;;;;14245:32:29;;902:58:23;;;14227:51:29;14294:18;;;;14287:34;;;902:58:23;;;;;;;;;;14200:18:29;;;;902:58:23;;;;;;;;-1:-1:-1;;;;;902:58:23;-1:-1:-1;;;902:58:23;;;875:86;;895:5;;875:19;:86::i;:::-;763:205;;;:::o;6597:178:27:-;6696:14;;6729:39;:37;:39::i;:::-;6722:46;;;;6597:178;;:::o;2760:369:3:-;2882:15;;-1:-1:-1;;;;;2882:15:3;;;;2915:23;;;;2907:60;;;;-1:-1:-1;;;2907:60:3;;;;;;;:::i;:::-;2998:8;-1:-1:-1;;;;;2981:25:3;:13;-1:-1:-1;;;;;2981:25:3;;2977:146;;3022:26;;-1:-1:-1;;;;;;3022:26:3;-1:-1:-1;;;;;3022:26:3;;;;;;;;3067:45;;;;;;-1:-1:-1;;;;;;;;;;;3067:45:3;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;2412:312:24:-;2526:6;2501:21;:31;;2493:73;;;;-1:-1:-1;;;2493:73:24;;14534:2:29;2493:73:24;;;14516:21:29;14573:2;14553:18;;;14546:30;14612:31;14592:18;;;14585:59;14661:18;;2493:73:24;14332:353:29;2493:73:24;2578:12;2596:9;-1:-1:-1;;;;;2596:14:24;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;-1:-1:-1;;;2639:78:24;;15102:2:29;2639:78:24;;;15084:21:29;15141:2;15121:18;;;15114:30;15180:34;15160:18;;;15153:62;-1:-1:-1;;;15231:18:29;;;15224:56;15297:19;;2639:78:24;14900:422:29;781:743:8;834:7;1044:10;1058:9;1044:23;;:47;;-1:-1:-1;1089:2:8;1071:8;:20;1044:47;1040:95;;;-1:-1:-1;1114:10:8;;781:743::o;1040:95::-;1145:14;1162:27;:25;:27::i;:::-;1145:44;-1:-1:-1;1347:10:8;-1:-1:-1;;;;;1369:18:8;1347:41;;;:103;;-1:-1:-1;1392:58:8;;-1:-1:-1;;;1392:58:8;;-1:-1:-1;;;;;1392:18:8;:38;;;;:58;;1431:6;;1439:10;;1392:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1343:147;;;1473:6;781:743;-1:-1:-1;781:743:8:o;1343:147::-;1507:10;1500:17;;;781:743;:::o;3747:706:23:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:23;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:23;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:23;;16120:2:29;4351:85:23;;;16102:21:29;16159:2;16139:18;;;16132:30;16198:34;16178:18;;;16171:62;-1:-1:-1;;;16249:18:29;;;16242:40;16299:19;;4351:85:23;15918:406:29;1638:733:8;1689:14;;1906:10;1920:9;1906:23;;:47;;-1:-1:-1;1951:2:8;1933:8;:20;1906:47;1902:93;;;-1:-1:-1;1976:8:8;;;;-1:-1:-1;1638:733:8:o;1902:93::-;2156:10;-1:-1:-1;;;;;2178:18:8;2156:41;;;:124;;;2201:18;-1:-1:-1;;;;;2201:38:8;;2240:27;:25;:27::i;:::-;2269:10;2201:79;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2152:187;;;2303:25;:23;:25::i;2152:187::-;-1:-1:-1;2356:8:8;;;;-1:-1:-1;1638:733:8:o;337:165:11:-;-1:-1:-1;;465:14:11;461:23;448:37;444:2;440:46;;337:165::o;3873:223:24:-;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:24:o;615:152:11:-;657:19;;719:31;-1:-1:-1;;729:20:11;;657:19;;;719:31;:::i;4960:446:24:-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:24;;16867:2:29;5149:81:24;;;16849:21:29;16906:2;16886:18;;;16879:30;16945:34;16925:18;;;16918:62;-1:-1:-1;;;16996:18:29;;;16989:36;17042:19;;5149:81:24;16665:402:29;5149:81:24;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:24;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:24:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:24;;;7908:60;;;;-1:-1:-1;;;7908:60:24;;17821:2:29;7908:60:24;;;17803:21:29;17860:2;17840:18;;;17833:30;17899:31;17879:18;;;17872:59;17948:18;;7908:60:24;17619:353:29;7908:60:24;-1:-1:-1;8003:10:24;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:24;;;;;;;;:::i;14:131:29:-;-1:-1:-1;;;;;89:31:29;;79:42;;69:70;;135:1;132;125:12;150:315;218:6;226;279:2;267:9;258:7;254:23;250:32;247:52;;;295:1;292;285:12;247:52;334:9;321:23;353:31;378:5;353:31;:::i;:::-;403:5;455:2;440:18;;;;427:32;;-1:-1:-1;;;150:315:29:o;652:286::-;710:6;763:2;751:9;742:7;738:23;734:32;731:52;;;779:1;776;769:12;731:52;805:23;;-1:-1:-1;;;;;;857:32:29;;847:43;;837:71;;904:1;901;894:12;837:71;927:5;652:286;-1:-1:-1;;;652:286:29:o;1594:247::-;1653:6;1706:2;1694:9;1685:7;1681:23;1677:32;1674:52;;;1722:1;1719;1712:12;1674:52;1761:9;1748:23;1780:31;1805:5;1780:31;:::i;1846:367::-;1909:8;1919:6;1973:3;1966:4;1958:6;1954:17;1950:27;1940:55;;1991:1;1988;1981:12;1940:55;-1:-1:-1;2014:20:29;;-1:-1:-1;;;;;2046:30:29;;2043:50;;;2089:1;2086;2079:12;2043:50;2126:4;2118:6;2114:17;2102:29;;2186:3;2179:4;2169:6;2166:1;2162:14;2154:6;2150:27;2146:38;2143:47;2140:67;;;2203:1;2200;2193:12;2140:67;1846:367;;;;;:::o;2218:1103::-;2391:6;2399;2407;2415;2423;2431;2484:2;2472:9;2463:7;2459:23;2455:32;2452:52;;;2500:1;2497;2490:12;2452:52;2527:23;;-1:-1:-1;;;;;2599:14:29;;;2596:34;;;2626:1;2623;2616:12;2596:34;2665:70;2727:7;2718:6;2707:9;2703:22;2665:70;:::i;:::-;2754:8;;-1:-1:-1;2639:96:29;-1:-1:-1;2842:2:29;2827:18;;2814:32;;-1:-1:-1;2858:16:29;;;2855:36;;;2887:1;2884;2877:12;2855:36;2926:72;2990:7;2979:8;2968:9;2964:24;2926:72;:::i;:::-;3017:8;;-1:-1:-1;2900:98:29;-1:-1:-1;3105:2:29;3090:18;;3077:32;;-1:-1:-1;3121:16:29;;;3118:36;;;3150:1;3147;3140:12;3118:36;;3189:72;3253:7;3242:8;3231:9;3227:24;3189:72;:::i;:::-;2218:1103;;;;-1:-1:-1;2218:1103:29;;-1:-1:-1;2218:1103:29;;3280:8;;2218:1103;-1:-1:-1;;;2218:1103:29:o;3326:773::-;3448:6;3456;3464;3472;3525:2;3513:9;3504:7;3500:23;3496:32;3493:52;;;3541:1;3538;3531:12;3493:52;3568:23;;-1:-1:-1;;;;;3640:14:29;;;3637:34;;;3667:1;3664;3657:12;3637:34;3706:70;3768:7;3759:6;3748:9;3744:22;3706:70;:::i;:::-;3795:8;;-1:-1:-1;3680:96:29;-1:-1:-1;3883:2:29;3868:18;;3855:32;;-1:-1:-1;3899:16:29;;;3896:36;;;3928:1;3925;3918:12;3896:36;;3967:72;4031:7;4020:8;4009:9;4005:24;3967:72;:::i;:::-;3326:773;;;;-1:-1:-1;4058:8:29;-1:-1:-1;;;;3326:773:29:o;4312:347::-;4363:8;4373:6;4427:3;4420:4;4412:6;4408:17;4404:27;4394:55;;4445:1;4442;4435:12;4394:55;-1:-1:-1;4468:20:29;;-1:-1:-1;;;;;4500:30:29;;4497:50;;;4543:1;4540;4533:12;4497:50;4580:4;4572:6;4568:17;4556:29;;4632:3;4625:4;4616:6;4608;4604:19;4600:30;4597:39;4594:59;;;4649:1;4646;4639:12;4664:1338;4824:6;4832;4840;4848;4856;4864;4872;4880;4933:3;4921:9;4912:7;4908:23;4904:33;4901:53;;;4950:1;4947;4940:12;4901:53;4989:9;4976:23;5008:31;5033:5;5008:31;:::i;:::-;5058:5;-1:-1:-1;5115:2:29;5100:18;;5087:32;5128:33;5087:32;5128:33;:::i;:::-;5180:7;-1:-1:-1;5238:2:29;5223:18;;5210:32;-1:-1:-1;;;;;5291:14:29;;;5288:34;;;5318:1;5315;5308:12;5288:34;5357:70;5419:7;5410:6;5399:9;5395:22;5357:70;:::i;:::-;5446:8;;-1:-1:-1;5331:96:29;-1:-1:-1;5534:2:29;5519:18;;5506:32;;-1:-1:-1;5550:16:29;;;5547:36;;;5579:1;5576;5569:12;5547:36;5618:72;5682:7;5671:8;5660:9;5656:24;5618:72;:::i;:::-;5709:8;;-1:-1:-1;5592:98:29;-1:-1:-1;5797:3:29;5782:19;;5769:33;;-1:-1:-1;5814:16:29;;;5811:36;;;5843:1;5840;5833:12;5811:36;;5882:60;5934:7;5923:8;5912:9;5908:24;5882:60;:::i;:::-;4664:1338;;;;-1:-1:-1;4664:1338:29;;-1:-1:-1;4664:1338:29;;;;;;5961:8;-1:-1:-1;;;4664:1338:29:o;7323:823::-;7429:6;7437;7445;7453;7461;7469;7522:3;7510:9;7501:7;7497:23;7493:33;7490:53;;;7539:1;7536;7529:12;7490:53;7578:9;7565:23;7597:31;7622:5;7597:31;:::i;:::-;7647:5;-1:-1:-1;7704:2:29;7689:18;;7676:32;7717:33;7676:32;7717:33;:::i;:::-;7769:7;-1:-1:-1;7823:2:29;7808:18;;7795:32;;-1:-1:-1;7874:2:29;7859:18;;7846:32;;-1:-1:-1;7929:3:29;7914:19;;7901:33;-1:-1:-1;;;;;7946:30:29;;7943:50;;;7989:1;7986;7979:12;7943:50;8028:58;8078:7;8069:6;8058:9;8054:22;8028:58;:::i;8937:353::-;9139:2;9121:21;;;9178:2;9158:18;;;9151:30;9217:31;9212:2;9197:18;;9190:59;9281:2;9266:18;;8937:353::o;9295:127::-;9356:10;9351:3;9347:20;9344:1;9337:31;9387:4;9384:1;9377:15;9411:4;9408:1;9401:15;9947:127;10008:10;10003:3;9999:20;9996:1;9989:31;10039:4;10036:1;10029:15;10063:4;10060:1;10053:15;10079:128;10146:9;;;10167:11;;;10164:37;;;10181:18;;:::i;10212:135::-;10251:3;10272:17;;;10269:43;;10292:18;;:::i;:::-;-1:-1:-1;10339:1:29;10328:13;;10212:135::o;10352:311::-;10440:19;;;10422:3;-1:-1:-1;;;;;10471:31:29;;10468:51;;;10515:1;10512;10505:12;10468:51;10551:6;10548:1;10544:14;10603:8;10596:5;10589:4;10584:3;10580:14;10567:45;10632:18;;;;10652:4;10628:29;;10352:311;-1:-1:-1;;;10352:311:29:o;10668:288::-;10857:2;10846:9;10839:21;10820:4;10877:73;10946:2;10935:9;10931:18;10923:6;10915;10877:73;:::i;10961:943::-;-1:-1:-1;;;;;11432:15:29;;;11414:34;;11484:15;;11479:2;11464:18;;11457:43;11394:3;11531:2;11516:18;;11509:31;;;11357:4;;11563:74;;11617:19;;11609:6;11601;11563:74;:::i;:::-;11685:9;11677:6;11673:22;11668:2;11657:9;11653:18;11646:50;11719:61;11773:6;11765;11757;11719:61;:::i;:::-;11817:22;;;11811:3;11796:19;;;11789:51;;;;-1:-1:-1;;11864:1:29;11849:17;;11895:2;11883:15;;10961:943;-1:-1:-1;;;;;;10961:943:29:o;11909:125::-;11974:9;;;11995:10;;;11992:36;;;12008:18;;:::i;12687:388::-;12844:2;12833:9;12826:21;12883:6;12878:2;12867:9;12863:18;12856:34;12940:6;12932;12927:2;12916:9;12912:18;12899:48;12996:1;12967:22;;;12991:2;12963:31;;;12956:42;;;;13059:2;13038:15;;;-1:-1:-1;;13034:29:29;13019:45;13015:54;;12687:388;-1:-1:-1;12687:388:29:o;13700:348::-;13902:2;13884:21;;;13941:2;13921:18;;;13914:30;-1:-1:-1;;;13975:2:29;13960:18;;13953:54;14039:2;14024:18;;13700:348::o;15327:304::-;-1:-1:-1;;;;;15557:15:29;;;15539:34;;15609:15;;15604:2;15589:18;;15582:43;15489:2;15474:18;;15327:304::o;15636:277::-;15703:6;15756:2;15744:9;15735:7;15731:23;15727:32;15724:52;;;15772:1;15769;15762:12;15724:52;15804:9;15798:16;15857:5;15850:13;15843:21;15836:5;15833:32;15823:60;;15879:1;15876;15869:12;16329:331;16434:9;16445;16487:8;16475:10;16472:24;16469:44;;;16509:1;16506;16499:12;16469:44;16538:6;16528:8;16525:20;16522:40;;;16558:1;16555;16548:12;16522:40;-1:-1:-1;;16584:23:29;;;16629:25;;;;;-1:-1:-1;16329:331:29:o;17072:250::-;17157:1;17167:113;17181:6;17178:1;17175:13;17167:113;;;17257:11;;;17251:18;17238:11;;;17231:39;17203:2;17196:10;17167:113;;;-1:-1:-1;;17314:1:29;17296:16;;17289:27;17072:250::o;17327:287::-;17456:3;17494:6;17488:13;17510:66;17569:6;17564:3;17557:4;17549:6;17545:17;17510:66;:::i;:::-;17592:16;;;;;17327:287;-1:-1:-1;;17327:287:29:o;17977:396::-;18126:2;18115:9;18108:21;18089:4;18158:6;18152:13;18201:6;18196:2;18185:9;18181:18;18174:34;18217:79;18289:6;18284:2;18273:9;18269:18;18264:2;18256:6;18252:15;18217:79;:::i;:::-;18357:2;18336:15;-1:-1:-1;;18332:29:29;18317:45;;;;18364:2;18313:54;;17977:396;-1:-1:-1;;17977:396:29:o"},"gasEstimates":{"creation":{"codeDepositCost":"1252200","executionCost":"infinite","totalCost":"infinite"},"external":{"TOKEN_INVENTORY()":"infinite","balanceOf(address,uint256)":"2611","deposit(uint256[],uint256[])":"infinite","escrowedNFTs(address,uint256)":"2897","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","msgData()":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite","withdraw(uint256[],uint256[])":"infinite"}},"methodIdentifiers":{"TOKEN_INVENTORY()":"4dfde97a","balanceOf(address,uint256)":"00fdd58e","deposit(uint256[],uint256[])":"f223885a","escrowedNFTs(address,uint256)":"f997659a","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","msgData()":"c4c2bfdc","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b","withdraw(uint256[],uint256[])":"81c197ed"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155\",\"name\":\"inventory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInventory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedMethod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Data\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"DepositTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_INVENTORY\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowedNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"The address of the token holder\",\"id\":\"The ID of the token\"},\"returns\":{\"_0\":\"balance The amount of token escrowed held by the token holder correponding to the token ID\"}},\"constructor\":{\"details\":\"Throws if the _inventory address is a zero address.ContractOwnership is required to initiate TokenRecovery\",\"params\":{\"forwarderRegistry\":\"The forwarder registry contract information\",\"inventory_\":\"The inventory contract address\"}},\"deposit(uint256[],uint256[])\":{\"details\":\"Batch transfer tokens from the sender to this contract\",\"params\":{\"ids\":\"An array containing ids of each token being transferred (corresponds to orbTypes)\",\"values\":\"An array containing amounts of each token being transferred (corresponds to quantities)\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if the sender is not in the inventory.Updates the escrowedTokens mapping.Reverts if the updated token balance is greater than 1Emits a {DepositTokens} event.\",\"params\":{\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (corresponds to orbTypes)\",\"values\":\"An array containing amounts of each token being transferred (corresponds to quantities)\"},\"returns\":{\"_0\":\"selector The function selector\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if this method has been triggered.\"},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw(uint256[],uint256[])\":{\"details\":\"Reverts if the array length of ids & values does not match.Reverts if the sender does not have enough balance.Updates the escrowedTokens mapping.Emits {WithdrawTokens} events.Transfers the token from this contract to the sender's address\",\"params\":{\"ids\":\"An array containing ids of each token being transferred (corresponds to orbTypes)\",\"values\":\"An array containing amounts of each token being transferred (corresponds to quantities)\"}}},\"title\":\"ORBNFTMock Contract\",\"version\":1},\"userdoc\":{\"events\":{\"DepositTokens(address,uint256[])\":{\"notice\":\"Emitted when tokens are deposited\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"WithdrawTokens(address,uint256[])\":{\"notice\":\"Emitted when tokens are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"TOKEN_INVENTORY()\":{\"notice\":\"An Orb contract reference\"},\"balanceOf(address,uint256)\":{\"notice\":\"Returns the escrowed token balance of a given token held by a given address\"},\"constructor\":{\"notice\":\"Creates a new escrow contract\"},\"deposit(uint256[],uint256[])\":{\"notice\":\"Handles the deposit of tokens.\"},\"escrowedNFTs(address,uint256)\":{\"notice\":\"Mapping from owner address to a mapping from token ID to escrowed token count.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple types of tokens.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single type of token.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw(uint256[],uint256[])\":{\"notice\":\"Handles token withdrawal\"}},\"notice\":\"Mock contract for testing purposes, extends the ORBNFT contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/TokenEscrow/TokenEscrowMock.sol\":\"TokenEscrowMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0x6f9d7bfb917d66343e44d9f1a89f18e407d8458cfc4e58ebe2164e51fc4e4ff8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Emitted when some token is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param id The transferred token identifier.\\n    /// @param value The amount of token.\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a batch of tokens is transferred.\\n    /// @param operator The initiator of the transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param to The new tokens owner.\\n    /// @param ids The transferred tokens identifiers.\\n    /// @param values The amounts of tokens.\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /// @notice Emitted optionally when a token metadata URI is set.\\n    /// @param value The token metadata URI.\\n    /// @param id The token identifier.\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0x5607f91934c2099f1524570bbbd26cb8dfe0d56ba6797011c98538cc28b4d44a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe778d7e018a7b1fb46f0f6a8f034a008ecb84f46812d26372a1e5c1c2e092451\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.9.5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/escrow/TokenEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\n\\n/// @title TokenEscrow contract\\n/// @notice Contract that allows users to escrow tokens for use in the Anichess Game.\\ncontract TokenEscrow is ForwarderRegistryContext, TokenRecovery, ERC1155TokenReceiver {\\n    /// @notice Emitted when tokens are deposited\\n    event DepositTokens(address indexed user, uint256[] ids);\\n\\n    /// @notice Emitted when tokens are withdrawn\\n    event WithdrawTokens(address indexed user, uint256[] ids);\\n\\n    // Custom errors\\n    error InvalidInventory();\\n    error UnsupportedMethod();\\n    error InsufficientBalance(uint256 tokenId, uint256 balance);\\n    error BalanceExceeded(uint256 tokenId, uint256 balance);\\n    error InconsistentArrays();\\n\\n    /// @notice An Orb contract reference\\n    IERC1155 public immutable TOKEN_INVENTORY;\\n\\n    /// @notice Mapping from owner address to a mapping from token ID to escrowed token count.\\n    mapping(address => mapping(uint256 => uint256)) public escrowedNFTs;\\n\\n    /// @notice Creates a new escrow contract\\n    /// @dev Throws if the _inventory address is a zero address.\\n    /// @dev ContractOwnership is required to initiate TokenRecovery\\n    /// @param forwarderRegistry The forwarder registry contract information\\n    /// @param inventory The inventory contract address\\n    constructor(IForwarderRegistry forwarderRegistry, IERC1155 inventory) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        if (address(inventory) == address(0)) {\\n            revert InvalidInventory();\\n        }\\n        TOKEN_INVENTORY = inventory;\\n    }\\n\\n    /// @notice Returns the escrowed token balance of a given token held by a given address\\n    /// @param account The address of the token holder\\n    /// @param id The ID of the token\\n    /// @return balance The amount of token escrowed held by the token holder correponding to the token ID\\n    function balanceOf(address account, uint256 id) external view returns (uint256) {\\n        return escrowedNFTs[account][id];\\n    }\\n\\n    /// @notice Handles the deposit of tokens.\\n    /// @dev Batch transfer tokens from the sender to this contract\\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\\n    function deposit(uint256[] calldata ids, uint256[] calldata values) external {\\n        TOKEN_INVENTORY.safeBatchTransferFrom(_msgSender(), address(this), ids, values, \\\"\\\");\\n    }\\n\\n    /// @notice Handles token withdrawal\\n    /// @dev Reverts if the array length of ids & values does not match.\\n    /// @dev Reverts if the sender does not have enough balance.\\n    /// @dev Updates the escrowedTokens mapping.\\n    /// @dev Emits {WithdrawTokens} events.\\n    /// @dev Transfers the token from this contract to the sender's address\\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\\n    function withdraw(uint256[] calldata ids, uint256[] calldata values) external {\\n        if (ids.length != values.length) {\\n            revert InconsistentArrays();\\n        }\\n        address sender = _msgSender();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n            uint256 senderBalance = escrowedNFTs[sender][id];\\n            if (senderBalance < value) {\\n                revert InsufficientBalance(id, senderBalance);\\n            }\\n            escrowedNFTs[sender][id] = senderBalance - value;\\n        }\\n\\n        emit WithdrawTokens(sender, ids);\\n\\n        TOKEN_INVENTORY.safeBatchTransferFrom(address(this), sender, ids, values, \\\"\\\");\\n    }\\n\\n    /// @notice Handles the receipt of a single type of token.\\n    /// @dev Reverts if this method has been triggered.\\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns (bytes4) {\\n        revert UnsupportedMethod();\\n    }\\n\\n    /// @notice Handles the receipt of multiple types of tokens.\\n    /// @dev Reverts if the sender is not in the inventory.\\n    /// @dev Updates the escrowedTokens mapping.\\n    /// @dev Reverts if the updated token balance is greater than 1\\n    /// @dev Emits a {DepositTokens} event.\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (corresponds to orbTypes)\\n    /// @param values An array containing amounts of each token being transferred (corresponds to quantities)\\n    /// @return selector The function selector\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(TOKEN_INVENTORY)) {\\n            revert InvalidInventory();\\n        }\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 newBalance = escrowedNFTs[from][id] + values[i];\\n            if (newBalance > 1) {\\n                revert BalanceExceeded(id, newBalance);\\n            }\\n            escrowedNFTs[from][id] = newBalance;\\n        }\\n        emit DepositTokens(from, ids);\\n        return IERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xd94fda89c0b59d11cb6c98c7411d42766af01844effd5286078025216ffc2064\",\"license\":\"MIT\"},\"contracts/mocks/TokenEscrow/TokenEscrowMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {TokenEscrow} from \\\"../../escrow/TokenEscrow.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts-4.9.5/utils/Context.sol\\\";\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\n\\n/// @title ORBNFTMock Contract\\n/// @notice Mock contract for testing purposes, extends the ORBNFT contract.\\n\\ncontract TokenEscrowMock is TokenEscrow {\\n    event Data(bytes data);\\n\\n    /// @notice Creates a new escrow contract\\n    /// @dev Throws if the _inventory address is a zero address.\\n    /// @dev ContractOwnership is required to initiate TokenRecovery\\n    /// @param forwarderRegistry The forwarder registry contract information\\n    /// @param inventory_ The inventory contract address\\n    constructor(IForwarderRegistry forwarderRegistry, IERC1155 inventory_) TokenEscrow(forwarderRegistry, inventory_) {}\\n\\n    function msgData() public {\\n        emit Data(_msgData());\\n    }\\n}\\n\",\"keccak256\":\"0x2a5d776950768b72bea1f7f81bceab8f9cb0efa758d8b83a88513096c4e1a576\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2134,"contract":"contracts/mocks/TokenEscrow/TokenEscrowMock.sol:TokenEscrowMock","label":"escrowedNFTs","offset":0,"slot":"0","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"DepositTokens(address,uint256[])":{"notice":"Emitted when tokens are deposited"},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"WithdrawTokens(address,uint256[])":{"notice":"Emitted when tokens are withdrawn"}},"kind":"user","methods":{"TOKEN_INVENTORY()":{"notice":"An Orb contract reference"},"balanceOf(address,uint256)":{"notice":"Returns the escrowed token balance of a given token held by a given address"},"constructor":{"notice":"Creates a new escrow contract"},"deposit(uint256[],uint256[])":{"notice":"Handles the deposit of tokens."},"escrowedNFTs(address,uint256)":{"notice":"Mapping from owner address to a mapping from token ID to escrowed token count."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple types of tokens."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single type of token."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw(uint256[],uint256[])":{"notice":"Handles token withdrawal"}},"notice":"Mock contract for testing purposes, extends the ORBNFT contract.","version":1}}}}}}